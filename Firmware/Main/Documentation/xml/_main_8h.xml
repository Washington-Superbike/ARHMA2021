<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="_main_8h" kind="file" language="C++">
    <compoundname>Main.h</compoundname>
    <includes refid="config_8h" local="yes">config.h</includes>
    <includes refid="_c_a_n_8h" local="yes">CAN.h</includes>
    <includes refid="_display_8h" local="yes">Display.h</includes>
    <includes refid="_precharge_8h" local="yes">Precharge.h</includes>
    <includes refid="_data_logging_8h" local="yes">DataLogging.h</includes>
    <includes refid="_free_r_t_o_s___t_e_e_n_s_y4_8h" local="yes">FreeRTOS_TEENSY4.h</includes>
    <includes local="no">TimeLib.h</includes>
    <includedby refid="_data_logging_8ino" local="yes">C:/Users/ponym/ARHMA2021/Firmware/Main/DataLogging.ino</includedby>
    <includedby refid="_display_8ino" local="yes">C:/Users/ponym/ARHMA2021/Firmware/Main/Display.ino</includedby>
    <includedby refid="_main_8ino" local="yes">C:/Users/ponym/ARHMA2021/Firmware/Main/Main.ino</includedby>
    <incdepgraph>
      <node id="7">
        <label>Adafruit_GFX.h</label>
      </node>
      <node id="6">
        <label>Adafruit_ILI9341.h</label>
      </node>
      <node id="3">
        <label>CAN.h</label>
        <link refid="_c_a_n_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>DataLogging.h</label>
        <link refid="_data_logging_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Display.h</label>
        <link refid="_display_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>FreeRTOS_TEENSY4.h</label>
        <link refid="_free_r_t_o_s___t_e_e_n_s_y4_8h"/>
      </node>
      <node id="1">
        <label>C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h</label>
        <link refid="_main_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>Precharge.h</label>
        <link refid="_precharge_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>config.h</label>
        <link refid="config_8h"/>
      </node>
      <node id="4">
        <label>FlexCAN_T4.h</label>
      </node>
      <node id="8">
        <label>SPI.h</label>
      </node>
      <node id="13">
        <label>SdFat.h</label>
      </node>
      <node id="14">
        <label>TimeLib.h</label>
      </node>
      <node id="9">
        <label>XPT2046_Touchscreen.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>C:/Users/ponym/ARHMA2021/Firmware/Main/DataLogging.ino</label>
        <link refid="_data_logging_8ino"/>
      </node>
      <node id="3">
        <label>C:/Users/ponym/ARHMA2021/Firmware/Main/Display.ino</label>
        <link refid="_display_8ino"/>
      </node>
      <node id="1">
        <label>C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h</label>
        <link refid="_main_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>C:/Users/ponym/ARHMA2021/Firmware/Main/Main.ino</label>
        <link refid="_main_8ino"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_main_8h_1a04c234659b28f92e2eab7998b586bb4c" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int bms_status_flag</definition>
        <argsstring></argsstring>
        <name>bms_status_flag</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="53" column="12" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a54619d6c6a00d3268f764c33bd352ebf" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int bms_c_id</definition>
        <argsstring></argsstring>
        <name>bms_c_id</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="55" column="12" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a668e87eca74f2126136ee32a6964005e" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int bms_c_fault</definition>
        <argsstring></argsstring>
        <name>bms_c_fault</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="57" column="12" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ae21e58b785392a0951862c107609d059" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int ltc_fault</definition>
        <argsstring></argsstring>
        <name>ltc_fault</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="59" column="12" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a0de2096b0657dfd13ffeb3d18ae5d65c" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int ltc_count</definition>
        <argsstring></argsstring>
        <name>ltc_count</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="61" column="12" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1aad0824db126321851b9f0c49a3115de5" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float cellVoltagesArr[24]</definition>
        <argsstring>[24]</argsstring>
        <name>cellVoltagesArr</name>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="63" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ad2b91d0118e98c42f7d552fd5d3056ed" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float seriesVoltage</definition>
        <argsstring></argsstring>
        <name>seriesVoltage</name>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="65" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a006c7981abf25c0944f67d017aa5fe1f" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool cellsReady</definition>
        <argsstring></argsstring>
        <name>cellsReady</name>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="67" column="13" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a283b736b2bddfc8cbec62fe0759a9cd3" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float thTemps[10]</definition>
        <argsstring>[10]</argsstring>
        <name>thTemps</name>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="69" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1aefa2152d1586505d2d271edc7e9c4187" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int thermistorEnabled</definition>
        <argsstring></argsstring>
        <name>thermistorEnabled</name>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="71" column="12" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ad2bc733f382fc4bf0379382e3a15a94e" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int thermistorPresent</definition>
        <argsstring></argsstring>
        <name>thermistorPresent</name>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="73" column="12" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a68edb5124f79f990fb79a9e5b7a7f1e8" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float auxiliaryBatteryVoltage</definition>
        <argsstring></argsstring>
        <name>auxiliaryBatteryVoltage</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="75" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a6cb6d63c8afdc45f4ef149e6d3750a1c" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float angle_X</definition>
        <argsstring></argsstring>
        <name>angle_X</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>angle_X is the variable used for measuring the &quot;x-axis angle&quot; from the gyroscope. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="79" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a89aa0714a95ede6f4c623dbeb38ff019" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float angle_Y</definition>
        <argsstring></argsstring>
        <name>angle_Y</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>angle_Y is the variable used for measuring the &quot;y-axis angle&quot; from the gyroscope. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="81" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a5ac66e09e5f95b02b3a99a4a2a33f0aa" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Rate_Roll</definition>
        <argsstring></argsstring>
        <name>Rate_Roll</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Rate_Roll stores the rate of the roll angle (x-axis) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="83" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ae4de7890b46aeb807d61f0b71efc9ffe" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Rate_Pitch</definition>
        <argsstring></argsstring>
        <name>Rate_Pitch</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Rate_Pitch stores the rate of the pitch angle (y-axis) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="85" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a537fbd46985b9026ec7d6d0360d1d4d0" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Rate_Yaw</definition>
        <argsstring></argsstring>
        <name>Rate_Yaw</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Rate_Yaw stores the rate of the yaw angle (z-axis) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="87" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a1fde90bfdfb774d5f83e5fea79c17caf" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Rate_CalibrationRoll</definition>
        <argsstring></argsstring>
        <name>Rate_CalibrationRoll</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Rate_CalibrationRoll stores the rate calibration of the roll angle (x-axis) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="89" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a474d53e2608e3f1b00990ca9a7ccc64a" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Rate_CalibrationPitch</definition>
        <argsstring></argsstring>
        <name>Rate_CalibrationPitch</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Rate_CalibrationPitch stores the rate calibration of the pitch angle (y-axis) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="91" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1af1c993c5e41ee4d2e881139640989c1a" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Rate_CalibrationYaw</definition>
        <argsstring></argsstring>
        <name>Rate_CalibrationYaw</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Rate_CalibrationYaw stores the rate calibration of the pitch angle (y-axis) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="93" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a94bbee6853ba61e7fa11539e15174888" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int Rate_CalibrationNumber</definition>
        <argsstring></argsstring>
        <name>Rate_CalibrationNumber</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Rate_CalibrationNumber stores the rate calibration number) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="95" column="12" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a93a21521d3b3e91006f1957dabab890b" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Acc_X</definition>
        <argsstring></argsstring>
        <name>Acc_X</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Acc_X stores the acceleration along the x-axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="98" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a3b4304cff5611528af473a1dfb86c345" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Acc_Y</definition>
        <argsstring></argsstring>
        <name>Acc_Y</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Acc_Y stores the acceleration along the y-axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="100" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a68e2313572725be66b8d99950942dfb4" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Acc_Z</definition>
        <argsstring></argsstring>
        <name>Acc_Z</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Acc_Z stores the acceleration along the z-axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="102" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a6514f0d80926dc8e4aea4c92bd86c9eb" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Angle_Roll</definition>
        <argsstring></argsstring>
        <name>Angle_Roll</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Angle_Roll stores essentially angle_X. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="104" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1acbed8fcd71fbc60a2452c5e5e9433903" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Angle_Pitch</definition>
        <argsstring></argsstring>
        <name>Angle_Pitch</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Angle_Pitch stores essentially angle_Y. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="106" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ac2f400fd7d3933dbf70df179a012817a" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Kalman_AngleRoll</definition>
        <argsstring></argsstring>
        <name>Kalman_AngleRoll</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Kalman_AngleRoll is the Kalman filter processed roll angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="110" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a2896dd40967cce4e4f8b65e93cc2fb9d" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Kalman_UncertaintyAngleRoll</definition>
        <argsstring></argsstring>
        <name>Kalman_UncertaintyAngleRoll</name>
        <initializer>= 2 * 2</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="112" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1afb2a04d0a4be86d47607dea17db62631" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Kalman_AnglePitch</definition>
        <argsstring></argsstring>
        <name>Kalman_AnglePitch</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="114" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ae5ea9a8add204eed975816b032f4db3b" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Kalman_UncertaintyAnglePitch</definition>
        <argsstring></argsstring>
        <name>Kalman_UncertaintyAnglePitch</name>
        <initializer>= 2 * 2</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="116" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a077d47652e49b1a9d682fd58ae94ba46" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float Kalman_1DOutput[]</definition>
        <argsstring>[]</argsstring>
        <name>Kalman_1DOutput</name>
        <initializer>= {0, 0}</initializer>
        <briefdescription>
<para>USELESS REMOVE LATER: Output of the filter [0] is angle_x, [1] is angle_y. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="118" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ade4e42cdef2d4a9d50b3184100ad8cba" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float RPM</definition>
        <argsstring></argsstring>
        <name>RPM</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="122" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a7facdac5aec018a06fc1443c2f90a66d" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float motorCurrent</definition>
        <argsstring></argsstring>
        <name>motorCurrent</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="124" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1aca95a5d67296e1cf7fd5d05296cefc5a" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float motorControllerBatteryVoltage</definition>
        <argsstring></argsstring>
        <name>motorControllerBatteryVoltage</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="126" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1adca97acc6b0ff71f782f9c8a484a47b8" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float throttle</definition>
        <argsstring></argsstring>
        <name>throttle</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="128" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a45af45f80ded31266ad90143957a4e5e" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float motorControllerTemp</definition>
        <argsstring></argsstring>
        <name>motorControllerTemp</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="130" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1adf4cca4e15700419969edf3ce2ffe6e6" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float motorTemp</definition>
        <argsstring></argsstring>
        <name>motorTemp</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="132" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a9e20c92d5e427acd66b85b1451d23a6b" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int errorMessage</definition>
        <argsstring></argsstring>
        <name>errorMessage</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="134" column="12" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ae40c5f8677bda4442f02f482f3b50d33" prot="public" static="yes" mutable="no">
        <type>byte</type>
        <definition>byte controllerStatus</definition>
        <argsstring></argsstring>
        <name>controllerStatus</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="136" column="13" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a1e5e5db4f4b03ea34fcc2aaf5a334f2a" prot="public" static="yes" mutable="no">
        <type>byte</type>
        <definition>byte evccEnable</definition>
        <argsstring></argsstring>
        <name>evccEnable</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="140" column="13" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a10823f3996ecbd5481190d44baa7fd8e" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float evccVoltage</definition>
        <argsstring></argsstring>
        <name>evccVoltage</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="142" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a283f91fe8cbd45a92dda13dd793bbbe0" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float evccCurrent</definition>
        <argsstring></argsstring>
        <name>evccCurrent</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="144" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a1e4f6826343fcd16576ce3c411fb2287" prot="public" static="yes" mutable="no">
        <type>byte</type>
        <definition>byte chargeFlag</definition>
        <argsstring></argsstring>
        <name>chargeFlag</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="148" column="13" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a5613c4060f829f65acaac2bc064ae063" prot="public" static="yes" mutable="no">
        <type>byte</type>
        <definition>byte chargerStatusFlag</definition>
        <argsstring></argsstring>
        <name>chargerStatusFlag</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="150" column="13" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ab11fffe9a473928798422de66fcde502" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float chargerVoltage</definition>
        <argsstring></argsstring>
        <name>chargerVoltage</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="152" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a8b27b4284d9d4039618e5da068c2bc7f" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float chargerCurrent</definition>
        <argsstring></argsstring>
        <name>chargerCurrent</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="154" column="14" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a85ede348554a838fb67a3ceb3313be5b" prot="public" static="yes" mutable="no">
        <type>int8_t</type>
        <definition>int8_t chargerTemp</definition>
        <argsstring></argsstring>
        <name>chargerTemp</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Self explanatory. Read datasheet if more info needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="156" column="15" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a962a20f8dc1ba6934fdc04e44bde53a8" prot="public" static="yes" mutable="no">
        <type><ref refid="_display_8h_1a2dded6e25e0cb307491fd7997b66b2a4" kindref="member">MeasurementScreenData</ref></type>
        <definition>MeasurementScreenData measurementData</definition>
        <argsstring></argsstring>
        <name>measurementData</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of a struct to store all display data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="159" column="30" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a9eeb128a9907154869e9ffa78e065039" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_motor_stats" kindref="compound">MotorStats</ref></type>
        <definition>MotorStats motorStats</definition>
        <argsstring></argsstring>
        <name>motorStats</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of a struct to store all motor data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="161" column="19" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1abb61c6dc61d12b31aad7bdadd495b70a" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_motor_temps" kindref="compound">MotorTemps</ref></type>
        <definition>MotorTemps motorTemps</definition>
        <argsstring></argsstring>
        <name>motorTemps</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of a struct to store all motor temperature data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="163" column="19" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1afca6798677cebeeb7599ea00e1e243dd" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_cell_voltages" kindref="compound">CellVoltages</ref></type>
        <definition>CellVoltages cellVoltages</definition>
        <argsstring></argsstring>
        <name>cellVoltages</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of a struct to store all cell voltage data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="165" column="21" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ae0522609134711f92c96ffa8ed05e582" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_b_m_s_status" kindref="compound">BMSStatus</ref></type>
        <definition>BMSStatus bmsStatus</definition>
        <argsstring></argsstring>
        <name>bmsStatus</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of a struct to store all bms status data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="167" column="18" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a18571448b101f12a60457d717dc4f953" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_thermistor_temps" kindref="compound">ThermistorTemps</ref></type>
        <definition>ThermistorTemps thermistorTemps</definition>
        <argsstring></argsstring>
        <name>thermistorTemps</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of a struct to store all thermistorTemperatures. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="169" column="24" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1aa249f1d073086c27682168bbd7dc77ee" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_charger_stats" kindref="compound">ChargerStats</ref></type>
        <definition>ChargerStats chargerStats</definition>
        <argsstring></argsstring>
        <name>chargerStats</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of a struct to store all charger stats data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="171" column="21" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a566a5d391bca1611a2bfd1d97a1aa24c" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_charge_controller_stats" kindref="compound">ChargeControllerStats</ref></type>
        <definition>ChargeControllerStats chargeControllerStats</definition>
        <argsstring></argsstring>
        <name>chargeControllerStats</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of a struct to store all charge controller stats data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="173" column="30" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ab1d006bdd632ad57598689186c8ce63a" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_c_a_n_task_data" kindref="compound">CANTaskData</ref></type>
        <definition>CANTaskData canTaskData</definition>
        <argsstring></argsstring>
        <name>canTaskData</name>
        <briefdescription>
<para>An instance of a struct to store all CAN data, then pass it as a void pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="177" column="20" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1af74b66e7d389be76470292071c65f556" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_data_logging_task_data" kindref="compound">DataLoggingTaskData</ref></type>
        <definition>DataLoggingTaskData dataLoggingTaskData</definition>
        <argsstring></argsstring>
        <name>dataLoggingTaskData</name>
        <briefdescription>
<para>An instance of a struct to store all dataLogging data, then pass it as a void pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="179" column="28" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a695dccac97a0f45cf570237e981b2b5d" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_pre_charge_task_data" kindref="compound">PreChargeTaskData</ref></type>
        <definition>PreChargeTaskData preChargeData</definition>
        <argsstring></argsstring>
        <name>preChargeData</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of a struct to store all preCharge data, then pass it as a void pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="181" column="26" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a74a7fab0bce9e95dfced1f40d1764e9a" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref></type>
        <definition>CSVWriter motorTemperatureLog</definition>
        <argsstring></argsstring>
        <name>motorTemperatureLog</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of the logging struct for motor temperatures. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="186" column="18" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ae230e041b8d09151f97b07151fdaf38c" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref></type>
        <definition>CSVWriter motorControllerTemperatureLog</definition>
        <argsstring></argsstring>
        <name>motorControllerTemperatureLog</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of the logging struct for motor controller temperatures. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="188" column="18" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a4ca34bc3c27d808ebe3480bfed4b997a" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref></type>
        <definition>CSVWriter motorControllerVoltageLog</definition>
        <argsstring></argsstring>
        <name>motorControllerVoltageLog</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of the logging struct for motor controller voltage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="190" column="18" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a3ed95fd1ffa6f914d3bb19bbb59d2cd0" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref></type>
        <definition>CSVWriter motorCurrentLog</definition>
        <argsstring></argsstring>
        <name>motorCurrentLog</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of the logging struct for motor controller current. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="192" column="18" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a60f914a71f12f33ed914208fbf5be838" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref></type>
        <definition>CSVWriter rpmLog</definition>
        <argsstring></argsstring>
        <name>rpmLog</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of the logging struct for motor RPM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="194" column="18" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a8941dbd7f821806a7a6f4eb705b1472b" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref></type>
        <definition>CSVWriter thermistorLog</definition>
        <argsstring></argsstring>
        <name>thermistorLog</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of the logging struct for thermistor temperatures. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="196" column="18" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ade498aeeb82732f18af609faa0b323cb" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref></type>
        <definition>CSVWriter bmsVoltageLog</definition>
        <argsstring></argsstring>
        <name>bmsVoltageLog</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>An instance of the logging struct for BMS voltages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="198" column="18" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a9462b5ab9931c29422982609bceb3fad" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref> *</type>
        <definition>CSVWriter* logs[]</definition>
        <argsstring>[]</argsstring>
        <name>logs</name>
        <initializer>= {&amp;<ref refid="_main_8h_1a74a7fab0bce9e95dfced1f40d1764e9a" kindref="member">motorTemperatureLog</ref>, &amp;<ref refid="_main_8h_1ae230e041b8d09151f97b07151fdaf38c" kindref="member">motorControllerTemperatureLog</ref>, &amp;<ref refid="_main_8h_1a4ca34bc3c27d808ebe3480bfed4b997a" kindref="member">motorControllerVoltageLog</ref>, &amp;<ref refid="_main_8h_1a3ed95fd1ffa6f914d3bb19bbb59d2cd0" kindref="member">motorCurrentLog</ref>, &amp;<ref refid="_main_8h_1a60f914a71f12f33ed914208fbf5be838" kindref="member">rpmLog</ref>, &amp;<ref refid="_main_8h_1a8941dbd7f821806a7a6f4eb705b1472b" kindref="member">thermistorLog</ref>, &amp;<ref refid="_main_8h_1ade498aeeb82732f18af609faa0b323cb" kindref="member">bmsVoltageLog</ref>}</initializer>
        <briefdescription>
<para>An instance of the logging struct for storing all the above logs to pass onto dataLogging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="200" column="18" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a61d9ef65d75b66821896182b133b31de" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long timer</definition>
        <argsstring></argsstring>
        <name>timer</name>
        <initializer>= millis()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="203" column="15" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a40646f0d9308996b7d391cb8e0d95905" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cycleCount</definition>
        <argsstring></argsstring>
        <name>cycleCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="204" column="5" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1ad817dda0a86c980182765da5a3cafec8" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int lowerUpperCells</definition>
        <argsstring></argsstring>
        <name>lowerUpperCells</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="206" column="5" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a548fbf99c23fe3ef17f2e1a7b0992070" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long ms</definition>
        <argsstring></argsstring>
        <name>ms</name>
        <initializer>= millis()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="207" column="15" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1acdca7f14bb24f1cb2aa9d0be982560b2" prot="public" static="no" mutable="no">
        <type>byte</type>
        <definition>byte sdStarted</definition>
        <argsstring></argsstring>
        <name>sdStarted</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="208" column="6" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_main_8h_1a76c0525d646735793add25b18043e600" prot="public" static="no" mutable="no">
        <type><ref refid="semphr_8h_1ad88c6df4a04beedeac782918c8a332f5" kindref="member">SemaphoreHandle_t</ref></type>
        <definition>SemaphoreHandle_t spi_mutex</definition>
        <argsstring></argsstring>
        <name>spi_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="210" column="19" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_main_8h_1a4fc01d736fe50cf5b977f755b675f11d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setup</definition>
        <argsstring>()</argsstring>
        <name>setup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="_main_8h_1a4fc01d736fe50cf5b977f755b675f11d" kindref="member">setup()</ref> calls on all the helper methods in <ref refid="_main_8ino" kindref="compound">Main.ino</ref>. These helper methods serve to initialize all pin modes, package all variables from <ref refid="_main_8h" kindref="compound">Main.h</ref> into structs, initialize all communication protocols (as of now, just I2C), and then use those packaged structs to call on the RTOS <ref refid="tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1" kindref="member">xTaskCreate()</ref> to then send the variables off to various tasks with no issues. <ref refid="tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1" kindref="member">xTaskCreate()</ref> takes in a function name (pointer to an existing function which contains the essence of the task (these exist in the different files)), a label (string), stack size (integer/number), the parameters required for that task (a void pointer to the packaged structs from before) and lastly a task priority. There&apos;s another variable but it&apos;s kinda useless for our case and is only discussed in the detailed discussion below. <linebreak/>
 <linebreak/>
 Taking from the FreeRTOS documentation, the parameters serve the following DETAILED purposes. <linebreak/>
 <linebreak/>
pvTaskCode aka the pointer to the function used for the task. This function is usually an infinite loop with an RTOS VTaskDelay() call which will be further elaborated on within those functions in the documentation. <linebreak/>
 <linebreak/>
pcName aka the string with the funciton name. This is ususally used for debugging purposes. usStackDepth is the number of words to allocate for the task&apos;s stack (for those of you who havent had a chance to take CSE 374 or CSE 351, stack is dynamic memory, thus if any of your tasks use a lot of parameters or perform recursion, the stack size might have to be increased). Display has often been a victim of the stack size being too small in the past. <linebreak/>
 <linebreak/>
pvParameters aka the void pointer to the struct composed of the variables declared in <ref refid="_main_8h" kindref="compound">Main.h</ref>. Just a simple void pointer which is passed to the task when it executes. While passing variables and being careful with memory leaks is not too much of a concern thanks to the Arduino framework, it is still important to use good practices like this void pointer task memory unit to avoid any issues (plus RTOS just requires something to be passed through anyway). <linebreak/>
 <linebreak/>
uxPriority aka the priority at which the task will execute. Lower priority numbers indicate tasks with lower priority in execution. That is, while the RTOS is constantly swapping between your tasks, ensuring they execute properly, etc the higher priority tasks are given highest priority to run once the CPU is ready. Just makes sense really. <linebreak/>
 <linebreak/>
pxCreatedTask is a variable that is used to pass a handle to the created task outside of the <ref refid="tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1" kindref="member">xTaskCreate()</ref> function. That means the ??? IDK it&apos;s not needed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>First this method calls on <ref refid="_main_8h_1a31d554847ae8fdeaba2460e0395cb75f" kindref="member">setupPins()</ref> to set certain pins to output and input. This initializes how the pins will be used and interact with peripherals for the rest of the runtime of the firmware.</para>
<para>Then this method calls on <ref refid="_main_8h_1a128d10ba9e06eb69d1dfc91ffef935ba" kindref="member">initializeDisplayStructs()</ref> to map the static variables from <ref refid="_main_8h" kindref="compound">Main.h</ref> from to a struct that is used for the <ref refid="_display_8ino_1a7121972a969d5d8bd9c96626cfd61b11" kindref="member">displayTask()</ref></para>
<para>Then this method calls on <ref refid="_main_8h_1ab91267714bdf99d7b3d177f95f484157" kindref="member">initializeCANStructs()</ref> to map the static variables from <ref refid="_main_8h" kindref="compound">Main.h</ref> from to a struct that is used for the <ref refid="_c_a_n_8h_1a785e095da30ce4993a186804102bf2ea" kindref="member">canTask()</ref></para>
<para>Then this method calls on <ref refid="_main_8h_1a797cf3c70ce7ae02bba9bfd3f6d886de" kindref="member">initializeLogStructs()</ref> to map the static variables from <ref refid="_main_8h" kindref="compound">Main.h</ref> from to a struct that is used for the <ref refid="_data_logging_8h_1a24f7ab7e53619e5770ad9acc25b9b819" kindref="member">dataLoggingTask()</ref></para>
<para>Then this method calls on <ref refid="_main_8h_1a32469c898d757b2b30c00d0546f91802" kindref="member">initializePreChargeStruct()</ref> to map the static variables from <ref refid="_main_8h" kindref="compound">Main.h</ref> from to a struct that is used for the <ref refid="_pre_charge_8ino_1a2cd6f5c27d7667dbd0b6a0bc756340a3" kindref="member">prechargeTask()</ref></para>
<para>Then this method initializes Serial communication using Serial.begin() initializing Serial at a baud rate of 115200.</para>
<para><simplesect kind="note"><para>DISCLAIMER: When first running this code on a fresh board, the time will not properly update to Pacific Standard, or any real-looking time. Instead it will update to whatever default value is on the teensy board RTC (real-time clock). Thus, to set the Teensy RTC to the real world clock, you need to upload the sketch: <linebreak/>
 <linebreak/>
File-&gt;Examples-&gt;Time-&gt;TimeTeensy3 and open the serial port. That will set the internal time to the time on the laptop I believe, or connects to the internet somehow to determine the &quot;current&quot; time. This next line calls with the statement setTime(Teensy3Clock.get()) sets the current stored time to the time stored in the internal RTC in the Teensy, allowing for Teensy time from the internal RTC (powered by the coin cell).</para>
</simplesect>
Then this method starts the SD Card and prints the status if that works.</para>
<para>Then this method calls on the <ref refid="_display_8h_1a79b84de3ddc4f88db07ac708452e4467" kindref="member">setupDisplay()</ref> method which just initializes variables that are used by the <ref refid="_display_8ino_1a7121972a969d5d8bd9c96626cfd61b11" kindref="member">displayTask()</ref></para>
<para>Then this method calls on the <ref refid="_c_a_n_8h_1a833ae6516ecb5cb3f8a7bd5adbf2bd9b" kindref="member">setupCAN()</ref> method which just initializes the CAN bus at a baud rate of 250000. And then begins the CAN bus.</para>
<para>Then this method calls on the <ref refid="_precharge_8h_1a5782bd590f95fb2269eb43a3d70c18f4" kindref="member">setupI2C()</ref> method which just initializes the I2C communication protocol, setting the clock to 40KHz, reading in the initial values of the gyroscope, taking ~2 seconds worth of data to calibrate.</para>
<para>The main and most important function of setup is initializing the tasks using <ref refid="tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1" kindref="member">xTaskCreate()</ref>. The details of parameters are explained in the Note at the start of <ref refid="_main_8h_1a4fc01d736fe50cf5b977f755b675f11d" kindref="member">setup()</ref>. The stack sizes are edited in <ref refid="_main_8h" kindref="compound">Main.h</ref> and the priorities are logically assigned for <ref refid="_precharge_8h_1a3a618d104e1f329b2aad074b706db5c9" kindref="member">preChargeTask()</ref> with highest priority 5, <ref refid="_c_a_n_8h_1a785e095da30ce4993a186804102bf2ea" kindref="member">canTask()</ref> with second highest priority 4 since it contains data that can be used to trigger Off states for <ref refid="_precharge_8h_1a3a618d104e1f329b2aad074b706db5c9" kindref="member">preChargeTask()</ref>. dataLogging() is 3, it&apos;s important to update the stored data from the race, but it&apos;s more important to shutdown the bike if batteries are dying. <ref refid="_display_8ino_1a7121972a969d5d8bd9c96626cfd61b11" kindref="member">displayTask()</ref> is a 2 because see aforementioned reasoning for dataLogging(). <ref refid="_main_8h_1a0d7297755c0775a9b0e4f7eeeafd7c7e" kindref="member">idleTask()</ref> is a 1 ideally we never want to idle unless everything is taken care of and the teensy is that powerful.</para>
<para>Then, the firmware checks if the tasks passed, if they failed, it stays in a loop printing error creating tasks.</para>
<para>Lastly the method prints out that it will attempt to start the scheduler. If this succeeds, only lines from the task methods should know execute.</para>
<para>If this fails, the method prints out insufficient RAM and breaks.</para>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="251" column="6" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.ino" bodystart="65" bodyend="160" declfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" declline="251" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_main_8h_1a31d554847ae8fdeaba2460e0395cb75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setupPins</definition>
        <argsstring>()</argsstring>
        <name>setupPins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="_main_8h_1a31d554847ae8fdeaba2460e0395cb75f" kindref="member">setupPins()</ref> calls on the Arduino library&apos;s pinMode and digitalWrite() methods to initialize pins to specific states. The variables and macros corresponding to the pin numbers are taken from the .h files of the task they serve. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="note"><para>NOTE: SOME OF THESE PINS MAY NEED TO BE REMOVED NOW: CONTACTOR_CLOSED_LED, CONTACTOR_PRECHARGED_LED, CLOSE_CONTACTOR_BUTTON</para>
</simplesect>
Initializes the pin corresponding to High Voltage Toggle as an input PULLUP resistor.</para>
<para>Initializes the pin corresponding to Closing the Contactor as an input PULLUP resistor.</para>
<para>Initializes the pin corresponding to the Screen reset as output and then outputs HIGH to that pin.</para>
<para>Initializes the pin corresponding to the Chip Select as output and then outputs HIGH to that pin.</para>
<para>UNSURE WHAT THE TS_CS pin is and at this point I&apos;m too scared to ask. Sets it to output and HIGH.</para>
<para>Initializes the pin corresponding to the Precharge as output and then outputs LOW to that pin.</para>
<para>Initializes the pin corresponding to the Contactor as output and then outputs LOW to that pin.</para>
<para>Initializes the pin corresponding to the Contactor Precharge-Read LED as output and then outputs LOW to that pin.</para>
<para>Initializes the pin corresponding to the Contactor-Closed LED as output and then outputs LOW to that pin.</para>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="258" column="6" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.ino" bodystart="162" bodyend="197" declfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" declline="258" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_main_8h_1a128d10ba9e06eb69d1dfc91ffef935ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initializeDisplayStructs</definition>
        <argsstring>()</argsstring>
        <name>initializeDisplayStructs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="_main_8h_1a128d10ba9e06eb69d1dfc91ffef935ba" kindref="member">initializeDisplayStructs()</ref> uses the variables: seriesVoltage, motorControllerBatteryVoltage, auxiliaryBatteryVoltage, RPM, motorControllerTemp, motorCurrent, errorMessage, chargerCurrent, chargerVoltage, bms_status_flag, evccVoltage, thTempshe and then packages them into a variable called measurementData which is taken from <ref refid="_display_8h" kindref="compound">Display.h</ref> Then the measurement data and screen variable are packaged into the displayTaskWrap variable which is passed to the displayTask as the void pointer for the task&apos;s data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="268" column="6" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.ino" bodystart="199" bodyend="205" declfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" declline="268" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_main_8h_1a797cf3c70ce7ae02bba9bfd3f6d886de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initializeLogStructs</definition>
        <argsstring>()</argsstring>
        <name>initializeLogStructs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="_main_8h_1a797cf3c70ce7ae02bba9bfd3f6d886de" kindref="member">initializeLogStructs()</ref> uses too many variables... and it packages them into different logging variables which are then passed to the &quot;logs&quot; variable which is used by the <ref refid="_data_logging_8h_1a24f7ab7e53619e5770ad9acc25b9b819" kindref="member">dataLoggingTask()</ref>. Therefore, to add more data to datalogging or change the variables first you would need to change the corresponding variables that make up the &quot;logs&quot; varaible in <ref refid="_main_8h" kindref="compound">Main.h</ref> and then change those corresponding variables in <ref refid="_main_8h_1a797cf3c70ce7ae02bba9bfd3f6d886de" kindref="member">initializeLogStructs()</ref>. <linebreak/>
 <linebreak/>
This will be handy to the SOC team later as they implement more changes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="279" column="6" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.ino" bodystart="207" bodyend="216" declfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" declline="279" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_main_8h_1ab91267714bdf99d7b3d177f95f484157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initializeCANStructs</definition>
        <argsstring>()</argsstring>
        <name>initializeCANStructs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="_main_8h_1ab91267714bdf99d7b3d177f95f484157" kindref="member">initializeCANStructs()</ref> uses too many variables... and it packages them into the different variables that are all being updated by the CAN protocol. These are variables that are read in from the motorController, Battery Management System, thermistors, charger, and charge controller. These are then packaged in to the canTaskData variable which is passed to <ref refid="_c_a_n_8h_1a785e095da30ce4993a186804102bf2ea" kindref="member">canTask()</ref>. <ref refid="_c_a_n_8h_1a785e095da30ce4993a186804102bf2ea" kindref="member">canTask()</ref> updates the variable which in turn updates it for everything, allowing display to be updated with no problem (since all variables used by tasks are just pointers to the original variable that is declared in <ref refid="_main_8h" kindref="compound">Main.h</ref> and then updating one just updates everything across the board. <linebreak/>
 <linebreak/>
Update this accordingly as we add more CAN items to the bike (if we ever do). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="292" column="6" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.ino" bodystart="218" bodyend="227" declfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" declline="292" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_main_8h_1a32469c898d757b2b30c00d0546f91802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initializePreChargeStruct</definition>
        <argsstring>()</argsstring>
        <name>initializePreChargeStruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="_main_8h_1a32469c898d757b2b30c00d0546f91802" kindref="member">initializePreChargeStruct()</ref> uses too many variables... It is primarily composed of the cellVoltages, bmsStatus, etc. which are used to shutdown or startup to bike depending on the situation it is in. The rest of the variables correspond to the bloated method we use for gyroscope reading. It is good for racing and is efficient enough, but if we ever run out of stuff to do please make it less bloated as described in the TODO at the top of the file. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="302" column="6" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.ino" bodystart="229" bodyend="235" declfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" declline="302" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_main_8h_1aafd615bc53c2f27720d792a6a2968209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool get_SPI_control</definition>
        <argsstring>(unsigned int ms)</argsstring>
        <name>get_SPI_control</name>
        <param>
          <type>unsigned int</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Just a basic helper method that takes control of the spiMutex which is used as an example line in <ref refid="_main_8h_1a4fc01d736fe50cf5b977f755b675f11d" kindref="member">setup()</ref> but not actually used in the current <ref refid="tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1" kindref="member">xTaskCreate()</ref> methods or this RTOS in general. <linebreak/>
 <linebreak/>
The purpose of a mutex is to create a sort of indication to the RTOS that there is a specific resource being used for a specific task and to not begin any other task that interrupts this specific resource, like the pins used for the SPI protocol for this case, etc. etc. <linebreak/>
 <linebreak/>
Please read up on Mutex, etc. in the RTOS documentation to make sure you use it correctly. This is only necessary if there are different tasks with two different devices using the same communication protocol. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="317" column="6" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.ino" bodystart="237" bodyend="239" declfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" declline="317" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_main_8h_1a966fda2bc617e020cb78f814bb5514c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void release_SPI_control</definition>
        <argsstring>(void)</argsstring>
        <name>release_SPI_control</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Just a basic helper method releases control of the spiMutex which is used as an example line in <ref refid="_main_8h_1a4fc01d736fe50cf5b977f755b675f11d" kindref="member">setup()</ref> but not actually used in the current <ref refid="tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1" kindref="member">xTaskCreate()</ref> methods or this RTOS in general. <linebreak/>
 <linebreak/>
The purpose of a mutex is to create a sort of indication to the RTOS that there is a specific resource being used for a specific task and to not begin any other task that interrupts this specific resource, like the pins used for the SPI protocol for this case, etc. etc. <linebreak/>
 <linebreak/>
Please read up on Mutex, etc. in the RTOS documentation to make sure you use it correctly. This is only necessary if there are different tasks with two different devices using the same communication protocol. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="332" column="6" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.ino" bodystart="241" bodyend="243" declfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" declline="332" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_main_8h_1a3e0781915a9e0f2045e892efe59f9fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>time_t</type>
        <definition>time_t getTeensy3Time</definition>
        <argsstring>()</argsstring>
        <name>getTeensy3Time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Just a basic helper method that returns the time variable that is stored in the teensy&apos;s RTC. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="337" column="8" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.ino" bodystart="245" bodyend="248" declfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" declline="337" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="_main_8h_1a0d7297755c0775a9b0e4f7eeeafd7c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idleTask</definition>
        <argsstring>(void *taskData)</argsstring>
        <name>idleTask</name>
        <param>
          <type>void *</type>
          <declname>taskData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Just a basic IDLE task that seems to do nothing. If triggered it blocks out for 50 CPU cycles. Doing nothing. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="343" column="6" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.ino" bodystart="250" bodyend="254" declfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" declline="343" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_main_8h_1afe461d27b9c48d5921c00d521181f12f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loop</definition>
        <argsstring>()</argsstring>
        <name>loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Arduino framework classic. <ref refid="_main_8h_1a4fc01d736fe50cf5b977f755b675f11d" kindref="member">setup()</ref> should run once. <ref refid="_main_8h_1afe461d27b9c48d5921c00d521181f12f" kindref="member">loop()</ref> should run forever. Doesn&apos;t work in our case because we run RTOS via <ref refid="_main_8h_1a4fc01d736fe50cf5b977f755b675f11d" kindref="member">setup()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" line="349" column="6" bodyfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.ino" bodystart="256" bodyend="257" declfile="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h" declline="349" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The main config file for bike firmware. This initializes all variables that are passed along to all other files as pointers. Then it creates the initial reference (there&apos;s a proper C programming term for it) for all the methods used in <ref refid="_main_8ino" kindref="compound">Main.ino</ref>. This file exists as an overall configuration for the bike firmware as all these variables can be changed to meet requirements. Like all other header files, it exists as the skeleton on which the .ino file is built. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Washington Superbike </para>
</simplesect>
<simplesect kind="date"><para>1-March-2023 </para>
</simplesect>
<simplesect kind="note"><para>Main thing to note. The statement #pragma once is a compiler specific command for newer compilers in C. It is the equivalent of ifndef define statements. If you dont know what those are, please take CSE 351. To give the gist of it, you need a #pragma once or ifndef statment (in our older code) to ensure that when running the code, when you do a #include <ref refid="_main_8h" kindref="compound">Main.h</ref> and if every other file does that, the #pragma once command ensures that the first time the <ref refid="_main_8h" kindref="compound">Main.h</ref> is #included, it is properly defined, so that when a file attempts to include it again, it skips that including. If that doesn&apos;t make sense, dont worry, CSE 351, CSE 374. Please take them. They&apos;re like top 6 EE classes. Secondly, in this file all variables are static because the static keyword in C++ (which is what .ino files are technically speaking) is basically used to define global variables that are not to be removed in memory. All the variables below are the skeleton of the firmware, every file references to these variables by being passed their address and changing their value using that address. Instead of creating 10 copies when passing variables around, there&apos;s just one global copy.</para>
</simplesect>
<xrefsect id="todo_1_todo000008"><xreftitle>Todo</xreftitle><xrefdescription><para>Based on refinements made for preCharge/controls.ino, remove spare and redundant variables. And just generally ALL the spare variables. <linebreak/>
 <linebreak/>
 Based on the changes implemented for SoC, I would add another variable for the low-voltage current sneors or any other current sensors you add <linebreak/>
 <linebreak/>
 Final Goal. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="config_8h" kindref="compound">config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_c_a_n_8h" kindref="compound">CAN.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_display_8h" kindref="compound">Display.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_precharge_8h" kindref="compound">Precharge.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_data_logging_8h" kindref="compound">DataLogging.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_free_r_t_o_s___t_e_e_n_s_y4_8h" kindref="compound">FreeRTOS_TEENSY4.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TimeLib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BMS<sp/>and<sp/>Battery<sp/>values.<sp/>Determined<sp/>via<sp/>CAN<sp/>and<sp/>other<sp/>protocols.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>PROBABLY<sp/>ADD<sp/>THE<sp/>LV<sp/>System<sp/>current<sp/>here.</highlight></codeline>
<codeline lineno="53" refid="_main_8h_1a04c234659b28f92e2eab7998b586bb4c" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a04c234659b28f92e2eab7998b586bb4c" kindref="member">bms_status_flag</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55" refid="_main_8h_1a54619d6c6a00d3268f764c33bd352ebf" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a54619d6c6a00d3268f764c33bd352ebf" kindref="member">bms_c_id</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57" refid="_main_8h_1a668e87eca74f2126136ee32a6964005e" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a668e87eca74f2126136ee32a6964005e" kindref="member">bms_c_fault</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59" refid="_main_8h_1ae21e58b785392a0951862c107609d059" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1ae21e58b785392a0951862c107609d059" kindref="member">ltc_fault</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="61" refid="_main_8h_1a0de2096b0657dfd13ffeb3d18ae5d65c" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a0de2096b0657dfd13ffeb3d18ae5d65c" kindref="member">ltc_count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63" refid="_main_8h_1aad0824db126321851b9f0c49a3115de5" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1aad0824db126321851b9f0c49a3115de5" kindref="member">cellVoltagesArr</ref>[<ref refid="_c_a_n_8h_1aedb50849ed846717c3096b10fb75d537" kindref="member">BMS_CELLS</ref>];<sp/><sp/></highlight><highlight class="comment">//<sp/>voltages<sp/>starting<sp/>with<sp/>the<sp/>first<sp/>LTC</highlight></codeline>
<codeline lineno="65" refid="_main_8h_1ad2b91d0118e98c42f7d552fd5d3056ed" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1ad2b91d0118e98c42f7d552fd5d3056ed" kindref="member">seriesVoltage</ref>;</highlight></codeline>
<codeline lineno="67" refid="_main_8h_1a006c7981abf25c0944f67d017aa5fe1f" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a006c7981abf25c0944f67d017aa5fe1f" kindref="member">cellsReady</ref>;</highlight></codeline>
<codeline lineno="69" refid="_main_8h_1a283b736b2bddfc8cbec62fe0759a9cd3" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a283b736b2bddfc8cbec62fe0759a9cd3" kindref="member">thTemps</ref>[<ref refid="config_8h_1a9e9f6a6f679efeb38325e7474a2e4c85" kindref="member">NUM_THERMI</ref>];</highlight></codeline>
<codeline lineno="71" refid="_main_8h_1aefa2152d1586505d2d271edc7e9c4187" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1aefa2152d1586505d2d271edc7e9c4187" kindref="member">thermistorEnabled</ref>;</highlight></codeline>
<codeline lineno="73" refid="_main_8h_1ad2bc733f382fc4bf0379382e3a15a94e" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1ad2bc733f382fc4bf0379382e3a15a94e" kindref="member">thermistorPresent</ref>;</highlight></codeline>
<codeline lineno="75" refid="_main_8h_1a68edb5124f79f990fb79a9e5b7a7f1e8" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a68edb5124f79f990fb79a9e5b7a7f1e8" kindref="member">auxiliaryBatteryVoltage</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>these<sp/>variables<sp/>are<sp/>used<sp/>to<sp/>read<sp/>in<sp/>the<sp/>data<sp/>from<sp/>the<sp/>gyroscope.</highlight></codeline>
<codeline lineno="79" refid="_main_8h_1a6cb6d63c8afdc45f4ef149e6d3750a1c" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a6cb6d63c8afdc45f4ef149e6d3750a1c" kindref="member">angle_X</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="81" refid="_main_8h_1a89aa0714a95ede6f4c623dbeb38ff019" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a89aa0714a95ede6f4c623dbeb38ff019" kindref="member">angle_Y</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="83" refid="_main_8h_1a5ac66e09e5f95b02b3a99a4a2a33f0aa" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a5ac66e09e5f95b02b3a99a4a2a33f0aa" kindref="member">Rate_Roll</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="85" refid="_main_8h_1ae4de7890b46aeb807d61f0b71efc9ffe" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1ae4de7890b46aeb807d61f0b71efc9ffe" kindref="member">Rate_Pitch</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="87" refid="_main_8h_1a537fbd46985b9026ec7d6d0360d1d4d0" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a537fbd46985b9026ec7d6d0360d1d4d0" kindref="member">Rate_Yaw</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="89" refid="_main_8h_1a1fde90bfdfb774d5f83e5fea79c17caf" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a1fde90bfdfb774d5f83e5fea79c17caf" kindref="member">Rate_CalibrationRoll</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="91" refid="_main_8h_1a474d53e2608e3f1b00990ca9a7ccc64a" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a474d53e2608e3f1b00990ca9a7ccc64a" kindref="member">Rate_CalibrationPitch</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="93" refid="_main_8h_1af1c993c5e41ee4d2e881139640989c1a" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1af1c993c5e41ee4d2e881139640989c1a" kindref="member">Rate_CalibrationYaw</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="95" refid="_main_8h_1a94bbee6853ba61e7fa11539e15174888" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a94bbee6853ba61e7fa11539e15174888" kindref="member">Rate_CalibrationNumber</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="_main_8h_1a93a21521d3b3e91006f1957dabab890b" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a93a21521d3b3e91006f1957dabab890b" kindref="member">Acc_X</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="100" refid="_main_8h_1a3b4304cff5611528af473a1dfb86c345" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a3b4304cff5611528af473a1dfb86c345" kindref="member">Acc_Y</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="102" refid="_main_8h_1a68e2313572725be66b8d99950942dfb4" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a68e2313572725be66b8d99950942dfb4" kindref="member">Acc_Z</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="104" refid="_main_8h_1a6514f0d80926dc8e4aea4c92bd86c9eb" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a6514f0d80926dc8e4aea4c92bd86c9eb" kindref="member">Angle_Roll</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="106" refid="_main_8h_1acbed8fcd71fbc60a2452c5e5e9433903" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1acbed8fcd71fbc60a2452c5e5e9433903" kindref="member">Angle_Pitch</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>these<sp/>variables<sp/>are<sp/>used<sp/>to<sp/>filter<sp/>the<sp/>gyroscope<sp/>angles<sp/>using<sp/>the<sp/>Kalman<sp/>filter.</highlight></codeline>
<codeline lineno="110" refid="_main_8h_1ac2f400fd7d3933dbf70df179a012817a" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1ac2f400fd7d3933dbf70df179a012817a" kindref="member">Kalman_AngleRoll</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="112" refid="_main_8h_1a2896dd40967cce4e4f8b65e93cc2fb9d" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a2896dd40967cce4e4f8b65e93cc2fb9d" kindref="member">Kalman_UncertaintyAngleRoll</ref><sp/>=<sp/>2<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="114" refid="_main_8h_1afb2a04d0a4be86d47607dea17db62631" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1afb2a04d0a4be86d47607dea17db62631" kindref="member">Kalman_AnglePitch</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="116" refid="_main_8h_1ae5ea9a8add204eed975816b032f4db3b" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1ae5ea9a8add204eed975816b032f4db3b" kindref="member">Kalman_UncertaintyAnglePitch</ref><sp/>=<sp/>2<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="118" refid="_main_8h_1a077d47652e49b1a9d682fd58ae94ba46" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a077d47652e49b1a9d682fd58ae94ba46" kindref="member">Kalman_1DOutput</ref>[]<sp/>=<sp/>{0,<sp/>0};</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>these<sp/>variables<sp/>are<sp/>can<sp/>values<sp/>derived<sp/>from<sp/>the<sp/>motor<sp/>controller.</highlight></codeline>
<codeline lineno="122" refid="_main_8h_1ade4e42cdef2d4a9d50b3184100ad8cba" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1ade4e42cdef2d4a9d50b3184100ad8cba" kindref="member">RPM</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="124" refid="_main_8h_1a7facdac5aec018a06fc1443c2f90a66d" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a7facdac5aec018a06fc1443c2f90a66d" kindref="member">motorCurrent</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126" refid="_main_8h_1aca95a5d67296e1cf7fd5d05296cefc5a" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1aca95a5d67296e1cf7fd5d05296cefc5a" kindref="member">motorControllerBatteryVoltage</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="128" refid="_main_8h_1adca97acc6b0ff71f782f9c8a484a47b8" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1adca97acc6b0ff71f782f9c8a484a47b8" kindref="member">throttle</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="130" refid="_main_8h_1a45af45f80ded31266ad90143957a4e5e" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a45af45f80ded31266ad90143957a4e5e" kindref="member">motorControllerTemp</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132" refid="_main_8h_1adf4cca4e15700419969edf3ce2ffe6e6" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1adf4cca4e15700419969edf3ce2ffe6e6" kindref="member">motorTemp</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="134" refid="_main_8h_1a9e20c92d5e427acd66b85b1451d23a6b" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a9e20c92d5e427acd66b85b1451d23a6b" kindref="member">errorMessage</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136" refid="_main_8h_1ae40c5f8677bda4442f02f482f3b50d33" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1ae40c5f8677bda4442f02f482f3b50d33" kindref="member">controllerStatus</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Charge<sp/>controller<sp/>variables</highlight></codeline>
<codeline lineno="140" refid="_main_8h_1a1e5e5db4f4b03ea34fcc2aaf5a334f2a" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a1e5e5db4f4b03ea34fcc2aaf5a334f2a" kindref="member">evccEnable</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142" refid="_main_8h_1a10823f3996ecbd5481190d44baa7fd8e" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a10823f3996ecbd5481190d44baa7fd8e" kindref="member">evccVoltage</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="144" refid="_main_8h_1a283f91fe8cbd45a92dda13dd793bbbe0" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a283f91fe8cbd45a92dda13dd793bbbe0" kindref="member">evccCurrent</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Charger<sp/>variables</highlight></codeline>
<codeline lineno="148" refid="_main_8h_1a1e4f6826343fcd16576ce3c411fb2287" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a1e4f6826343fcd16576ce3c411fb2287" kindref="member">chargeFlag</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150" refid="_main_8h_1a5613c4060f829f65acaac2bc064ae063" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a5613c4060f829f65acaac2bc064ae063" kindref="member">chargerStatusFlag</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152" refid="_main_8h_1ab11fffe9a473928798422de66fcde502" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1ab11fffe9a473928798422de66fcde502" kindref="member">chargerVoltage</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="154" refid="_main_8h_1a8b27b4284d9d4039618e5da068c2bc7f" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a8b27b4284d9d4039618e5da068c2bc7f" kindref="member">chargerCurrent</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="156" refid="_main_8h_1a85ede348554a838fb67a3ceb3313be5b" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int8_t<sp/><ref refid="_main_8h_1a85ede348554a838fb67a3ceb3313be5b" kindref="member">chargerTemp</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="_main_8h_1a962a20f8dc1ba6934fdc04e44bde53a8" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_measurement_screen_data_struct" kindref="compound">MeasurementScreenData</ref><sp/><ref refid="_main_8h_1a962a20f8dc1ba6934fdc04e44bde53a8" kindref="member">measurementData</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="161" refid="_main_8h_1a9eeb128a9907154869e9ffa78e065039" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_motor_stats" kindref="compound">MotorStats</ref><sp/><ref refid="_main_8h_1a9eeb128a9907154869e9ffa78e065039" kindref="member">motorStats</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="163" refid="_main_8h_1abb61c6dc61d12b31aad7bdadd495b70a" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_motor_temps" kindref="compound">MotorTemps</ref><sp/><ref refid="_main_8h_1abb61c6dc61d12b31aad7bdadd495b70a" kindref="member">motorTemps</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="165" refid="_main_8h_1afca6798677cebeeb7599ea00e1e243dd" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_cell_voltages" kindref="compound">CellVoltages</ref><sp/><ref refid="_main_8h_1afca6798677cebeeb7599ea00e1e243dd" kindref="member">cellVoltages</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="167" refid="_main_8h_1ae0522609134711f92c96ffa8ed05e582" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_b_m_s_status" kindref="compound">BMSStatus</ref><sp/><ref refid="_main_8h_1ae0522609134711f92c96ffa8ed05e582" kindref="member">bmsStatus</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="169" refid="_main_8h_1a18571448b101f12a60457d717dc4f953" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_thermistor_temps" kindref="compound">ThermistorTemps</ref><sp/><ref refid="_main_8h_1a18571448b101f12a60457d717dc4f953" kindref="member">thermistorTemps</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="171" refid="_main_8h_1aa249f1d073086c27682168bbd7dc77ee" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_charger_stats" kindref="compound">ChargerStats</ref><sp/><ref refid="_main_8h_1aa249f1d073086c27682168bbd7dc77ee" kindref="member">chargerStats</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="173" refid="_main_8h_1a566a5d391bca1611a2bfd1d97a1aa24c" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_charge_controller_stats" kindref="compound">ChargeControllerStats</ref><sp/><ref refid="_main_8h_1a566a5d391bca1611a2bfd1d97a1aa24c" kindref="member">chargeControllerStats</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>variables<sp/>store<sp/>all<sp/>the<sp/>task<sp/>data<sp/>for<sp/>all<sp/>4<sp/>tasks<sp/>(except<sp/>IDLE)</highlight></codeline>
<codeline lineno="177" refid="_main_8h_1ab1d006bdd632ad57598689186c8ce63a" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n_task_data" kindref="compound">CANTaskData</ref><sp/><ref refid="_main_8h_1ab1d006bdd632ad57598689186c8ce63a" kindref="member">canTaskData</ref>;</highlight></codeline>
<codeline lineno="179" refid="_main_8h_1af74b66e7d389be76470292071c65f556" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_data_logging_task_data" kindref="compound">DataLoggingTaskData</ref><sp/><ref refid="_main_8h_1af74b66e7d389be76470292071c65f556" kindref="member">dataLoggingTaskData</ref>;</highlight></codeline>
<codeline lineno="181" refid="_main_8h_1a695dccac97a0f45cf570237e981b2b5d" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_pre_charge_task_data" kindref="compound">PreChargeTaskData</ref><sp/><ref refid="_main_8h_1a695dccac97a0f45cf570237e981b2b5d" kindref="member">preChargeData</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Log<sp/>variables<sp/>used<sp/>for<sp/>dataLogging<sp/>task.<sp/>Change<sp/>things<sp/>here<sp/>if<sp/>you<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>add<sp/>more<sp/>variables<sp/>to<sp/>logging.</highlight></codeline>
<codeline lineno="186" refid="_main_8h_1a74a7fab0bce9e95dfced1f40d1764e9a" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref><sp/><ref refid="_main_8h_1a74a7fab0bce9e95dfced1f40d1764e9a" kindref="member">motorTemperatureLog</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="188" refid="_main_8h_1ae230e041b8d09151f97b07151fdaf38c" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref><sp/><ref refid="_main_8h_1ae230e041b8d09151f97b07151fdaf38c" kindref="member">motorControllerTemperatureLog</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="190" refid="_main_8h_1a4ca34bc3c27d808ebe3480bfed4b997a" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref><sp/><ref refid="_main_8h_1a4ca34bc3c27d808ebe3480bfed4b997a" kindref="member">motorControllerVoltageLog</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="192" refid="_main_8h_1a3ed95fd1ffa6f914d3bb19bbb59d2cd0" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref><sp/><ref refid="_main_8h_1a3ed95fd1ffa6f914d3bb19bbb59d2cd0" kindref="member">motorCurrentLog</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="194" refid="_main_8h_1a60f914a71f12f33ed914208fbf5be838" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref><sp/><ref refid="_main_8h_1a60f914a71f12f33ed914208fbf5be838" kindref="member">rpmLog</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="196" refid="_main_8h_1a8941dbd7f821806a7a6f4eb705b1472b" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref><sp/><ref refid="_main_8h_1a8941dbd7f821806a7a6f4eb705b1472b" kindref="member">thermistorLog</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="198" refid="_main_8h_1ade498aeeb82732f18af609faa0b323cb" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref><sp/><ref refid="_main_8h_1ade498aeeb82732f18af609faa0b323cb" kindref="member">bmsVoltageLog</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="200" refid="_main_8h_1a9462b5ab9931c29422982609bceb3fad" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_c_s_v_writer" kindref="compound">CSVWriter</ref><sp/>*<ref refid="_main_8h_1a9462b5ab9931c29422982609bceb3fad" kindref="member">logs</ref>[]<sp/>=<sp/>{&amp;<ref refid="_main_8h_1a74a7fab0bce9e95dfced1f40d1764e9a" kindref="member">motorTemperatureLog</ref>,<sp/>&amp;<ref refid="_main_8h_1ae230e041b8d09151f97b07151fdaf38c" kindref="member">motorControllerTemperatureLog</ref>,<sp/>&amp;<ref refid="_main_8h_1a4ca34bc3c27d808ebe3480bfed4b997a" kindref="member">motorControllerVoltageLog</ref>,<sp/>&amp;<ref refid="_main_8h_1a3ed95fd1ffa6f914d3bb19bbb59d2cd0" kindref="member">motorCurrentLog</ref>,<sp/>&amp;<ref refid="_main_8h_1a60f914a71f12f33ed914208fbf5be838" kindref="member">rpmLog</ref>,<sp/>&amp;<ref refid="_main_8h_1a8941dbd7f821806a7a6f4eb705b1472b" kindref="member">thermistorLog</ref>,<sp/>&amp;<ref refid="_main_8h_1ade498aeeb82732f18af609faa0b323cb" kindref="member">bmsVoltageLog</ref>};</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="_main_8h_1a61d9ef65d75b66821896182b133b31de" refkind="member"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a61d9ef65d75b66821896182b133b31de" kindref="member">timer</ref><sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="204" refid="_main_8h_1a40646f0d9308996b7d391cb8e0d95905" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a40646f0d9308996b7d391cb8e0d95905" kindref="member">cycleCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="_main_8h_1ad817dda0a86c980182765da5a3cafec8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1ad817dda0a86c980182765da5a3cafec8" kindref="member">lowerUpperCells</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="207" refid="_main_8h_1a548fbf99c23fe3ef17f2e1a7b0992070" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a548fbf99c23fe3ef17f2e1a7b0992070" kindref="member">ms</ref><sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="208" refid="_main_8h_1acdca7f14bb24f1cb2aa9d0be982560b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1acdca7f14bb24f1cb2aa9d0be982560b2" kindref="member">sdStarted</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="_main_8h_1a76c0525d646735793add25b18043e600" refkind="member"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">SemaphoreHandle_t</ref><sp/><ref refid="_main_8h_1a76c0525d646735793add25b18043e600" kindref="member">spi_mutex</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a4fc01d736fe50cf5b977f755b675f11d" kindref="member">setup</ref>();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a31d554847ae8fdeaba2460e0395cb75f" kindref="member">setupPins</ref>();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a128d10ba9e06eb69d1dfc91ffef935ba" kindref="member">initializeDisplayStructs</ref>();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a797cf3c70ce7ae02bba9bfd3f6d886de" kindref="member">initializeLogStructs</ref>();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1ab91267714bdf99d7b3d177f95f484157" kindref="member">initializeCANStructs</ref>();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a32469c898d757b2b30c00d0546f91802" kindref="member">initializePreChargeStruct</ref>();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1aafd615bc53c2f27720d792a6a2968209" kindref="member">get_SPI_control</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a548fbf99c23fe3ef17f2e1a7b0992070" kindref="member">ms</ref>);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a966fda2bc617e020cb78f814bb5514c1" kindref="member">release_SPI_control</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal">time_t<sp/><ref refid="_main_8h_1a3e0781915a9e0f2045e892efe59f9fdc" kindref="member">getTeensy3Time</ref>();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1a0d7297755c0775a9b0e4f7eeeafd7c7e" kindref="member">idleTask</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*taskData);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_main_8h_1afe461d27b9c48d5921c00d521181f12f" kindref="member">loop</ref>();</highlight></codeline>
    </programlisting>
    <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h"/>
  </compounddef>
</doxygen>
