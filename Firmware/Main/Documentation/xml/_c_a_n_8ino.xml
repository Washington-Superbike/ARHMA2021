<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_c_a_n_8ino" kind="file" language="C++">
    <compoundname>CAN.ino</compoundname>
    <includes refid="_c_a_n_8h" local="yes">CAN.h</includes>
    <includes refid="_free_r_t_o_s___t_e_e_n_s_y4_8h" local="yes">FreeRTOS_TEENSY4.h</includes>
    <incdepgraph>
      <node id="6">
        <label>Adafruit_GFX.h</label>
      </node>
      <node id="5">
        <label>Adafruit_ILI9341.h</label>
      </node>
      <node id="2">
        <label>CAN.h</label>
        <link refid="_c_a_n_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>CAN.ino</label>
        <link refid="_c_a_n_8ino"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Display.h</label>
        <link refid="_display_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>FreeRTOS_TEENSY4.h</label>
        <link refid="_free_r_t_o_s___t_e_e_n_s_y4_8h"/>
      </node>
      <node id="3">
        <label>FlexCAN_T4.h</label>
      </node>
      <node id="7">
        <label>SPI.h</label>
      </node>
      <node id="8">
        <label>XPT2046_Touchscreen.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_c_a_n_8ino_1a785e095da30ce4993a186804102bf2ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void canTask</definition>
        <argsstring>(void *canData)</argsstring>
        <name>canTask</name>
        <param>
          <type>void *</type>
          <declname>canData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>First <ref refid="_c_a_n_8h_1a785e095da30ce4993a186804102bf2ea" kindref="member">canTask()</ref> checks for new incoming messages</para>
<para>NOTE: CAN breaks if we try sending messages with 0 other nodes on the bus as there is no node to &apos;ACK&apos; our message. Therefore, change CAN_NODES in <ref refid="_main_8h" kindref="compound">Main.h</ref> to make sure things dont break.</para>
<para>Ask for other half of cell voltages from BMS every 2 seconds</para>
        </inbodydescription>
        <location file="CAN.ino" line="31" column="6" bodyfile="CAN.ino" bodystart="31" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8ino_1a833ae6516ecb5cb3f8a7bd5adbf2bd9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setupCAN</definition>
        <argsstring>()</argsstring>
        <name>setupCAN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CAN.ino" line="55" column="6" bodyfile="CAN.ino" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8ino_1acc8ad6a9a2388c904e5c2a81e263c59d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void decipherEVCCStats</definition>
        <argsstring>(CAN_message_t msg, ChargeControllerStats evccStats)</argsstring>
        <name>decipherEVCCStats</name>
        <param>
          <type>CAN_message_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="struct_charge_controller_stats" kindref="compound">ChargeControllerStats</ref></type>
          <declname>evccStats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CAN.ino" line="60" column="6" bodyfile="CAN.ino" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8ino_1a3e5ce0cee4895bc07047a515ac2fa8ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void decipherChargerStats</definition>
        <argsstring>(CAN_message_t msg, ChargerStats chargerStats)</argsstring>
        <name>decipherChargerStats</name>
        <param>
          <type>CAN_message_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="struct_charger_stats" kindref="compound">ChargerStats</ref></type>
          <declname>chargerStats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CAN.ino" line="66" column="6" bodyfile="CAN.ino" bodystart="66" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8ino_1abd98b0e43fb7330bf8964d8da390810f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void decodeMotorStats</definition>
        <argsstring>(CAN_message_t msg, MotorStats motorStats)</argsstring>
        <name>decodeMotorStats</name>
        <param>
          <type>CAN_message_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="struct_motor_stats" kindref="compound">MotorStats</ref></type>
          <declname>motorStats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CAN.ino" line="74" column="6" bodyfile="CAN.ino" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8ino_1a950c51dd93e1585b49156c52113ab832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void decodeMotorTemps</definition>
        <argsstring>(CAN_message_t msg, MotorTemps motorTemps)</argsstring>
        <name>decodeMotorTemps</name>
        <param>
          <type>CAN_message_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="struct_motor_temps" kindref="compound">MotorTemps</ref></type>
          <declname>motorTemps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CAN.ino" line="81" column="6" bodyfile="CAN.ino" bodystart="81" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8ino_1ac7f58797b08a603835f0488b5fe3fb7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void decipherBMSStatus</definition>
        <argsstring>(CAN_message_t msg, BMSStatus bmsStatus)</argsstring>
        <name>decipherBMSStatus</name>
        <param>
          <type>CAN_message_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="struct_b_m_s_status" kindref="compound">BMSStatus</ref></type>
          <declname>bmsStatus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CAN.ino" line="88" column="6" bodyfile="CAN.ino" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8ino_1ac7f0128ba5279b58ce4917ff6d80264e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void decipherCellsVoltage</definition>
        <argsstring>(CAN_message_t msg, CellVoltages cellVoltages)</argsstring>
        <name>decipherCellsVoltage</name>
        <param>
          <type>CAN_message_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="struct_cell_voltages" kindref="compound">CellVoltages</ref></type>
          <declname>cellVoltages</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CAN.ino" line="96" column="6" bodyfile="CAN.ino" bodystart="96" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8ino_1a11cd027f4ad6ca2a6b9a860a07fb8e41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void decipherThermistors</definition>
        <argsstring>(CAN_message_t msg, ThermistorTemps thermistorTemps)</argsstring>
        <name>decipherThermistors</name>
        <param>
          <type>CAN_message_t</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="struct_thermistor_temps" kindref="compound">ThermistorTemps</ref></type>
          <declname>thermistorTemps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CAN.ino" line="123" column="6" bodyfile="CAN.ino" bodystart="123" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8ino_1afd1fb5329197c4478969008e0ee42f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void calculateSeriesVoltage</definition>
        <argsstring>(CellVoltages cellVs)</argsstring>
        <name>calculateSeriesVoltage</name>
        <param>
          <type><ref refid="struct_cell_voltages" kindref="compound">CellVoltages</ref></type>
          <declname>cellVs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CAN.ino" line="135" column="6" bodyfile="CAN.ino" bodystart="135" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8ino_1ab92f5f7e74cba4411e9f1c6f32a720a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void checkCAN</definition>
        <argsstring>(CANTaskData canData)</argsstring>
        <name>checkCAN</name>
        <param>
          <type><ref refid="struct_c_a_n_task_data" kindref="compound">CANTaskData</ref></type>
          <declname>canData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CAN.ino" line="145" column="6" bodyfile="CAN.ino" bodystart="145" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8ino_1a317708f05ea5de4b748e27c49e2a85e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printBMSStatus</definition>
        <argsstring>()</argsstring>
        <name>printBMSStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CAN.ino" line="190" column="6" bodyfile="CAN.ino" bodystart="190" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8ino_1ad899aaa07def0c8757bea6e9a75f878d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printMessage</definition>
        <argsstring>(CAN_message_t msg)</argsstring>
        <name>printMessage</name>
        <param>
          <type>CAN_message_t</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CAN.ino" line="224" column="6" bodyfile="CAN.ino" bodystart="224" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8ino_1a0953b2f37f0e637d3f5fba2148109d2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void requestCellVoltages</definition>
        <argsstring>(int LTC)</argsstring>
        <name>requestCellVoltages</name>
        <param>
          <type>int</type>
          <declname>LTC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CAN.ino" line="234" column="6" bodyfile="CAN.ino" bodystart="234" bodyend="242"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="_c_a_n_8ino" kindref="compound">CAN.ino</ref> file operates the CAN bus for the bike&apos;s firmware. This updates all the variables in the <ref refid="_c_a_n_8h" kindref="compound">CAN.h</ref> file using the various helper methods. Really simple. Just reads in the message using the CAN bus and then updates them according to the values derived from the datasheets. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Washington Superbike </para>
</simplesect>
<simplesect kind="date"><para>1-March-2023 </para>
</simplesect>
<simplesect kind="note"><para>Dont mess with this too much. It&apos;s great.</para>
</simplesect>
<xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Change the &quot;if CAN_NODES != 0&quot; to be an ifndef statement in the start. That means the checkCAN and requestCellVoltages lines will not execute unless CAN_NODES is a non-zero number in <ref refid="_main_8h" kindref="compound">Main.h</ref> before compiling. <linebreak/>
 <linebreak/>
 Potentially, check if the data is actually being updated by HIL. There is no real instantiation of associating the CAN variables with the messages being read in in the <ref refid="_c_a_n_8ino_1a785e095da30ce4993a186804102bf2ea" kindref="member">canTask()</ref>, so maybe call on those methods to read in those values, in case it doesnt work. <linebreak/>
 <linebreak/>
 Goal 3. <linebreak/>
 <linebreak/>
 Final Goal. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_c_a_n_8h" kindref="compound">CAN.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_free_r_t_o_s___t_e_e_n_s_y4_8h" kindref="compound">FreeRTOS_TEENSY4.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="_c_a_n_8h_1a785e095da30ce4993a186804102bf2ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1a785e095da30ce4993a186804102bf2ea" kindref="member">canTask</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*canData)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>requestCells<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="36"></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_main_8h_1a9d09068130671d9ca6bf3c9b6fac6e34" kindref="member">CAN_NODES</ref><sp/>!=0)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1ab92f5f7e74cba4411e9f1c6f32a720a5" kindref="member">checkCAN</ref>(*(<ref refid="struct_c_a_n_task_data" kindref="compound">CANTaskData</ref><sp/>*)canData);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/>(1000<sp/>/<sp/>20)<sp/>*<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1a0953b2f37f0e637d3f5fba2148109d2a" kindref="member">requestCellVoltages</ref>(requestCells);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requestCells<sp/>*=<sp/>-1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter++;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delay<sp/>20ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aa154068cecd7f31446a7a84af44ab1a3" kindref="member">vTaskDelay</ref>((20<sp/>*<sp/><ref refid="_free_r_t_o_s_config__default_8h_1a2f0258dd1e3b877e5bc013be54c2db6a" kindref="member">configTICK_RATE_HZ</ref>)<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="_c_a_n_8h_1a833ae6516ecb5cb3f8a7bd5adbf2bd9b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1a833ae6516ecb5cb3f8a7bd5adbf2bd9b" kindref="member">setupCAN</ref>()<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="_c_a_n_8h_1aa4303f5a4b2f41108b988f850270b2d1" kindref="member">CAN_bus</ref>.begin();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="_c_a_n_8h_1aa4303f5a4b2f41108b988f850270b2d1" kindref="member">CAN_bus</ref>.setBaudRate(250000);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="_c_a_n_8h_1acc8ad6a9a2388c904e5c2a81e263c59d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1acc8ad6a9a2388c904e5c2a81e263c59d" kindref="member">decipherEVCCStats</ref>(CAN_message_t<sp/>msg,<sp/><ref refid="struct_charge_controller_stats" kindref="compound">ChargeControllerStats</ref><sp/>evccStats)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>*(evccStats.<ref refid="struct_charge_controller_stats_1a16a3123ac01bcd73faa3a97e6ec4a774" kindref="member">en</ref>)<sp/>=<sp/>(msg.buf[0]);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>*(evccStats.<ref refid="struct_charge_controller_stats_1a928012799250fc25ea8510f4b5a3f873" kindref="member">chargeVoltage</ref>)<sp/>=<sp/>((msg.buf[2]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>msg.buf[1])<sp/>/<sp/>10.0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>*(evccStats.<ref refid="struct_charge_controller_stats_1ae130510a45203d35d88f44253b5837cb" kindref="member">chargeCurrent</ref>)<sp/>=<sp/>(3200<sp/>-<sp/>((msg.buf[4]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>msg.buf[3]))<sp/>/<sp/>10.0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="_c_a_n_8h_1a3e5ce0cee4895bc07047a515ac2fa8ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1a3e5ce0cee4895bc07047a515ac2fa8ea" kindref="member">decipherChargerStats</ref>(CAN_message_t<sp/>msg,<sp/><ref refid="struct_charger_stats" kindref="compound">ChargerStats</ref><sp/><ref refid="_main_8h_1aa249f1d073086c27682168bbd7dc77ee" kindref="member">chargerStats</ref>)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1aa249f1d073086c27682168bbd7dc77ee" kindref="member">chargerStats</ref>.<ref refid="struct_charger_stats_1ace07d9acd921d4f06f44ff347591d32b" kindref="member">statusFlag</ref>)<sp/>=<sp/>msg.buf[0];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1aa249f1d073086c27682168bbd7dc77ee" kindref="member">chargerStats</ref>.<ref refid="struct_charger_stats_1a35334daccd006a7cdbb635e1ac8bed14" kindref="member">chargeFlag</ref>)<sp/>=<sp/>msg.buf[1];</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1aa249f1d073086c27682168bbd7dc77ee" kindref="member">chargerStats</ref>.<ref refid="struct_charger_stats_1aae5124f4063e787f9d7b838235f66d79" kindref="member">outputVoltage</ref>)<sp/>=<sp/>((msg.buf[3]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>msg.buf[2])<sp/>/<sp/>10.0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1aa249f1d073086c27682168bbd7dc77ee" kindref="member">chargerStats</ref>.<ref refid="struct_charger_stats_1a0bafa595413f23895c8e4c55a64da3aa" kindref="member">outputCurrent</ref>)<sp/>=<sp/>(3200<sp/>-<sp/>((msg.buf[5]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>msg.buf[4]))<sp/>/<sp/>10.0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1aa249f1d073086c27682168bbd7dc77ee" kindref="member">chargerStats</ref>.<ref refid="struct_charger_stats_1a404624494d0facf36c3928f337eb4e87" kindref="member">chargerTemp</ref>)<sp/>=<sp/>msg.buf[6]<sp/>-<sp/>40;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="_c_a_n_8h_1abd98b0e43fb7330bf8964d8da390810f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1abd98b0e43fb7330bf8964d8da390810f" kindref="member">decodeMotorStats</ref>(CAN_message_t<sp/>msg,<sp/><ref refid="struct_motor_stats" kindref="compound">MotorStats</ref><sp/><ref refid="_main_8h_1a9eeb128a9907154869e9ffa78e065039" kindref="member">motorStats</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1a9eeb128a9907154869e9ffa78e065039" kindref="member">motorStats</ref>.<ref refid="struct_motor_stats_1a7e3450d33d8be341dea374a2fcafd257" kindref="member">RPM</ref>)<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>((msg.buf[1]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>msg.buf[0]);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1a9eeb128a9907154869e9ffa78e065039" kindref="member">motorStats</ref>.<ref refid="struct_motor_stats_1ab207f3db0daa47cabc8644495bca6d4e" kindref="member">motorCurrent</ref>)<sp/>=<sp/>((msg.buf[3]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>msg.buf[2])<sp/>/<sp/>10.0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1a9eeb128a9907154869e9ffa78e065039" kindref="member">motorStats</ref>.<ref refid="struct_motor_stats_1acf61562c6e2b1fdcdb548a04bff1f0aa" kindref="member">motorControllerBatteryVoltage</ref>)<sp/>=<sp/>((msg.buf[5]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>msg.buf[4])<sp/>/<sp/>10.0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1a9eeb128a9907154869e9ffa78e065039" kindref="member">motorStats</ref>.<ref refid="struct_motor_stats_1af51eb591d7b6b57838499e55d5f2828b" kindref="member">errorMessage</ref>)<sp/>=<sp/>((msg.buf[7]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>msg.buf[6]);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="_c_a_n_8h_1a950c51dd93e1585b49156c52113ab832" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1a950c51dd93e1585b49156c52113ab832" kindref="member">decodeMotorTemps</ref>(CAN_message_t<sp/>msg,<sp/><ref refid="struct_motor_temps" kindref="compound">MotorTemps</ref><sp/><ref refid="_main_8h_1abb61c6dc61d12b31aad7bdadd495b70a" kindref="member">motorTemps</ref>)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1abb61c6dc61d12b31aad7bdadd495b70a" kindref="member">motorTemps</ref>.<ref refid="struct_motor_temps_1acd9280e84ed18ff75d285e1377c01443" kindref="member">throttle</ref>)<sp/>=<sp/>msg.buf[0]<sp/>/<sp/>255.0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1abb61c6dc61d12b31aad7bdadd495b70a" kindref="member">motorTemps</ref>.<ref refid="struct_motor_temps_1a1c8b1bb77f968573fe2d1af0a0815d35" kindref="member">motorControllerTemperature</ref>)<sp/>=<sp/>msg.buf[1]<sp/>-<sp/>40;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1abb61c6dc61d12b31aad7bdadd495b70a" kindref="member">motorTemps</ref>.<ref refid="struct_motor_temps_1ad9864aa48ce76c5965919c459cc6e9b7" kindref="member">motorTemperature</ref>)<sp/>=<sp/>msg.buf[2]<sp/>-<sp/>30;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1abb61c6dc61d12b31aad7bdadd495b70a" kindref="member">motorTemps</ref>.<ref refid="struct_motor_temps_1aeb45f993f33820d44f9f4d1f02cf0f13" kindref="member">controllerStatus</ref>)<sp/>=<sp/>msg.buf[4];</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="_c_a_n_8h_1ac7f58797b08a603835f0488b5fe3fb7c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1ac7f58797b08a603835f0488b5fe3fb7c" kindref="member">decipherBMSStatus</ref>(CAN_message_t<sp/>msg,<sp/><ref refid="struct_b_m_s_status" kindref="compound">BMSStatus</ref><sp/><ref refid="_main_8h_1ae0522609134711f92c96ffa8ed05e582" kindref="member">bmsStatus</ref>)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1ae0522609134711f92c96ffa8ed05e582" kindref="member">bmsStatus</ref>.<ref refid="struct_b_m_s_status_1acab09ac12be3be24bce0abc90862dacd" kindref="member">bms_status_flag</ref>)<sp/>=<sp/>msg.buf[0];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1ae0522609134711f92c96ffa8ed05e582" kindref="member">bmsStatus</ref>.<ref refid="struct_b_m_s_status_1a02b6f2e9d6f9655e47184007195c7265" kindref="member">bms_c_id</ref>)<sp/>=<sp/>msg.buf[1];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1ae0522609134711f92c96ffa8ed05e582" kindref="member">bmsStatus</ref>.<ref refid="struct_b_m_s_status_1a8b316c1509dc351897db5b5726026e3e" kindref="member">bms_c_fault</ref>)<sp/>=<sp/>msg.buf[2];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1ae0522609134711f92c96ffa8ed05e582" kindref="member">bmsStatus</ref>.<ref refid="struct_b_m_s_status_1a53663d5549fc358f1f06927c9b2c3676" kindref="member">ltc_fault</ref>)<sp/>=<sp/>msg.buf[3];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>*(<ref refid="_main_8h_1ae0522609134711f92c96ffa8ed05e582" kindref="member">bmsStatus</ref>.<ref refid="struct_b_m_s_status_1aafe89416c934c33489db12fdce4d6f6e" kindref="member">ltc_count</ref>)<sp/>=<sp/>msg.buf[4];</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="_c_a_n_8h_1ac7f0128ba5279b58ce4917ff6d80264e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1ac7f0128ba5279b58ce4917ff6d80264e" kindref="member">decipherCellsVoltage</ref>(CAN_message_t<sp/>msg,<sp/><ref refid="struct_cell_voltages" kindref="compound">CellVoltages</ref><sp/><ref refid="_main_8h_1afca6798677cebeeb7599ea00e1e243dd" kindref="member">cellVoltages</ref>)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>THE<sp/>FOLLOWING<sp/>DATATYPE<sp/>NEEDS<sp/>TO<sp/>BE<sp/>CHANGED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>uint32_t<sp/>msgID<sp/>=<sp/>msg.id;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalOffset<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>totalOffset<sp/>equals<sp/>the<sp/>index<sp/>of<sp/>array<sp/>cellVoltages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cellOffset<sp/>=<sp/>(((msgID<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xF)<sp/>-<sp/>0x9);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ltcOffset<sp/>=<sp/>(msgID<sp/>&amp;<sp/>0x1);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>totalOffset<sp/>=<sp/>(cellOffset<sp/>*<sp/>4)<sp/>+<sp/>(ltcOffset<sp/>*<sp/>12);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cellIndex;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cellIndex<sp/>=<sp/>0;<sp/>cellIndex<sp/>&lt;<sp/>8;<sp/>cellIndex<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>analyze<sp/>this<sp/>line<sp/>and<sp/>find<sp/>a<sp/>better<sp/>way<sp/>to<sp/>do<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>*(<ref refid="_main_8h_1afca6798677cebeeb7599ea00e1e243dd" kindref="member">cellVoltages</ref>.<ref refid="struct_cell_voltages_1a6af0d6a1dbf317365e4fa56be6c595fc" kindref="member">cellVoltages</ref><sp/>+<sp/>(cellIndex<sp/>/<sp/>2<sp/>+<sp/>totalOffset))<sp/>=<sp/>((((float)(msg.buf[cellIndex<sp/>+<sp/>1]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(float)(msg.buf[cellIndex])<sp/>/<sp/>10000))<sp/>/<sp/>10000)<sp/>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1af798cac38f8c00111b4be880f47d8020" kindref="member">cellVoltagesReady</ref>[cellIndex<sp/>/<sp/>2<sp/>+<sp/>totalOffset]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="_c_a_n_8ino_1afd1fb5329197c4478969008e0ee42f90" kindref="member">calculateSeriesVoltage</ref>(<ref refid="_main_8h_1afca6798677cebeeb7599ea00e1e243dd" kindref="member">cellVoltages</ref>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*<ref refid="_main_8h_1afca6798677cebeeb7599ea00e1e243dd" kindref="member">cellVoltages</ref>.<ref refid="struct_cell_voltages_1a844b5b2d0bd58e1147076ab8aacc420a" kindref="member">ready</ref>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="_c_a_n_8h_1aedb50849ed846717c3096b10fb75d537" kindref="member">BMS_CELLS</ref>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_a_n_8h_1af798cac38f8c00111b4be880f47d8020" kindref="member">cellVoltagesReady</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="_main_8h_1afca6798677cebeeb7599ea00e1e243dd" kindref="member">cellVoltages</ref>.<ref refid="struct_cell_voltages_1a844b5b2d0bd58e1147076ab8aacc420a" kindref="member">ready</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="_c_a_n_8h_1a11cd027f4ad6ca2a6b9a860a07fb8e41" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1a11cd027f4ad6ca2a6b9a860a07fb8e41" kindref="member">decipherThermistors</ref>(CAN_message_t<sp/>msg,<sp/><ref refid="struct_thermistor_temps" kindref="compound">ThermistorTemps</ref><sp/><ref refid="_main_8h_1a18571448b101f12a60457d717dc4f953" kindref="member">thermistorTemps</ref>)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>ltcID<sp/>=<sp/>msg.buf[0];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="_main_8h_1aefa2152d1586505d2d271edc7e9c4187" kindref="member">thermistorEnabled</ref><sp/>=<sp/>msg.buf[1];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="_main_8h_1ad2bc733f382fc4bf0379382e3a15a94e" kindref="member">thermistorPresent</ref><sp/>=<sp/>msg.buf[2];</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>*currentThermistor<sp/>=<sp/>&amp;msg.buf[3];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thermistor;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(thermistor<sp/>=<sp/>0;<sp/>thermistor<sp/>&lt;<sp/>5;<sp/>thermistor++)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_main_8h_1a18571448b101f12a60457d717dc4f953" kindref="member">thermistorTemps</ref>.<ref refid="struct_thermistor_temps_1a586a85cf3b40e573c835319024d7eb5b" kindref="member">temps</ref>[thermistor<sp/>+<sp/>5<sp/>*<sp/>ltcID]<sp/>=<sp/>currentThermistor[thermistor];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sums<sp/>the<sp/>voltage<sp/>of<sp/>each<sp/>cell<sp/>in<sp/>main<sp/>accumulator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="_c_a_n_8h_1afd1fb5329197c4478969008e0ee42f90" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1afd1fb5329197c4478969008e0ee42f90" kindref="member">calculateSeriesVoltage</ref>(<ref refid="struct_cell_voltages" kindref="compound">CellVoltages</ref><sp/>cellVs)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>partialSeriesVoltage<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentCell;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(currentCell<sp/>=<sp/>0;<sp/>currentCell<sp/>&lt;<sp/><ref refid="_c_a_n_8h_1aedb50849ed846717c3096b10fb75d537" kindref="member">BMS_CELLS</ref>;<sp/>currentCell++)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>partialSeriesVoltage<sp/>+=<sp/>*(cellVs.<ref refid="struct_cell_voltages_1a6af0d6a1dbf317365e4fa56be6c595fc" kindref="member">cellVoltages</ref><sp/>+<sp/>currentCell);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>*cellVs.<ref refid="struct_cell_voltages_1a739cccc4cfe6c366e7474ae1c71097bf" kindref="member">seriesVoltage</ref><sp/>=<sp/>partialSeriesVoltage;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>checks<sp/>the<sp/>can<sp/>bus<sp/>for<sp/>any<sp/>new<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="_c_a_n_8h_1ab92f5f7e74cba4411e9f1c6f32a720a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1ab92f5f7e74cba4411e9f1c6f32a720a5" kindref="member">checkCAN</ref>(<ref refid="struct_c_a_n_task_data" kindref="compound">CANTaskData</ref><sp/>canData)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readValue<sp/>=<sp/><ref refid="_c_a_n_8h_1aa4303f5a4b2f41108b988f850270b2d1" kindref="member">CAN_bus</ref>.read(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(readValue<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>read<sp/>a<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>.id)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1a1b593ffe62c4590fa197331661393984" kindref="member">MOTOR_STATS_MSG</ref>:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1abd98b0e43fb7330bf8964d8da390810f" kindref="member">decodeMotorStats</ref>(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>,<sp/>canData.<ref refid="struct_c_a_n_task_data_1a47d2113927a00ff554160b7fabfc6471" kindref="member">motorStats</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1a464be4036d5c85f472f461fc987eb2da" kindref="member">MOTOR_TEMPS_MSG</ref>:</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1a950c51dd93e1585b49156c52113ab832" kindref="member">decodeMotorTemps</ref>(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>,<sp/>canData.<ref refid="struct_c_a_n_task_data_1a28c4ff53f540fa92e730acfd0def5d88" kindref="member">motorTemps</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1a44d631b0f4e7e294bc26dd9c77d3dcb9" kindref="member">DD_BMS_STATUS_IND</ref>:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1ac7f58797b08a603835f0488b5fe3fb7c" kindref="member">decipherBMSStatus</ref>(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>,<sp/>canData.<ref refid="struct_c_a_n_task_data_1a02b8e7f2fddd541dfd7b42efb7a1bbf3" kindref="member">bmsStatus</ref>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printBMSStatus();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1ac7e658bcd09f49f37c7732ddc1c80fe2" kindref="member">EVCC_STATS</ref>:</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1acc8ad6a9a2388c904e5c2a81e263c59d" kindref="member">decipherEVCCStats</ref>(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>,<sp/>canData.<ref refid="struct_c_a_n_task_data_1a541dfccdee9cf36b2252abfffbbdda41" kindref="member">chargeControllerStats</ref>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1aaa765e2d2381f199ed620b8d6962f60d" kindref="member">CHARGER_STATS</ref>:</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1a3e5ce0cee4895bc07047a515ac2fa8ea" kindref="member">decipherChargerStats</ref>(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>,<sp/>canData.<ref refid="struct_c_a_n_task_data_1a173c0fd4a49d1c2c1d01225b28d04f19" kindref="member">chargerStats</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1a366031af35039c965b2bb3ac07dd702a" kindref="member">BMSC1_LTC1_CELLS_04</ref>:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1ac7f0128ba5279b58ce4917ff6d80264e" kindref="member">decipherCellsVoltage</ref>(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>,<sp/><sp/>canData.<ref refid="struct_c_a_n_task_data_1a3d198d3fdb7daa5117a01954825e30ad" kindref="member">cellVoltages</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1a2da14593c5f2bdd4bc417f9e66bc2a75" kindref="member">BMSC1_LTC1_CELLS_58</ref>:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1ac7f0128ba5279b58ce4917ff6d80264e" kindref="member">decipherCellsVoltage</ref>(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>,<sp/><sp/>canData.<ref refid="struct_c_a_n_task_data_1a3d198d3fdb7daa5117a01954825e30ad" kindref="member">cellVoltages</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1ac1908e8612424d72ae778e43759f077f" kindref="member">BMSC1_LTC1_CELLS_912</ref>:</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1ac7f0128ba5279b58ce4917ff6d80264e" kindref="member">decipherCellsVoltage</ref>(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>,<sp/><sp/>canData.<ref refid="struct_c_a_n_task_data_1a3d198d3fdb7daa5117a01954825e30ad" kindref="member">cellVoltages</ref>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1a76c8bda430a00f369aed9309100c3107" kindref="member">BMSC1_LTC2_CELLS_04</ref>:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1ac7f0128ba5279b58ce4917ff6d80264e" kindref="member">decipherCellsVoltage</ref>(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>,<sp/><sp/>canData.<ref refid="struct_c_a_n_task_data_1a3d198d3fdb7daa5117a01954825e30ad" kindref="member">cellVoltages</ref>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1aa605748f6dfeb5f3ba7b8b473a2f41b5" kindref="member">BMSC1_LTC2_CELLS_58</ref>:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1ac7f0128ba5279b58ce4917ff6d80264e" kindref="member">decipherCellsVoltage</ref>(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>,<sp/><sp/>canData.<ref refid="struct_c_a_n_task_data_1a3d198d3fdb7daa5117a01954825e30ad" kindref="member">cellVoltages</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1af80d69aa4a06cbc8b1137773336f74ec" kindref="member">BMSC1_LTC2_CELLS_912</ref>:</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1ac7f0128ba5279b58ce4917ff6d80264e" kindref="member">decipherCellsVoltage</ref>(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>,<sp/><sp/>canData.<ref refid="struct_c_a_n_task_data_1a3d198d3fdb7daa5117a01954825e30ad" kindref="member">cellVoltages</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1a5a71b982a71be6bc19546f4c8fecadd7" kindref="member">DD_BMSC_TH_STATUS_IND</ref>:</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8ino_1a11cd027f4ad6ca2a6b9a860a07fb8e41" kindref="member">decipherThermistors</ref>(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>,<sp/>canData.<ref refid="struct_c_a_n_task_data_1a1f1f9a7c959359030e8ab98d5ecf6a57" kindref="member">thermistorTemps</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unused<sp/>currently<sp/>but<sp/>should<sp/>be<sp/>implemented<sp/>into<sp/>the<sp/>current<sp/>firmware</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="_c_a_n_8h_1a317708f05ea5de4b748e27c49e2a85e8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1a317708f05ea5de4b748e27c49e2a85e8" kindref="member">printBMSStatus</ref>()<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="_main_8h_1a04c234659b28f92e2eab7998b586bb4c" kindref="member">bms_status_flag</ref>)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;at<sp/>least<sp/>one<sp/>cell<sp/>V<sp/>is<sp/>&gt;<sp/>High<sp/>Voltage<sp/>Cutoff\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;at<sp/>least<sp/>one<sp/>cell<sp/>V<sp/>is<sp/>&lt;<sp/>Low<sp/>Voltage<sp/>Cutoff\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;at<sp/>least<sp/>one<sp/>cell<sp/>V<sp/>is<sp/>&gt;<sp/>Balance<sp/>Voltage<sp/>Cutoff\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;The<sp/>BMSC<sp/>ID<sp/>is<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="_main_8h_1a54619d6c6a00d3268f764c33bd352ebf" kindref="member">bms_c_id</ref>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="_main_8h_1a668e87eca74f2126136ee32a6964005e" kindref="member">bms_c_fault</ref>)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;BMS<sp/>Fault:<sp/>configuration<sp/>not<sp/>locked\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;BMS<sp/>Fault:<sp/>not<sp/>all<sp/>cells<sp/>present\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;BMS<sp/>Fault:<sp/>thermistor<sp/>overtemp\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;BMS<sp/>Fault:<sp/>not<sp/>all<sp/>thermistors<sp/>present\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_main_8h_1ae21e58b785392a0951862c107609d059" kindref="member">ltc_fault</ref><sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;LTC<sp/>fault<sp/>detected\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>LTCs<sp/>detected\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>print<sp/>the<sp/>contents<sp/>of<sp/>a<sp/>CAN<sp/>msg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="_c_a_n_8h_1ad899aaa07def0c8757bea6e9a75f878d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1ad899aaa07def0c8757bea6e9a75f878d" kindref="member">printMessage</ref>(CAN_message_t<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>msg.len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(msg.buf[i]);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>Serial.println();</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>only<sp/>be<sp/>called<sp/>if<sp/>there<sp/>is<sp/>at<sp/>least<sp/>one<sp/>other<sp/>CAN<sp/>node<sp/>on<sp/>the<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>none<sp/>are<sp/>on<sp/>the<sp/>bus<sp/>when<sp/>CAN_bus.write()<sp/>occurs,<sp/>the<sp/>Teensy<sp/>will<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="_c_a_n_8h_1a0953b2f37f0e637d3f5fba2148109d2a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8ino_1a0953b2f37f0e637d3f5fba2148109d2a" kindref="member">requestCellVoltages</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LTC)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LTC<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>.id<sp/>=<sp/>0x01de0800;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1aa4303f5a4b2f41108b988f850270b2d1" kindref="member">CAN_bus</ref>.write(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LTC<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>.id<sp/>=<sp/>0x01de0801;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1aa4303f5a4b2f41108b988f850270b2d1" kindref="member">CAN_bus</ref>.write(<ref refid="_c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed" kindref="member">CAN_msg</ref>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="CAN.ino"/>
  </compounddef>
</doxygen>
