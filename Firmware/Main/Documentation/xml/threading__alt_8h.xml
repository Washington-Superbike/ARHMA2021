<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="threading__alt_8h" kind="file" language="C++">
    <compoundname>threading_alt.h</compoundname>
    <includes refid="_free_r_t_o_s_8h" local="yes">FreeRTOS.h</includes>
    <includes refid="semphr_8h" local="yes">semphr.h</includes>
    <incdepgraph>
      <node id="7">
        <label>Arduino.h</label>
      </node>
      <node id="2">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>FreeRTOSConfig_default.h</label>
        <link refid="_free_r_t_o_s_config__default_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>deprecated_definitions.h</label>
        <link refid="deprecated__definitions_8h"/>
      </node>
      <node id="16">
        <label>list.h</label>
        <link refid="list_8h"/>
      </node>
      <node id="12">
        <label>mpu_wrappers.h</label>
        <link refid="mpu__wrappers_8h"/>
      </node>
      <node id="9">
        <label>portable.h</label>
        <link refid="portable_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>portmacro.h</label>
        <link refid="portmacro_8h"/>
      </node>
      <node id="8">
        <label>projdefs.h</label>
        <link refid="projdefs_8h"/>
      </node>
      <node id="14">
        <label>queue.h</label>
        <link refid="queue_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>semphr.h</label>
        <link refid="semphr_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/ponym/ARHMA2021/Firmware/Main/FreeRTOS/threading_alt.h</label>
        <link refid="threading__alt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmbedtls__threading__mutex__t" prot="public">mbedtls_threading_mutex_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="threading__alt_8h_1a827c7ec5b9ed1dfa35c77c0d3664de49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mbedtls_threading_set_alt</definition>
        <argsstring>(void(*mutex_init)(mbedtls_threading_mutex_t *), void(*mutex_free)(mbedtls_threading_mutex_t *), int(*mutex_lock)(mbedtls_threading_mutex_t *), int(*mutex_unlock)(mbedtls_threading_mutex_t *))</argsstring>
        <name>mbedtls_threading_set_alt</name>
        <param>
          <type>void(*)(<ref refid="structmbedtls__threading__mutex__t" kindref="compound">mbedtls_threading_mutex_t</ref> *)</type>
          <declname>mutex_init</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="structmbedtls__threading__mutex__t" kindref="compound">mbedtls_threading_mutex_t</ref> *)</type>
          <declname>mutex_free</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="structmbedtls__threading__mutex__t" kindref="compound">mbedtls_threading_mutex_t</ref> *)</type>
          <declname>mutex_lock</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="structmbedtls__threading__mutex__t" kindref="compound">mbedtls_threading_mutex_t</ref> *)</type>
          <declname>mutex_unlock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/FreeRTOS/threading_alt.h" line="14" column="13" declfile="C:/Users/ponym/ARHMA2021/Firmware/Main/FreeRTOS/threading_alt.h" declline="14" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__THREADING_ALT_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__THREADING_ALT_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_free_r_t_o_s_8h" kindref="compound">FreeRTOS.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="semphr_8h" kindref="compound">semphr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="structmbedtls__threading__mutex__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10" refid="structmbedtls__threading__mutex__t_1a65e31070213d56dca105a6727dce9ada" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">SemaphoreHandle_t</ref><sp/><ref refid="structmbedtls__threading__mutex__t_1a65e31070213d56dca105a6727dce9ada" kindref="member">mutex</ref>;</highlight></codeline>
<codeline lineno="11" refid="structmbedtls__threading__mutex__t_1abcb41b414dc71a45e5150ddeb3452b86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structmbedtls__threading__mutex__t_1abcb41b414dc71a45e5150ddeb3452b86" kindref="member">is_valid</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}<sp/><ref refid="structmbedtls__threading__mutex__t" kindref="compound">mbedtls_threading_mutex_t</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="threading__alt_8h_1a827c7ec5b9ed1dfa35c77c0d3664de49" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="threading__alt_8h_1a827c7ec5b9ed1dfa35c77c0d3664de49" kindref="member">mbedtls_threading_set_alt</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(<sp/>*<sp/>mutex_init<sp/>)(<sp/><ref refid="structmbedtls__threading__mutex__t" kindref="compound">mbedtls_threading_mutex_t</ref><sp/>*<sp/>),</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(<sp/>*<sp/>mutex_free<sp/>)(<sp/><ref refid="structmbedtls__threading__mutex__t" kindref="compound">mbedtls_threading_mutex_t</ref><sp/>*<sp/>),</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(<sp/>*<sp/>mutex_lock<sp/>)(<sp/><ref refid="structmbedtls__threading__mutex__t" kindref="compound">mbedtls_threading_mutex_t</ref><sp/>*<sp/>),</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(<sp/>*<sp/>mutex_unlock<sp/>)(<sp/><ref refid="structmbedtls__threading__mutex__t" kindref="compound">mbedtls_threading_mutex_t</ref><sp/>*<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ifndef<sp/>__THREADING_ALT_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/ponym/ARHMA2021/Firmware/Main/FreeRTOS/threading_alt.h"/>
  </compounddef>
</doxygen>
