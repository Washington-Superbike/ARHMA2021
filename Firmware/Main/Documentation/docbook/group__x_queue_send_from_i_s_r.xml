<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_queue_send_from_i_s_r" xml:lang="en-US">
<title>xQueueSendFromISR</title>
<indexterm><primary>xQueueSendFromISR</primary></indexterm>

<para>queue. h <literallayout>
BaseType_t <link linkend="_queue_8h_1af03b83396462affe9e28302660e7b9c6">xQueueSendToFrontFromISR(
                                     QueueHandle_t xQueue,
                                     const void *pvItemToQueue,
                                     BaseType_t *pxHigherPriorityTaskWoken
                                  )</link>;
</literallayout></para>

<para>This is a macro that calls <link linkend="_queue_8h_1a263711eb0124112e828a18fd4b8ab29d">xQueueGenericSendFromISR()</link>.</para>

<para>Post an item to the front of a queue. It is safe to use this macro from within an interrupt service routine.</para>

<para>Items are queued by copy not reference so it is preferable to only queue small items, especially when called from an ISR. In most cases it would be preferable to store a pointer to the item being queued.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xQueue</entry><entry>
<para>The handle to the queue on which the item is to be posted.</para>
</entry>
                            </row>
                            <row>
<entry>pvItemToQueue</entry><entry>
<para>A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.</para>
</entry>
                            </row>
                            <row>
<entry>pxHigherPriorityTaskWoken</entry><entry>
<para><link linkend="_queue_8h_1af03b83396462affe9e28302660e7b9c6">xQueueSendToFrontFromISR()</link> will set *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task to unblock, and the unblocked task has a priority higher than the currently running task. If xQueueSendToFromFromISR() sets this value to pdTRUE then a context switch should be requested before the interrupt is exited.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if the data was successfully sent to the queue, otherwise errQUEUE_FULL.</para>
</formalpara>
Example usage for buffered IO (where the ISR can obtain more than one value per call): <literallayout>
void vBufferISR( void )
{
char cIn;
BaseType_t xHigherPrioritTaskWoken;

   // We have not woken a task at the start of the ISR.
   xHigherPriorityTaskWoken = pdFALSE;

   // Loop until the buffer is empty.
   do
   {
    // Obtain a byte from the buffer.
    cIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );

    // Post the byte.
    <link linkend="_queue_8h_1af03b83396462affe9e28302660e7b9c6">xQueueSendToFrontFromISR( xRxQueue, &amp;cIn, &amp;xHigherPriorityTaskWoken )</link>;

   } while( portINPUT_BYTE( BUFFER_COUNT ) );

   // Now the buffer is empty we can switch context if necessary.
   if( xHigherPriorityTaskWoken )
   {
    taskYIELD ();
   }
}
</literallayout></para>

<para>queue. h <literallayout>
BaseType_t <link linkend="_queue_8h_1a51e9f73417b11441a181cdc4f33a68e9">xQueueSendToBackFromISR(
                                     QueueHandle_t xQueue,
                                     const void *pvItemToQueue,
                                     BaseType_t *pxHigherPriorityTaskWoken
                                  )</link>;
</literallayout></para>

<para>This is a macro that calls <link linkend="_queue_8h_1a263711eb0124112e828a18fd4b8ab29d">xQueueGenericSendFromISR()</link>.</para>

<para>Post an item to the back of a queue. It is safe to use this macro from within an interrupt service routine.</para>

<para>Items are queued by copy not reference so it is preferable to only queue small items, especially when called from an ISR. In most cases it would be preferable to store a pointer to the item being queued.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xQueue</entry><entry>
<para>The handle to the queue on which the item is to be posted.</para>
</entry>
                            </row>
                            <row>
<entry>pvItemToQueue</entry><entry>
<para>A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.</para>
</entry>
                            </row>
                            <row>
<entry>pxHigherPriorityTaskWoken</entry><entry>
<para><link linkend="_queue_8h_1a51e9f73417b11441a181cdc4f33a68e9">xQueueSendToBackFromISR()</link> will set *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task to unblock, and the unblocked task has a priority higher than the currently running task. If <link linkend="_queue_8h_1a51e9f73417b11441a181cdc4f33a68e9">xQueueSendToBackFromISR()</link> sets this value to pdTRUE then a context switch should be requested before the interrupt is exited.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if the data was successfully sent to the queue, otherwise errQUEUE_FULL.</para>
</formalpara>
Example usage for buffered IO (where the ISR can obtain more than one value per call): <literallayout>
void vBufferISR( void )
{
char cIn;
BaseType_t xHigherPriorityTaskWoken;

   // We have not woken a task at the start of the ISR.
   xHigherPriorityTaskWoken = pdFALSE;

   // Loop until the buffer is empty.
   do
   {
    // Obtain a byte from the buffer.
    cIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );

    // Post the byte.
    <link linkend="_queue_8h_1a51e9f73417b11441a181cdc4f33a68e9">xQueueSendToBackFromISR( xRxQueue, &amp;cIn, &amp;xHigherPriorityTaskWoken )</link>;

   } while( portINPUT_BYTE( BUFFER_COUNT ) );

   // Now the buffer is empty we can switch context if necessary.
   if( xHigherPriorityTaskWoken )
   {
    taskYIELD ();
   }
}
</literallayout></para>

<para>queue. h <literallayout>
BaseType_t <link linkend="_queue_8h_1a21d5919ed26c21d121df4a4debeb643c">xQueueSendFromISR(
                                 QueueHandle_t xQueue,
                                 const void *pvItemToQueue,
                                 BaseType_t *pxHigherPriorityTaskWoken
                            )</link>;
</literallayout></para>

<para>This is a macro that calls <link linkend="_queue_8h_1a263711eb0124112e828a18fd4b8ab29d">xQueueGenericSendFromISR()</link>. It is included for backward compatibility with versions of FreeRTOS.org that did not include the <link linkend="_queue_8h_1a51e9f73417b11441a181cdc4f33a68e9">xQueueSendToBackFromISR()</link> and <link linkend="_queue_8h_1af03b83396462affe9e28302660e7b9c6">xQueueSendToFrontFromISR()</link> macros.</para>

<para>Post an item to the back of a queue. It is safe to use this function from within an interrupt service routine.</para>

<para>Items are queued by copy not reference so it is preferable to only queue small items, especially when called from an ISR. In most cases it would be preferable to store a pointer to the item being queued.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xQueue</entry><entry>
<para>The handle to the queue on which the item is to be posted.</para>
</entry>
                            </row>
                            <row>
<entry>pvItemToQueue</entry><entry>
<para>A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.</para>
</entry>
                            </row>
                            <row>
<entry>pxHigherPriorityTaskWoken</entry><entry>
<para><link linkend="_queue_8h_1a21d5919ed26c21d121df4a4debeb643c">xQueueSendFromISR()</link> will set *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task to unblock, and the unblocked task has a priority higher than the currently running task. If <link linkend="_queue_8h_1a21d5919ed26c21d121df4a4debeb643c">xQueueSendFromISR()</link> sets this value to pdTRUE then a context switch should be requested before the interrupt is exited.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if the data was successfully sent to the queue, otherwise errQUEUE_FULL.</para>
</formalpara>
Example usage for buffered IO (where the ISR can obtain more than one value per call): <literallayout>
void vBufferISR( void )
{
char cIn;
BaseType_t xHigherPriorityTaskWoken;

   // We have not woken a task at the start of the ISR.
   xHigherPriorityTaskWoken = pdFALSE;

   // Loop until the buffer is empty.
   do
   {
    // Obtain a byte from the buffer.
    cIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );

    // Post the byte.
    <link linkend="_queue_8h_1a21d5919ed26c21d121df4a4debeb643c">xQueueSendFromISR( xRxQueue, &amp;cIn, &amp;xHigherPriorityTaskWoken )</link>;

   } while( portINPUT_BYTE( BUFFER_COUNT ) );

   // Now the buffer is empty we can switch context if necessary.
   if( xHigherPriorityTaskWoken )
   {
    // Actual macro used here is port specific.
    portYIELD_FROM_ISR ();
   }
}
</literallayout></para>

<para>queue. h <literallayout>
BaseType_t <link linkend="_queue_8h_1a263711eb0124112e828a18fd4b8ab29d">xQueueGenericSendFromISR(
                                       QueueHandle_t        xQueue,
                                       const    void    *pvItemToQueue,
                                       BaseType_t   *pxHigherPriorityTaskWoken,
                                       BaseType_t   xCopyPosition
                                   )</link>;
</literallayout></para>

<para>It is preferred that the macros <link linkend="_queue_8h_1a21d5919ed26c21d121df4a4debeb643c">xQueueSendFromISR()</link>, <link linkend="_queue_8h_1af03b83396462affe9e28302660e7b9c6">xQueueSendToFrontFromISR()</link> and <link linkend="_queue_8h_1a51e9f73417b11441a181cdc4f33a68e9">xQueueSendToBackFromISR()</link> be used in place of calling this function directly. <link linkend="_queue_8h_1ad14ae1174c2772cffc9e0c2c45dc55a6">xQueueGiveFromISR()</link> is an equivalent for use by semaphores that don&apos;t actually copy any data.</para>

<para>Post an item on a queue. It is safe to use this function from within an interrupt service routine.</para>

<para>Items are queued by copy not reference so it is preferable to only queue small items, especially when called from an ISR. In most cases it would be preferable to store a pointer to the item being queued.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xQueue</entry><entry>
<para>The handle to the queue on which the item is to be posted.</para>
</entry>
                            </row>
                            <row>
<entry>pvItemToQueue</entry><entry>
<para>A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.</para>
</entry>
                            </row>
                            <row>
<entry>pxHigherPriorityTaskWoken</entry><entry>
<para><link linkend="_queue_8h_1a263711eb0124112e828a18fd4b8ab29d">xQueueGenericSendFromISR()</link> will set *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task to unblock, and the unblocked task has a priority higher than the currently running task. If <link linkend="_queue_8h_1a263711eb0124112e828a18fd4b8ab29d">xQueueGenericSendFromISR()</link> sets this value to pdTRUE then a context switch should be requested before the interrupt is exited.</para>
</entry>
                            </row>
                            <row>
<entry>xCopyPosition</entry><entry>
<para>Can take the value queueSEND_TO_BACK to place the item at the back of the queue, or queueSEND_TO_FRONT to place the item at the front of the queue (for high priority messages).</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if the data was successfully sent to the queue, otherwise errQUEUE_FULL.</para>
</formalpara>
Example usage for buffered IO (where the ISR can obtain more than one value per call): <literallayout>
void vBufferISR( void )
{
char cIn;
BaseType_t xHigherPriorityTaskWokenByPost;

   // We have not woken a task at the start of the ISR.
   xHigherPriorityTaskWokenByPost = pdFALSE;

   // Loop until the buffer is empty.
   do
   {
    // Obtain a byte from the buffer.
    cIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );

    // Post each byte.
    xQueueGenericSendFromISR( xRxQueue, &amp;cIn, &amp;xHigherPriorityTaskWokenByPost, queueSEND_TO_BACK );

   } while( portINPUT_BYTE( BUFFER_COUNT ) );

   // Now the buffer is empty we can switch context if necessary.  Note that the
   // name of the yield function required is port specific.
   if( xHigherPriorityTaskWokenByPost )
   {
    taskYIELD_YIELD_FROM_ISR();
   }
}
</literallayout> </para>
</section>
