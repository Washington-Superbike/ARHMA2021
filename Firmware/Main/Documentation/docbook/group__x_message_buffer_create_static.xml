<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_message_buffer_create_static" xml:lang="en-US">
<title>xMessageBufferCreateStatic</title>
<indexterm><primary>xMessageBufferCreateStatic</primary></indexterm>

<para><link linkend="_message__buffer_8h">message_buffer.h</link></para>

<para><literallayout>
MessageBufferHandle_t <link linkend="_message__buffer_8h_1acc84f4a15dbd39ecbad35f7337e78b2c">xMessageBufferCreateStatic( size_t xBufferSizeBytes,
                                                  uint8_t *pucMessageBufferStorageArea,
                                                  StaticMessageBuffer_t *pxStaticMessageBuffer )</link>;
</literallayout> Creates a new message buffer using statically allocated memory. See <link linkend="_message__buffer_8h_1a2959cd0e3d2bd20d46908e5c9872be36">xMessageBufferCreate()</link> for a version that uses dynamically allocated memory.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xBufferSizeBytes</entry><entry>
<para>The size, in bytes, of the buffer pointed to by the pucMessageBufferStorageArea parameter. When a message is written to the message buffer an additional sizeof( size_t ) bytes are also written to store the message&apos;s length. sizeof( size_t ) is typically 4 bytes on a 32-bit architecture, so on most 32-bit architecture a 10 byte message will take up 14 bytes of message buffer space. The maximum number of bytes that can be stored in the message buffer is actually (xBufferSizeBytes - 1).</para>
</entry>
                            </row>
                            <row>
<entry>pucMessageBufferStorageArea</entry><entry>
<para>Must point to a uint8_t array that is at least xBufferSizeBytes + 1 big. This is the array to which messages are copied when they are written to the message buffer.</para>
</entry>
                            </row>
                            <row>
<entry>pxStaticMessageBuffer</entry><entry>
<para>Must point to a variable of type StaticMessageBuffer_t, which will be used to hold the message buffer&apos;s data structure.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>If the message buffer is created successfully then a handle to the created message buffer is returned. If either pucMessageBufferStorageArea or pxStaticmessageBuffer are NULL then NULL is returned.</para>
</formalpara>
Example use: <literallayout>

// Used to dimension the array used to hold the messages.  The available space
// will actually be one less than this, so 999.
#define STORAGE_SIZE_BYTES 1000

// Defines the memory that will actually hold the messages within the message
// buffer.
static uint8_t ucStorageBuffer[ STORAGE_SIZE_BYTES ];

// The variable used to hold the message buffer structure.
StaticMessageBuffer_t xMessageBufferStruct;

void MyFunction( void )
{
MessageBufferHandle_t xMessageBuffer;

    xMessageBuffer = <link linkend="_message__buffer_8h_1acc84f4a15dbd39ecbad35f7337e78b2c">xMessageBufferCreateStatic( sizeof( ucBufferStorage ),
                                                 ucBufferStorage,
                                                 &amp;xMessageBufferStruct )</link>;

    // As neither the pucMessageBufferStorageArea or pxStaticMessageBuffer
    // parameters were NULL, xMessageBuffer will not be NULL, and can be used to
    // reference the created message buffer in other message buffer API calls.

    // Other code that uses the message buffer can go here.
}

</literallayout> </para>
</section>
