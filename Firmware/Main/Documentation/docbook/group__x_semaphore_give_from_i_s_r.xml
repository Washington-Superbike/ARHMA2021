<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_semaphore_give_from_i_s_r" xml:lang="en-US">
<title>xSemaphoreGiveFromISR</title>
<indexterm><primary>xSemaphoreGiveFromISR</primary></indexterm>

<para>semphr. h <literallayout>
<link linkend="_semphr_8h_1a68aa43df8b2a0dbe17d05fad74670ef0">xSemaphoreGiveFromISR(
                         SemaphoreHandle_t xSemaphore,
                         BaseType_t *pxHigherPriorityTaskWoken
                     )</link></literallayout></para>

<para><emphasis>Macro</emphasis> to release a semaphore. The semaphore must have previously been created with a call to xSemaphoreCreateBinary() or xSemaphoreCreateCounting().</para>

<para>Mutex type semaphores (those created using a call to xSemaphoreCreateMutex()) must not be used with this macro.</para>

<para>This macro can be used from an ISR.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xSemaphore</entry><entry>
<para>A handle to the semaphore being released. This is the handle returned when the semaphore was created.</para>
</entry>
                            </row>
                            <row>
<entry>pxHigherPriorityTaskWoken</entry><entry>
<para><link linkend="_semphr_8h_1a68aa43df8b2a0dbe17d05fad74670ef0">xSemaphoreGiveFromISR()</link> will set *pxHigherPriorityTaskWoken to pdTRUE if giving the semaphore caused a task to unblock, and the unblocked task has a priority higher than the currently running task. If <link linkend="_semphr_8h_1a68aa43df8b2a0dbe17d05fad74670ef0">xSemaphoreGiveFromISR()</link> sets this value to pdTRUE then a context switch should be requested before the interrupt is exited.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if the semaphore was successfully given, otherwise errQUEUE_FULL.</para>
</formalpara>
Example usage: <literallayout>
#define LONG_TIME 0xffff
#define TICKS_TO_WAIT  10
SemaphoreHandle_t xSemaphore = NULL;

// Repetitive task.
void vATask( void * pvParameters )
{
   for( ;; )
   {
       // We want this task to run every 10 ticks of a timer.  The semaphore
       // was created before this task was started.

       // Block waiting for the semaphore to become available.
       if( <link linkend="_semphr_8h_1af116e436d2a5ae5bd72dbade2b5ea930">xSemaphoreTake( xSemaphore, LONG_TIME )</link> == pdTRUE )
       {
           // It is time to execute.

           // ...

           // We have finished our task.  Return to the top of the loop where
           // we will block on the semaphore until it is time to execute
           // again.  Note when using the semaphore for synchronisation with an
        // ISR in this manner there is no need to &apos;give&apos; the semaphore back.
       }
   }
}

// Timer ISR
void vTimerISR( void * pvParameters )
{
static uint8_t ucLocalTickCount = 0;
static BaseType_t xHigherPriorityTaskWoken;

   // A timer tick has occurred.

   // ... Do other time functions.

   // Is it time for vATask () to run?
   xHigherPriorityTaskWoken = pdFALSE;
   ucLocalTickCount++;
   if( ucLocalTickCount &gt;= TICKS_TO_WAIT )
   {
       // Unblock the task by releasing the semaphore.
       <link linkend="_semphr_8h_1a68aa43df8b2a0dbe17d05fad74670ef0">xSemaphoreGiveFromISR( xSemaphore, &amp;xHigherPriorityTaskWoken )</link>;

       // Reset the count so we release the semaphore again in 10 ticks time.
       ucLocalTickCount = 0;
   }

   if( xHigherPriorityTaskWoken != pdFALSE )
   {
       // We can force a context switch here.  Context switching from an
       // ISR uses port specific syntax.  Check the demo task for your port
       // to find the syntax required.
   }
}
</literallayout> </para>
</section>
