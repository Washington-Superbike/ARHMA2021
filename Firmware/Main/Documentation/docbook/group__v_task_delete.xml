<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__v_task_delete" xml:lang="en-US">
<title>vTaskDelete</title>
<indexterm><primary>vTaskDelete</primary></indexterm>

<para>task. h <literallayout>void <link linkend="_task_8h_1a27ff4ebce26565bef136bda84201ff80">vTaskDelete( TaskHandle_t xTask )</link>;</literallayout></para>

<para>INCLUDE_vTaskDelete must be defined as 1 for this function to be available. See the configuration section for more information.</para>

<para>Remove a task from the RTOS real time kernel&apos;s management. The task being deleted will be removed from all ready, blocked, suspended and event lists.</para>

<para>NOTE: The idle task is responsible for freeing the kernel allocated memory from tasks that have been deleted. It is therefore important that the idle task is not starved of microcontroller processing time if your application makes any calls to vTaskDelete (). Memory allocated by the task code is not automatically freed, and should be freed before the task is deleted.</para>

<para>See the demo application file death.c for sample code that utilises vTaskDelete ().</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xTask</entry><entry>
<para>The handle of the task to be deleted. Passing NULL will cause the calling task to be deleted.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Example usage: <literallayout>
void vOtherFunction( void )
{
TaskHandle_t xHandle;

    // Create the task, storing the handle.
    xTaskCreate( vTaskCode, &quot;NAME&quot;, STACK_SIZE, NULL, tskIDLE_PRIORITY, &amp;xHandle );

    // Use the handle to delete the task.
    vTaskDelete( xHandle );
}
  </literallayout> </para>
</section>
