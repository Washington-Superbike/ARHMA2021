<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_queue_receive_from_i_s_r" xml:lang="en-US">
<title>xQueueReceiveFromISR</title>
<indexterm><primary>xQueueReceiveFromISR</primary></indexterm>

<para>queue. h <literallayout>
BaseType_t <link linkend="_queue_8h_1acdf528f5c91131ae2f31c669cfd65758">xQueueReceiveFromISR(
                                   QueueHandle_t    xQueue,
                                   void *pvBuffer,
                                   BaseType_t *pxTaskWoken
                               )</link>;
  </literallayout></para>

<para>Receive an item from a queue. It is safe to use this function from within an interrupt service routine.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xQueue</entry><entry>
<para>The handle to the queue from which the item is to be received.</para>
</entry>
                            </row>
                            <row>
<entry>pvBuffer</entry><entry>
<para>Pointer to the buffer into which the received item will be copied.</para>
</entry>
                            </row>
                            <row>
<entry>pxTaskWoken</entry><entry>
<para>A task may be blocked waiting for space to become available on the queue. If xQueueReceiveFromISR causes such a task to unblock *pxTaskWoken will get set to pdTRUE, otherwise *pxTaskWoken will remain unchanged.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if an item was successfully received from the queue, otherwise pdFALSE.</para>
</formalpara>
Example usage: <literallayout>

QueueHandle_t xQueue;

// Function to create a queue and post some values.
void vAFunction( void *pvParameters )
{
char cValueToPost;
const TickType_t xTicksToWait = ( TickType_t )0xff;

   // Create a queue capable of containing 10 characters.
   xQueue = xQueueCreate( 10, sizeof( char ) );
   if( xQueue == 0 )
   {
    // Failed to create the queue.
   }

   // ...

   // Post some characters that will be used within an ISR.  If the queue
   // is full then this task will block for xTicksToWait ticks.
   cValueToPost = &apos;a&apos;;
   <link linkend="_queue_8h_1af7eb49d3249351176992950d9185abe9">xQueueSend( xQueue, ( void * ) &amp;cValueToPost, xTicksToWait )</link>;
   cValueToPost = &apos;b&apos;;
   <link linkend="_queue_8h_1af7eb49d3249351176992950d9185abe9">xQueueSend( xQueue, ( void * ) &amp;cValueToPost, xTicksToWait )</link>;

   // ... keep posting characters ... this task may block when the queue
   // becomes full.

   cValueToPost = &apos;c&apos;;
   <link linkend="_queue_8h_1af7eb49d3249351176992950d9185abe9">xQueueSend( xQueue, ( void * ) &amp;cValueToPost, xTicksToWait )</link>;
}

// ISR that outputs all the characters received on the queue.
void vISR_Routine( void )
{
BaseType_t xTaskWokenByReceive = pdFALSE;
char cRxedChar;

   while( xQueueReceiveFromISR( xQueue, ( void * ) &amp;cRxedChar, &amp;xTaskWokenByReceive) )
   {
    // A character was received.  Output the character now.
    vOutputCharacter( cRxedChar );

    // If removing the character from the queue woke the task that was
    // posting onto the queue cTaskWokenByReceive will have been set to
    // pdTRUE.  No matter how many times this loop iterates only one
    // task will be woken.
   }

   if( cTaskWokenByPost != ( char ) pdFALSE;
   {
    taskYIELD ();
   }
}
</literallayout> </para>
</section>
