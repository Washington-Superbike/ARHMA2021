<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__c_a_n_8h" xml:lang="en-US">
<title>C:/Users/ponym/ARHMA2021/Firmware/Main/CAN.h File Reference</title>
<indexterm><primary>C:/Users/ponym/ARHMA2021/Firmware/Main/CAN.h</primary></indexterm>
<para>

<para>The <link linkend="__c_a_n_8h">CAN.h</link> config file for the CAN task for the bike&apos;s firmware. This defines the variables that are passed along to the <link linkend="__c_a_n_8ino">CAN.ino</link> file and others if they use it. Then it creates the initial reference (there&apos;s a proper C programming term for it) for all the methods used in <link linkend="__c_a_n_8ino">CAN.ino</link>. This file also creates multiple typedef structs that basically allow us to package the data that is processed in CAN, nicely. There are a lot of structs and they will be spoken about in detail below. Like all header files, this exists as the skeleton/framework for the .ino or main c file. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &lt;FlexCAN_T4.h&gt;<?linebreak?>#include &quot;Display.h&quot;<?linebreak?>#include &quot;FreeRTOS_TEENSY4.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_motor_stats">MotorStats</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_motor_temps">MotorTemps</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_charge_controller_stats">ChargeControllerStats</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_charger_stats">ChargerStats</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_b_m_s_status">BMSStatus</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_thermistor_temps">ThermistorTemps</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_cell_voltages">CellVoltages</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_c_a_n_task_data">CANTaskData</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__c_a_n_8h_1ab9d0930315055c0f1a6511c6cc3c5524">CAN_TASK_STACK_SIZE</link>&#160;&#160;&#160;<link linkend="__free_r_t_o_s_config__default_8h_1a6c534a6cf8a00528fe0be42083484f9a">configMINIMAL_STACK_SIZE</link> + 4096</para>

<para>Uses the configMINIMAL_STACK_SIZE variable in <link linkend="__main_8h">Main.h</link> to add up to the stack size used for the <link linkend="__c_a_n_8h_1a785e095da30ce4993a186804102bf2ea">canTask()</link> </para>
</listitem>
            <listitem><para>#define <link linkend="__c_a_n_8h_1a1b593ffe62c4590fa197331661393984">MOTOR_STATS_MSG</link>&#160;&#160;&#160;0x0CF11E05</para>

<para>Motor controller message - CAN. </para>
</listitem>
            <listitem><para>#define <link linkend="__c_a_n_8h_1a464be4036d5c85f472f461fc987eb2da">MOTOR_TEMPS_MSG</link>&#160;&#160;&#160;0x0CF11F05</para>

<para>Motor controller message - CAN. </para>
</listitem>
            <listitem><para>#define <link linkend="__c_a_n_8h_1ac7e658bcd09f49f37c7732ddc1c80fe2">EVCC_STATS</link>&#160;&#160;&#160;0x18e54024</para>

<para>Charge controller status (current,volt...) </para>
</listitem>
            <listitem><para>#define <link linkend="__c_a_n_8h_1aaa765e2d2381f199ed620b8d6962f60d">CHARGER_STATS</link>&#160;&#160;&#160;0x18eb2440</para>

<para>Thunderstruck Charger status (current,volt...) </para>
</listitem>
            <listitem><para>#define <link linkend="__c_a_n_8h_1a44d631b0f4e7e294bc26dd9c77d3dcb9">DD_BMS_STATUS_IND</link>&#160;&#160;&#160;0x01dd0001</para>

<para>BMS cell data message (overvolt,undervolt...) </para>
</listitem>
            <listitem><para>#define <link linkend="__c_a_n_8h_1a5a71b982a71be6bc19546f4c8fecadd7">DD_BMSC_TH_STATUS_IND</link>&#160;&#160;&#160;0x01df0e00</para>

<para>Themistor values message. </para>
</listitem>
            <listitem><para>#define <link linkend="__c_a_n_8h_1a366031af35039c965b2bb3ac07dd702a">BMSC1_LTC1_CELLS_04</link>&#160;&#160;&#160;0x01df0900</para>

<para>Convention: BMSC, LTC, CELL RANGE. </para>
</listitem>
            <listitem><para>#define <link linkend="__c_a_n_8h_1a2da14593c5f2bdd4bc417f9e66bc2a75">BMSC1_LTC1_CELLS_58</link>&#160;&#160;&#160;0x01df0a00</para>

<para>Convention: BMSC, LTC, CELL RANGE. </para>
</listitem>
            <listitem><para>#define <link linkend="__c_a_n_8h_1ac1908e8612424d72ae778e43759f077f">BMSC1_LTC1_CELLS_912</link>&#160;&#160;&#160;0x01df0b00</para>

<para>Convention: BMSC, LTC, CELL RANGE. </para>
</listitem>
            <listitem><para>#define <link linkend="__c_a_n_8h_1a76c8bda430a00f369aed9309100c3107">BMSC1_LTC2_CELLS_04</link>&#160;&#160;&#160;0x01df0901</para>

<para>Convention: BMSC, LTC, CELL RANGE. </para>
</listitem>
            <listitem><para>#define <link linkend="__c_a_n_8h_1aa605748f6dfeb5f3ba7b8b473a2f41b5">BMSC1_LTC2_CELLS_58</link>&#160;&#160;&#160;0x01df0a01</para>

<para>Convention: BMSC, LTC, CELL RANGE. </para>
</listitem>
            <listitem><para>#define <link linkend="__c_a_n_8h_1af80d69aa4a06cbc8b1137773336f74ec">BMSC1_LTC2_CELLS_912</link>&#160;&#160;&#160;0x01df0b01</para>

<para>Convention: BMSC, LTC, CELL RANGE. </para>
</listitem>
            <listitem><para>#define <link linkend="__c_a_n_8h_1aedb50849ed846717c3096b10fb75d537">BMS_CELLS</link>&#160;&#160;&#160;24</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="__c_a_n_8h_1a785e095da30ce4993a186804102bf2ea">canTask</link> (void *canData)</para>
</listitem>
            <listitem><para>void <link linkend="__c_a_n_8h_1a833ae6516ecb5cb3f8a7bd5adbf2bd9b">setupCAN</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="__c_a_n_8h_1acc8ad6a9a2388c904e5c2a81e263c59d">decipherEVCCStats</link> (CAN_message_t msg, <link linkend="_struct_charge_controller_stats">ChargeControllerStats</link> evccStats)</para>
</listitem>
            <listitem><para>void <link linkend="__c_a_n_8h_1a3e5ce0cee4895bc07047a515ac2fa8ea">decipherChargerStats</link> (CAN_message_t msg, <link linkend="_struct_charger_stats">ChargerStats</link> <link linkend="__main_8h_1aa249f1d073086c27682168bbd7dc77ee">chargerStats</link>)</para>
</listitem>
            <listitem><para>void <link linkend="__c_a_n_8h_1abd98b0e43fb7330bf8964d8da390810f">decodeMotorStats</link> (CAN_message_t msg, <link linkend="_struct_motor_stats">MotorStats</link> <link linkend="__main_8h_1a9eeb128a9907154869e9ffa78e065039">motorStats</link>)</para>
</listitem>
            <listitem><para>void <link linkend="__c_a_n_8h_1a950c51dd93e1585b49156c52113ab832">decodeMotorTemps</link> (CAN_message_t msg, <link linkend="_struct_motor_temps">MotorTemps</link> <link linkend="__main_8h_1abb61c6dc61d12b31aad7bdadd495b70a">motorTemps</link>)</para>
</listitem>
            <listitem><para>void <link linkend="__c_a_n_8h_1ac7f58797b08a603835f0488b5fe3fb7c">decipherBMSStatus</link> (CAN_message_t msg, <link linkend="_struct_b_m_s_status">BMSStatus</link> <link linkend="__main_8h_1ae0522609134711f92c96ffa8ed05e582">bmsStatus</link>)</para>
</listitem>
            <listitem><para>void <link linkend="__c_a_n_8h_1ac7f0128ba5279b58ce4917ff6d80264e">decipherCellsVoltage</link> (CAN_message_t msg, <link linkend="_struct_cell_voltages">CellVoltages</link> <link linkend="__main_8h_1afca6798677cebeeb7599ea00e1e243dd">cellVoltages</link>)</para>
</listitem>
            <listitem><para>void <link linkend="__c_a_n_8h_1a11cd027f4ad6ca2a6b9a860a07fb8e41">decipherThermistors</link> (CAN_message_t msg, <link linkend="_struct_thermistor_temps">ThermistorTemps</link> <link linkend="__main_8h_1a18571448b101f12a60457d717dc4f953">thermistorTemps</link>)</para>
</listitem>
            <listitem><para>void <link linkend="__c_a_n_8h_1afd1fb5329197c4478969008e0ee42f90">calculateSeriesVoltage</link> (<link linkend="_struct_cell_voltages">CellVoltages</link> cellVs)</para>
</listitem>
            <listitem><para>void <link linkend="__c_a_n_8h_1ab92f5f7e74cba4411e9f1c6f32a720a5">checkCAN</link> (<link linkend="_struct_c_a_n_task_data">CANTaskData</link> canData)</para>
</listitem>
            <listitem><para>void <link linkend="__c_a_n_8h_1a317708f05ea5de4b748e27c49e2a85e8">printBMSStatus</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="__c_a_n_8h_1ad899aaa07def0c8757bea6e9a75f878d">printMessage</link> (CAN_message_t msg)</para>
</listitem>
            <listitem><para>void <link linkend="__c_a_n_8h_1a0953b2f37f0e637d3f5fba2148109d2a">requestCellVoltages</link> (int LTC)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>FlexCAN_T4&lt; CAN2, RX_SIZE_256, TX_SIZE_16 &gt; <link linkend="__c_a_n_8h_1aa4303f5a4b2f41108b988f850270b2d1">CAN_bus</link></para>

<para>CAN bus handle. </para>
</listitem>
            <listitem><para>CAN_message_t <link linkend="__c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed">CAN_msg</link></para>

<para>Used to format reading/writing on the CAN bus. </para>
</listitem>
            <listitem><para>static bool <link linkend="__c_a_n_8h_1af798cac38f8c00111b4be880f47d8020">cellVoltagesReady</link> [24] = {false}</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>The <link linkend="__c_a_n_8h">CAN.h</link> config file for the CAN task for the bike&apos;s firmware. This defines the variables that are passed along to the <link linkend="__c_a_n_8ino">CAN.ino</link> file and others if they use it. Then it creates the initial reference (there&apos;s a proper C programming term for it) for all the methods used in <link linkend="__c_a_n_8ino">CAN.ino</link>. This file also creates multiple typedef structs that basically allow us to package the data that is processed in CAN, nicely. There are a lot of structs and they will be spoken about in detail below. Like all header files, this exists as the skeleton/framework for the .ino or main c file. </para>

<para><formalpara><title>Author</title>

<para>Washington Superbike </para>
</formalpara>
<formalpara><title>Date</title>

<para>1-March-2023 </para>
</formalpara>
<note><title>Note</title>

<para>Frankly, unless you add more CAN devices or if the BMS or any other CAN device acts up, you should have no reason to update or mess with this at all.</para>
</note>
<para><link linkend="_todo_1_todo000001">Todo</link> 
<para>Nothing? <?linebreak?> <?linebreak?> More Nothing? <?linebreak?> <?linebreak?> Nothing supreme? <?linebreak?> <?linebreak?> Nothing maxima. </para>
</para></para>
<para>
Definition in file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__c_a_n_8h_1aedb50849ed846717c3096b10fb75d537"/><section>
    <title>BMS_CELLS</title>
<indexterm><primary>BMS_CELLS</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>BMS_CELLS</secondary></indexterm>
<para><computeroutput>#define BMS_CELLS&#160;&#160;&#160;24</computeroutput></para>
<para>This is set to 24 instead of 20 because the BMS sends cells in packs of 12 so it makes the decipher function simpler. This represents the number of cells connected to the main accumulator BMS </para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00060">60</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a366031af35039c965b2bb3ac07dd702a"/><section>
    <title>BMSC1_LTC1_CELLS_04</title>
<indexterm><primary>BMSC1_LTC1_CELLS_04</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>BMSC1_LTC1_CELLS_04</secondary></indexterm>
<para><computeroutput>#define BMSC1_LTC1_CELLS_04&#160;&#160;&#160;0x01df0900</computeroutput></para><para>

<para>Convention: BMSC, LTC, CELL RANGE. </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00045">45</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a2da14593c5f2bdd4bc417f9e66bc2a75"/><section>
    <title>BMSC1_LTC1_CELLS_58</title>
<indexterm><primary>BMSC1_LTC1_CELLS_58</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>BMSC1_LTC1_CELLS_58</secondary></indexterm>
<para><computeroutput>#define BMSC1_LTC1_CELLS_58&#160;&#160;&#160;0x01df0a00</computeroutput></para><para>

<para>Convention: BMSC, LTC, CELL RANGE. </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00047">47</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1ac1908e8612424d72ae778e43759f077f"/><section>
    <title>BMSC1_LTC1_CELLS_912</title>
<indexterm><primary>BMSC1_LTC1_CELLS_912</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>BMSC1_LTC1_CELLS_912</secondary></indexterm>
<para><computeroutput>#define BMSC1_LTC1_CELLS_912&#160;&#160;&#160;0x01df0b00</computeroutput></para><para>

<para>Convention: BMSC, LTC, CELL RANGE. </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00049">49</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a76c8bda430a00f369aed9309100c3107"/><section>
    <title>BMSC1_LTC2_CELLS_04</title>
<indexterm><primary>BMSC1_LTC2_CELLS_04</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>BMSC1_LTC2_CELLS_04</secondary></indexterm>
<para><computeroutput>#define BMSC1_LTC2_CELLS_04&#160;&#160;&#160;0x01df0901</computeroutput></para><para>

<para>Convention: BMSC, LTC, CELL RANGE. </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00051">51</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1aa605748f6dfeb5f3ba7b8b473a2f41b5"/><section>
    <title>BMSC1_LTC2_CELLS_58</title>
<indexterm><primary>BMSC1_LTC2_CELLS_58</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>BMSC1_LTC2_CELLS_58</secondary></indexterm>
<para><computeroutput>#define BMSC1_LTC2_CELLS_58&#160;&#160;&#160;0x01df0a01</computeroutput></para><para>

<para>Convention: BMSC, LTC, CELL RANGE. </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00053">53</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1af80d69aa4a06cbc8b1137773336f74ec"/><section>
    <title>BMSC1_LTC2_CELLS_912</title>
<indexterm><primary>BMSC1_LTC2_CELLS_912</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>BMSC1_LTC2_CELLS_912</secondary></indexterm>
<para><computeroutput>#define BMSC1_LTC2_CELLS_912&#160;&#160;&#160;0x01df0b01</computeroutput></para><para>

<para>Convention: BMSC, LTC, CELL RANGE. </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00055">55</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1ab9d0930315055c0f1a6511c6cc3c5524"/><section>
    <title>CAN_TASK_STACK_SIZE</title>
<indexterm><primary>CAN_TASK_STACK_SIZE</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>CAN_TASK_STACK_SIZE</secondary></indexterm>
<para><computeroutput>#define CAN_TASK_STACK_SIZE&#160;&#160;&#160;<link linkend="__free_r_t_o_s_config__default_8h_1a6c534a6cf8a00528fe0be42083484f9a">configMINIMAL_STACK_SIZE</link> + 4096</computeroutput></para><para>

<para>Uses the configMINIMAL_STACK_SIZE variable in <link linkend="__main_8h">Main.h</link> to add up to the stack size used for the <link linkend="__c_a_n_8h_1a785e095da30ce4993a186804102bf2ea">canTask()</link> </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00030">30</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1aaa765e2d2381f199ed620b8d6962f60d"/><section>
    <title>CHARGER_STATS</title>
<indexterm><primary>CHARGER_STATS</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>CHARGER_STATS</secondary></indexterm>
<para><computeroutput>#define CHARGER_STATS&#160;&#160;&#160;0x18eb2440</computeroutput></para><para>

<para>Thunderstruck Charger status (current,volt...) </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00039">39</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a44d631b0f4e7e294bc26dd9c77d3dcb9"/><section>
    <title>DD_BMS_STATUS_IND</title>
<indexterm><primary>DD_BMS_STATUS_IND</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>DD_BMS_STATUS_IND</secondary></indexterm>
<para><computeroutput>#define DD_BMS_STATUS_IND&#160;&#160;&#160;0x01dd0001</computeroutput></para><para>

<para>BMS cell data message (overvolt,undervolt...) </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00041">41</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a5a71b982a71be6bc19546f4c8fecadd7"/><section>
    <title>DD_BMSC_TH_STATUS_IND</title>
<indexterm><primary>DD_BMSC_TH_STATUS_IND</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>DD_BMSC_TH_STATUS_IND</secondary></indexterm>
<para><computeroutput>#define DD_BMSC_TH_STATUS_IND&#160;&#160;&#160;0x01df0e00</computeroutput></para><para>

<para>Themistor values message. </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00043">43</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1ac7e658bcd09f49f37c7732ddc1c80fe2"/><section>
    <title>EVCC_STATS</title>
<indexterm><primary>EVCC_STATS</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>EVCC_STATS</secondary></indexterm>
<para><computeroutput>#define EVCC_STATS&#160;&#160;&#160;0x18e54024</computeroutput></para><para>

<para>Charge controller status (current,volt...) </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00037">37</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a1b593ffe62c4590fa197331661393984"/><section>
    <title>MOTOR_STATS_MSG</title>
<indexterm><primary>MOTOR_STATS_MSG</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>MOTOR_STATS_MSG</secondary></indexterm>
<para><computeroutput>#define MOTOR_STATS_MSG&#160;&#160;&#160;0x0CF11E05</computeroutput></para><para>

<para>Motor controller message - CAN. </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00033">33</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a464be4036d5c85f472f461fc987eb2da"/><section>
    <title>MOTOR_TEMPS_MSG</title>
<indexterm><primary>MOTOR_TEMPS_MSG</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>MOTOR_TEMPS_MSG</secondary></indexterm>
<para><computeroutput>#define MOTOR_TEMPS_MSG&#160;&#160;&#160;0x0CF11F05</computeroutput></para><para>

<para>Motor controller message - CAN. </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00035">35</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__c_a_n_8h_1afd1fb5329197c4478969008e0ee42f90"/><section>
    <title>calculateSeriesVoltage()</title>
<indexterm><primary>calculateSeriesVoltage</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>calculateSeriesVoltage</secondary></indexterm>
<para><computeroutput>void calculateSeriesVoltage (<link linkend="_struct_cell_voltages">CellVoltages</link> cellVs)</computeroutput></para><para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00135">135</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a785e095da30ce4993a186804102bf2ea"/><section>
    <title>canTask()</title>
<indexterm><primary>canTask</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>canTask</secondary></indexterm>
<para><computeroutput>void canTask (void * canData)</computeroutput></para>
<para>First <link linkend="__c_a_n_8ino_1a785e095da30ce4993a186804102bf2ea">canTask()</link> checks for new incoming messages</para>

<para>NOTE: CAN breaks if we try sending messages with 0 other nodes on the bus as there is no node to &apos;ACK&apos; our message. Therefore, change CAN_NODES in <link linkend="__main_8h">Main.h</link> to make sure things dont break.</para>

<para>Ask for other half of cell voltages from BMS every 2 seconds</para>
<para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00031">31</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1ab92f5f7e74cba4411e9f1c6f32a720a5"/><section>
    <title>checkCAN()</title>
<indexterm><primary>checkCAN</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>checkCAN</secondary></indexterm>
<para><computeroutput>void checkCAN (<link linkend="_struct_c_a_n_task_data">CANTaskData</link> canData)</computeroutput></para><para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00145">145</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1ac7f58797b08a603835f0488b5fe3fb7c"/><section>
    <title>decipherBMSStatus()</title>
<indexterm><primary>decipherBMSStatus</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>decipherBMSStatus</secondary></indexterm>
<para><computeroutput>void decipherBMSStatus (CAN_message_t msg, <link linkend="_struct_b_m_s_status">BMSStatus</link> bmsStatus)</computeroutput></para><para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00088">88</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1ac7f0128ba5279b58ce4917ff6d80264e"/><section>
    <title>decipherCellsVoltage()</title>
<indexterm><primary>decipherCellsVoltage</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>decipherCellsVoltage</secondary></indexterm>
<para><computeroutput>void decipherCellsVoltage (CAN_message_t msg, <link linkend="_struct_cell_voltages">CellVoltages</link> cellVoltages)</computeroutput></para><para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00096">96</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a3e5ce0cee4895bc07047a515ac2fa8ea"/><section>
    <title>decipherChargerStats()</title>
<indexterm><primary>decipherChargerStats</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>decipherChargerStats</secondary></indexterm>
<para><computeroutput>void decipherChargerStats (CAN_message_t msg, <link linkend="_struct_charger_stats">ChargerStats</link> chargerStats)</computeroutput></para><para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00066">66</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1acc8ad6a9a2388c904e5c2a81e263c59d"/><section>
    <title>decipherEVCCStats()</title>
<indexterm><primary>decipherEVCCStats</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>decipherEVCCStats</secondary></indexterm>
<para><computeroutput>void decipherEVCCStats (CAN_message_t msg, <link linkend="_struct_charge_controller_stats">ChargeControllerStats</link> evccStats)</computeroutput></para><para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00060">60</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a11cd027f4ad6ca2a6b9a860a07fb8e41"/><section>
    <title>decipherThermistors()</title>
<indexterm><primary>decipherThermistors</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>decipherThermistors</secondary></indexterm>
<para><computeroutput>void decipherThermistors (CAN_message_t msg, <link linkend="_struct_thermistor_temps">ThermistorTemps</link> thermistorTemps)</computeroutput></para><para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00123">123</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1abd98b0e43fb7330bf8964d8da390810f"/><section>
    <title>decodeMotorStats()</title>
<indexterm><primary>decodeMotorStats</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>decodeMotorStats</secondary></indexterm>
<para><computeroutput>void decodeMotorStats (CAN_message_t msg, <link linkend="_struct_motor_stats">MotorStats</link> motorStats)</computeroutput></para><para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00074">74</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a950c51dd93e1585b49156c52113ab832"/><section>
    <title>decodeMotorTemps()</title>
<indexterm><primary>decodeMotorTemps</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>decodeMotorTemps</secondary></indexterm>
<para><computeroutput>void decodeMotorTemps (CAN_message_t msg, <link linkend="_struct_motor_temps">MotorTemps</link> motorTemps)</computeroutput></para><para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00081">81</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a317708f05ea5de4b748e27c49e2a85e8"/><section>
    <title>printBMSStatus()</title>
<indexterm><primary>printBMSStatus</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>printBMSStatus</secondary></indexterm>
<para><computeroutput>void printBMSStatus ( )</computeroutput></para><para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00190">190</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1ad899aaa07def0c8757bea6e9a75f878d"/><section>
    <title>printMessage()</title>
<indexterm><primary>printMessage</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>printMessage</secondary></indexterm>
<para><computeroutput>void printMessage (CAN_message_t msg)</computeroutput></para><para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00224">224</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a0953b2f37f0e637d3f5fba2148109d2a"/><section>
    <title>requestCellVoltages()</title>
<indexterm><primary>requestCellVoltages</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>requestCellVoltages</secondary></indexterm>
<para><computeroutput>void requestCellVoltages (int LTC)</computeroutput></para><para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00234">234</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1a833ae6516ecb5cb3f8a7bd5adbf2bd9b"/><section>
    <title>setupCAN()</title>
<indexterm><primary>setupCAN</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>setupCAN</secondary></indexterm>
<para><computeroutput>void setupCAN ( )</computeroutput></para><para>
Definition at line <link linkend="__c_a_n_8ino_source_1l00055">55</link> of file <link linkend="__c_a_n_8ino_source">CAN.ino</link>.</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="__c_a_n_8h_1aa4303f5a4b2f41108b988f850270b2d1"/><section>
    <title>CAN_bus</title>
<indexterm><primary>CAN_bus</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>CAN_bus</secondary></indexterm>
<para><computeroutput>FlexCAN_T4&lt;CAN2, RX_SIZE_256, TX_SIZE_16&gt; CAN_bus</computeroutput></para><para>

<para>CAN bus handle. </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00063">63</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1afef5641c16f897cbe9fc00682fb749ed"/><section>
    <title>CAN_msg</title>
<indexterm><primary>CAN_msg</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>CAN_msg</secondary></indexterm>
<para><computeroutput>CAN_message_t CAN_msg</computeroutput></para><para>

<para>Used to format reading/writing on the CAN bus. </para>
</para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00066">66</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
<anchor xml:id="__c_a_n_8h_1af798cac38f8c00111b4be880f47d8020"/><section>
    <title>cellVoltagesReady</title>
<indexterm><primary>cellVoltagesReady</primary><secondary>CAN.h</secondary></indexterm>
<indexterm><primary>CAN.h</primary><secondary>cellVoltagesReady</secondary></indexterm>
<para><computeroutput>bool cellVoltagesReady[24] = {false}<computeroutput>[static]</computeroutput></computeroutput></para>
<para>If cellVoltagesReady[INDEX] is true, we have received that cell&apos;s voltage from the BMS it is false otherwise (so we know when we have collected all distinct cell voltages </para>
<para>
Definition at line <link linkend="__c_a_n_8h_source_1l00070">70</link> of file <link linkend="__c_a_n_8h_source">CAN.h</link>.</para>
</section>
</section>
</section>
