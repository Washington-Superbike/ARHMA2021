<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__ul_task_notify_take" xml:lang="en-US">
<title>ulTaskNotifyTake</title>
<indexterm><primary>ulTaskNotifyTake</primary></indexterm>

<para>task. h <literallayout>uint32_t <link linkend="_task_8h_1a66540bef602522a01a519f776e4c07d8">ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )</link>;</literallayout></para>

<para>configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.</para>

<para>When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private &quot;notification value&quot;, which is a 32-bit unsigned integer (uint32_t).</para>

<para>Events can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.</para>

<para>A notification sent to a task can optionally perform an action, such as update, overwrite or increment the task&apos;s notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.</para>

<para><link linkend="_task_8h_1a66540bef602522a01a519f776e4c07d8">ulTaskNotifyTake()</link> is intended for use when a task notification is used as a faster and lighter weight binary or counting semaphore alternative. Actual FreeRTOS semaphores are taken using the <link linkend="_semphr_8h_1af116e436d2a5ae5bd72dbade2b5ea930">xSemaphoreTake()</link> API function, the equivalent action that instead uses a task notification is <link linkend="_task_8h_1a66540bef602522a01a519f776e4c07d8">ulTaskNotifyTake()</link>.</para>

<para>When a task is using its notification value as a binary or counting semaphore other tasks should send notifications to it using the <link linkend="_task_8h_1ac60cbd05577a3e4f3c3587dd9b213930">xTaskNotifyGive()</link> macro, or <link linkend="_task_8h_1a0d2d54fb8a64011dfbb54983e4ed06bd">xTaskNotify()</link> function with the eAction parameter set to eIncrement.</para>

<para><link linkend="_task_8h_1a66540bef602522a01a519f776e4c07d8">ulTaskNotifyTake()</link> can either clear the task&apos;s notification value to zero on exit, in which case the notification value acts like a binary semaphore, or decrement the task&apos;s notification value on exit, in which case the notification value acts like a counting semaphore.</para>

<para>A task can use <link linkend="_task_8h_1a66540bef602522a01a519f776e4c07d8">ulTaskNotifyTake()</link> to [optionally] block to wait for a the task&apos;s notification value to be non-zero. The task does not consume any CPU time while it is in the Blocked state.</para>

<para>Where as <link linkend="_task_8h_1a0475fcda9718f403521c270a7270ff93">xTaskNotifyWait()</link> will return when a notification is pending, <link linkend="_task_8h_1a66540bef602522a01a519f776e4c07d8">ulTaskNotifyTake()</link> will return when the task&apos;s notification value is not zero.</para>

<para>See <link xlink:href="http://www.FreeRTOS.org/RTOS-task-notifications.html">http://www.FreeRTOS.org/RTOS-task-notifications.html</link> for details.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xClearCountOnExit</entry><entry>
<para>if xClearCountOnExit is pdFALSE then the task&apos;s notification value is decremented when the function exits. In this way the notification value acts like a counting semaphore. If xClearCountOnExit is not pdFALSE then the task&apos;s notification value is cleared to zero when the function exits. In this way the notification value acts like a binary semaphore.</para>
</entry>
                            </row>
                            <row>
<entry>xTicksToWait</entry><entry>
<para>The maximum amount of time that the task should wait in the Blocked state for the task&apos;s notification value to be greater than zero, should the count not already be greater than zero when <link linkend="_task_8h_1a66540bef602522a01a519f776e4c07d8">ulTaskNotifyTake()</link> was called. The task will not consume any processing time while it is in the Blocked state. This is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time specified in milliseconds to a time specified in ticks.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The task&apos;s notification count before it is either cleared to zero or decremented (see the xClearCountOnExit parameter). </para>
</formalpara>
</para>
</section>
