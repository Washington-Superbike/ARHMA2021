<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__main_8h" xml:lang="en-US">
<title>C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h File Reference</title>
<indexterm><primary>C:/Users/ponym/ARHMA2021/Firmware/Main/Main.h</primary></indexterm>
<para>

<para>The main config file for bike firmware. This initializes all variables that are passed along to all other files as pointers. Then it creates the initial reference (there&apos;s a proper C programming term for it) for all the methods used in <link linkend="__main_8ino">Main.ino</link>. This file exists as an overall configuration for the bike firmware as all these variables can be changed to meet requirements. Like all other header files, it exists as the skeleton on which the .ino file is built. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;config.h&quot;<?linebreak?>#include &quot;CAN.h&quot;<?linebreak?>#include &quot;Display.h&quot;<?linebreak?>#include &quot;Precharge.h&quot;<?linebreak?>#include &quot;DataLogging.h&quot;<?linebreak?>#include &quot;FreeRTOS_TEENSY4.h&quot;<?linebreak?>#include &lt;TimeLib.h&gt;<?linebreak?></programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="__main_8h_1a4fc01d736fe50cf5b977f755b675f11d">setup</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="__main_8h_1a31d554847ae8fdeaba2460e0395cb75f">setupPins</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="__main_8h_1a128d10ba9e06eb69d1dfc91ffef935ba">initializeDisplayStructs</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="__main_8h_1a797cf3c70ce7ae02bba9bfd3f6d886de">initializeLogStructs</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="__main_8h_1ab91267714bdf99d7b3d177f95f484157">initializeCANStructs</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="__main_8h_1a32469c898d757b2b30c00d0546f91802">initializePreChargeStruct</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="__main_8h_1aafd615bc53c2f27720d792a6a2968209">get_SPI_control</link> (unsigned int <link linkend="__main_8h_1a548fbf99c23fe3ef17f2e1a7b0992070">ms</link>)</para>
</listitem>
            <listitem><para>void <link linkend="__main_8h_1a966fda2bc617e020cb78f814bb5514c1">release_SPI_control</link> (void)</para>
</listitem>
            <listitem><para>time_t <link linkend="__main_8h_1a3e0781915a9e0f2045e892efe59f9fdc">getTeensy3Time</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="__main_8h_1a0d7297755c0775a9b0e4f7eeeafd7c7e">idleTask</link> (void *taskData)</para>
</listitem>
            <listitem><para>void <link linkend="__main_8h_1afe461d27b9c48d5921c00d521181f12f">loop</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>static int <link linkend="__main_8h_1a04c234659b28f92e2eab7998b586bb4c">bms_status_flag</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static int <link linkend="__main_8h_1a54619d6c6a00d3268f764c33bd352ebf">bms_c_id</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static int <link linkend="__main_8h_1a668e87eca74f2126136ee32a6964005e">bms_c_fault</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static int <link linkend="__main_8h_1ae21e58b785392a0951862c107609d059">ltc_fault</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static int <link linkend="__main_8h_1a0de2096b0657dfd13ffeb3d18ae5d65c">ltc_count</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1aad0824db126321851b9f0c49a3115de5">cellVoltagesArr</link> [24]</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1ad2b91d0118e98c42f7d552fd5d3056ed">seriesVoltage</link></para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static bool <link linkend="__main_8h_1a006c7981abf25c0944f67d017aa5fe1f">cellsReady</link></para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a283b736b2bddfc8cbec62fe0759a9cd3">thTemps</link> [10]</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static int <link linkend="__main_8h_1aefa2152d1586505d2d271edc7e9c4187">thermistorEnabled</link></para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static int <link linkend="__main_8h_1ad2bc733f382fc4bf0379382e3a15a94e">thermistorPresent</link></para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a68edb5124f79f990fb79a9e5b7a7f1e8">auxiliaryBatteryVoltage</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a6cb6d63c8afdc45f4ef149e6d3750a1c">angle_X</link> = 0.0</para>

<para>angle_X is the variable used for measuring the &quot;x-axis angle&quot; from the gyroscope. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a89aa0714a95ede6f4c623dbeb38ff019">angle_Y</link> = 0.0</para>

<para>angle_Y is the variable used for measuring the &quot;y-axis angle&quot; from the gyroscope. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a5ac66e09e5f95b02b3a99a4a2a33f0aa">Rate_Roll</link> = 0.0</para>

<para>USELESS REMOVE LATER: Rate_Roll stores the rate of the roll angle (x-axis) </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1ae4de7890b46aeb807d61f0b71efc9ffe">Rate_Pitch</link> = 0.0</para>

<para>USELESS REMOVE LATER: Rate_Pitch stores the rate of the pitch angle (y-axis) </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a537fbd46985b9026ec7d6d0360d1d4d0">Rate_Yaw</link> = 0.0</para>

<para>USELESS REMOVE LATER: Rate_Yaw stores the rate of the yaw angle (z-axis) </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a1fde90bfdfb774d5f83e5fea79c17caf">Rate_CalibrationRoll</link> = 0.0</para>

<para>USELESS REMOVE LATER: Rate_CalibrationRoll stores the rate calibration of the roll angle (x-axis) </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a474d53e2608e3f1b00990ca9a7ccc64a">Rate_CalibrationPitch</link> = 0.0</para>

<para>USELESS REMOVE LATER: Rate_CalibrationPitch stores the rate calibration of the pitch angle (y-axis) </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1af1c993c5e41ee4d2e881139640989c1a">Rate_CalibrationYaw</link> = 0.0</para>

<para>USELESS REMOVE LATER: Rate_CalibrationYaw stores the rate calibration of the pitch angle (y-axis) </para>
</listitem>
            <listitem><para>static int <link linkend="__main_8h_1a94bbee6853ba61e7fa11539e15174888">Rate_CalibrationNumber</link> = 0</para>

<para>USELESS REMOVE LATER: Rate_CalibrationNumber stores the rate calibration number) </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a93a21521d3b3e91006f1957dabab890b">Acc_X</link> = 0.0</para>

<para>USELESS REMOVE LATER: Acc_X stores the acceleration along the x-axis. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a3b4304cff5611528af473a1dfb86c345">Acc_Y</link> = 0.0</para>

<para>USELESS REMOVE LATER: Acc_Y stores the acceleration along the y-axis. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a68e2313572725be66b8d99950942dfb4">Acc_Z</link> = 0.0</para>

<para>USELESS REMOVE LATER: Acc_Z stores the acceleration along the z-axis. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a6514f0d80926dc8e4aea4c92bd86c9eb">Angle_Roll</link> = 0.0</para>

<para>USELESS REMOVE LATER: Angle_Roll stores essentially angle_X. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1acbed8fcd71fbc60a2452c5e5e9433903">Angle_Pitch</link> = 0.0</para>

<para>USELESS REMOVE LATER: Angle_Pitch stores essentially angle_Y. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1ac2f400fd7d3933dbf70df179a012817a">Kalman_AngleRoll</link> = 0.0</para>

<para>USELESS REMOVE LATER: Kalman_AngleRoll is the Kalman filter processed roll angle. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a2896dd40967cce4e4f8b65e93cc2fb9d">Kalman_UncertaintyAngleRoll</link> = 2 * 2</para>

<para>USELESS REMOVE LATER: </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1afb2a04d0a4be86d47607dea17db62631">Kalman_AnglePitch</link> = 0</para>

<para>USELESS REMOVE LATER: </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1ae5ea9a8add204eed975816b032f4db3b">Kalman_UncertaintyAnglePitch</link> = 2 * 2</para>

<para>USELESS REMOVE LATER: </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a077d47652e49b1a9d682fd58ae94ba46">Kalman_1DOutput</link> [] = {0, 0}</para>

<para>USELESS REMOVE LATER: Output of the filter [0] is angle_x, [1] is angle_y. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1ade4e42cdef2d4a9d50b3184100ad8cba">RPM</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a7facdac5aec018a06fc1443c2f90a66d">motorCurrent</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1aca95a5d67296e1cf7fd5d05296cefc5a">motorControllerBatteryVoltage</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1adca97acc6b0ff71f782f9c8a484a47b8">throttle</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a45af45f80ded31266ad90143957a4e5e">motorControllerTemp</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1adf4cca4e15700419969edf3ce2ffe6e6">motorTemp</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static int <link linkend="__main_8h_1a9e20c92d5e427acd66b85b1451d23a6b">errorMessage</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static byte <link linkend="__main_8h_1ae40c5f8677bda4442f02f482f3b50d33">controllerStatus</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static byte <link linkend="__main_8h_1a1e5e5db4f4b03ea34fcc2aaf5a334f2a">evccEnable</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a10823f3996ecbd5481190d44baa7fd8e">evccVoltage</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a283f91fe8cbd45a92dda13dd793bbbe0">evccCurrent</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static byte <link linkend="__main_8h_1a1e4f6826343fcd16576ce3c411fb2287">chargeFlag</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static byte <link linkend="__main_8h_1a5613c4060f829f65acaac2bc064ae063">chargerStatusFlag</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1ab11fffe9a473928798422de66fcde502">chargerVoltage</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static float <link linkend="__main_8h_1a8b27b4284d9d4039618e5da068c2bc7f">chargerCurrent</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static int8_t <link linkend="__main_8h_1a85ede348554a838fb67a3ceb3313be5b">chargerTemp</link> = 0</para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</listitem>
            <listitem><para>static <link linkend="__display_8h_1a2dded6e25e0cb307491fd7997b66b2a4">MeasurementScreenData</link> <link linkend="__main_8h_1a962a20f8dc1ba6934fdc04e44bde53a8">measurementData</link> = {}</para>

<para>An instance of a struct to store all display data. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_motor_stats">MotorStats</link> <link linkend="__main_8h_1a9eeb128a9907154869e9ffa78e065039">motorStats</link> = {}</para>

<para>An instance of a struct to store all motor data. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_motor_temps">MotorTemps</link> <link linkend="__main_8h_1abb61c6dc61d12b31aad7bdadd495b70a">motorTemps</link> = {}</para>

<para>An instance of a struct to store all motor temperature data. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_cell_voltages">CellVoltages</link> <link linkend="__main_8h_1afca6798677cebeeb7599ea00e1e243dd">cellVoltages</link> = {}</para>

<para>An instance of a struct to store all cell voltage data. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_b_m_s_status">BMSStatus</link> <link linkend="__main_8h_1ae0522609134711f92c96ffa8ed05e582">bmsStatus</link> = {}</para>

<para>An instance of a struct to store all bms status data. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_thermistor_temps">ThermistorTemps</link> <link linkend="__main_8h_1a18571448b101f12a60457d717dc4f953">thermistorTemps</link> = {}</para>

<para>An instance of a struct to store all thermistorTemperatures. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_charger_stats">ChargerStats</link> <link linkend="__main_8h_1aa249f1d073086c27682168bbd7dc77ee">chargerStats</link> = {}</para>

<para>An instance of a struct to store all charger stats data. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_charge_controller_stats">ChargeControllerStats</link> <link linkend="__main_8h_1a566a5d391bca1611a2bfd1d97a1aa24c">chargeControllerStats</link> = {}</para>

<para>An instance of a struct to store all charge controller stats data. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_c_a_n_task_data">CANTaskData</link> <link linkend="__main_8h_1ab1d006bdd632ad57598689186c8ce63a">canTaskData</link></para>

<para>An instance of a struct to store all CAN data, then pass it as a void pointer. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_data_logging_task_data">DataLoggingTaskData</link> <link linkend="__main_8h_1af74b66e7d389be76470292071c65f556">dataLoggingTaskData</link></para>

<para>An instance of a struct to store all dataLogging data, then pass it as a void pointer. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_pre_charge_task_data">PreChargeTaskData</link> <link linkend="__main_8h_1a695dccac97a0f45cf570237e981b2b5d">preChargeData</link> = {}</para>

<para>An instance of a struct to store all preCharge data, then pass it as a void pointer. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_c_s_v_writer">CSVWriter</link> <link linkend="__main_8h_1a74a7fab0bce9e95dfced1f40d1764e9a">motorTemperatureLog</link> = {}</para>

<para>An instance of the logging struct for motor temperatures. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_c_s_v_writer">CSVWriter</link> <link linkend="__main_8h_1ae230e041b8d09151f97b07151fdaf38c">motorControllerTemperatureLog</link> = {}</para>

<para>An instance of the logging struct for motor controller temperatures. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_c_s_v_writer">CSVWriter</link> <link linkend="__main_8h_1a4ca34bc3c27d808ebe3480bfed4b997a">motorControllerVoltageLog</link> = {}</para>

<para>An instance of the logging struct for motor controller voltage. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_c_s_v_writer">CSVWriter</link> <link linkend="__main_8h_1a3ed95fd1ffa6f914d3bb19bbb59d2cd0">motorCurrentLog</link> = {}</para>

<para>An instance of the logging struct for motor controller current. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_c_s_v_writer">CSVWriter</link> <link linkend="__main_8h_1a60f914a71f12f33ed914208fbf5be838">rpmLog</link> = {}</para>

<para>An instance of the logging struct for motor RPM. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_c_s_v_writer">CSVWriter</link> <link linkend="__main_8h_1a8941dbd7f821806a7a6f4eb705b1472b">thermistorLog</link> = {}</para>

<para>An instance of the logging struct for thermistor temperatures. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_c_s_v_writer">CSVWriter</link> <link linkend="__main_8h_1ade498aeeb82732f18af609faa0b323cb">bmsVoltageLog</link> = {}</para>

<para>An instance of the logging struct for BMS voltages. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_c_s_v_writer">CSVWriter</link> * <link linkend="__main_8h_1a9462b5ab9931c29422982609bceb3fad">logs</link> [] = {&amp;<link linkend="__main_8h_1a74a7fab0bce9e95dfced1f40d1764e9a">motorTemperatureLog</link>, &amp;<link linkend="__main_8h_1ae230e041b8d09151f97b07151fdaf38c">motorControllerTemperatureLog</link>, &amp;<link linkend="__main_8h_1a4ca34bc3c27d808ebe3480bfed4b997a">motorControllerVoltageLog</link>, &amp;<link linkend="__main_8h_1a3ed95fd1ffa6f914d3bb19bbb59d2cd0">motorCurrentLog</link>, &amp;<link linkend="__main_8h_1a60f914a71f12f33ed914208fbf5be838">rpmLog</link>, &amp;<link linkend="__main_8h_1a8941dbd7f821806a7a6f4eb705b1472b">thermistorLog</link>, &amp;<link linkend="__main_8h_1ade498aeeb82732f18af609faa0b323cb">bmsVoltageLog</link>}</para>

<para>An instance of the logging struct for storing all the above logs to pass onto dataLogging. </para>
</listitem>
            <listitem><para>unsigned long <link linkend="__main_8h_1a61d9ef65d75b66821896182b133b31de">timer</link> = millis()</para>
</listitem>
            <listitem><para>int <link linkend="__main_8h_1a40646f0d9308996b7d391cb8e0d95905">cycleCount</link> = 0</para>
</listitem>
            <listitem><para>int <link linkend="__main_8h_1ad817dda0a86c980182765da5a3cafec8">lowerUpperCells</link> = -1</para>
</listitem>
            <listitem><para>unsigned long <link linkend="__main_8h_1a548fbf99c23fe3ef17f2e1a7b0992070">ms</link> = millis()</para>
</listitem>
            <listitem><para>byte <link linkend="__main_8h_1acdca7f14bb24f1cb2aa9d0be982560b2">sdStarted</link> = 0</para>
</listitem>
            <listitem><para><link linkend="_semphr_8h_1ad88c6df4a04beedeac782918c8a332f5">SemaphoreHandle_t</link> <link linkend="__main_8h_1a76c0525d646735793add25b18043e600">spi_mutex</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>The main config file for bike firmware. This initializes all variables that are passed along to all other files as pointers. Then it creates the initial reference (there&apos;s a proper C programming term for it) for all the methods used in <link linkend="__main_8ino">Main.ino</link>. This file exists as an overall configuration for the bike firmware as all these variables can be changed to meet requirements. Like all other header files, it exists as the skeleton on which the .ino file is built. </para>

<para><formalpara><title>Author</title>

<para>Washington Superbike </para>
</formalpara>
<formalpara><title>Date</title>

<para>1-March-2023 </para>
</formalpara>
<note><title>Note</title>

<para>Main thing to note. The statement #pragma once is a compiler specific command for newer compilers in C. It is the equivalent of ifndef define statements. If you dont know what those are, please take CSE 351. To give the gist of it, you need a #pragma once or ifndef statment (in our older code) to ensure that when running the code, when you do a #include <link linkend="__main_8h">Main.h</link> and if every other file does that, the #pragma once command ensures that the first time the <link linkend="__main_8h">Main.h</link> is #included, it is properly defined, so that when a file attempts to include it again, it skips that including. If that doesn&apos;t make sense, dont worry, CSE 351, CSE 374. Please take them. They&apos;re like top 6 EE classes. Secondly, in this file all variables are static because the static keyword in C++ (which is what .ino files are technically speaking) is basically used to define global variables that are not to be removed in memory. All the variables below are the skeleton of the firmware, every file references to these variables by being passed their address and changing their value using that address. Instead of creating 10 copies when passing variables around, there&apos;s just one global copy.</para>
</note>
<para><link linkend="_todo_1_todo000008">Todo</link> 
<para>Based on refinements made for preCharge/controls.ino, remove spare and redundant variables. And just generally ALL the spare variables. <?linebreak?> <?linebreak?> Based on the changes implemented for SoC, I would add another variable for the low-voltage current sneors or any other current sensors you add <?linebreak?> <?linebreak?> Final Goal. </para>
</para></para>
<para>
Definition in file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__main_8h_1aafd615bc53c2f27720d792a6a2968209"/><section>
    <title>get_SPI_control()</title>
<indexterm><primary>get_SPI_control</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>get_SPI_control</secondary></indexterm>
<para><computeroutput>bool get_SPI_control (unsigned int ms)</computeroutput></para>
<para><note><title>Note</title>

<para>Just a basic helper method that takes control of the spiMutex which is used as an example line in <link linkend="__main_8h_1a4fc01d736fe50cf5b977f755b675f11d">setup()</link> but not actually used in the current <link linkend="_tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1">xTaskCreate()</link> methods or this RTOS in general. <?linebreak?> <?linebreak?>The purpose of a mutex is to create a sort of indication to the RTOS that there is a specific resource being used for a specific task and to not begin any other task that interrupts this specific resource, like the pins used for the SPI protocol for this case, etc. etc. <?linebreak?> <?linebreak?>Please read up on Mutex, etc. in the RTOS documentation to make sure you use it correctly. This is only necessary if there are different tasks with two different devices using the same communication protocol. </para>
</note>
</para>
<para>
Definition at line <link linkend="__main_8ino_source_1l00237">237</link> of file <link linkend="__main_8ino_source">Main.ino</link>.</para>
</section>
<anchor xml:id="__main_8h_1a3e0781915a9e0f2045e892efe59f9fdc"/><section>
    <title>getTeensy3Time()</title>
<indexterm><primary>getTeensy3Time</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>getTeensy3Time</secondary></indexterm>
<para><computeroutput>time_t getTeensy3Time ( )</computeroutput></para>
<para><note><title>Note</title>

<para>Just a basic helper method that returns the time variable that is stored in the teensy&apos;s RTC. </para>
</note>
</para>
<para>
Definition at line <link linkend="__main_8ino_source_1l00245">245</link> of file <link linkend="__main_8ino_source">Main.ino</link>.</para>
</section>
<anchor xml:id="__main_8h_1a0d7297755c0775a9b0e4f7eeeafd7c7e"/><section>
    <title>idleTask()</title>
<indexterm><primary>idleTask</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>idleTask</secondary></indexterm>
<para><computeroutput>void idleTask (void * taskData)</computeroutput></para>
<para><note><title>Note</title>

<para>Just a basic IDLE task that seems to do nothing. If triggered it blocks out for 50 CPU cycles. Doing nothing. </para>
</note>
</para>
<para>
Definition at line <link linkend="__main_8ino_source_1l00250">250</link> of file <link linkend="__main_8ino_source">Main.ino</link>.</para>
</section>
<anchor xml:id="__main_8h_1ab91267714bdf99d7b3d177f95f484157"/><section>
    <title>initializeCANStructs()</title>
<indexterm><primary>initializeCANStructs</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>initializeCANStructs</secondary></indexterm>
<para><computeroutput>void initializeCANStructs ( )</computeroutput></para>
<para><note><title>Note</title>

<para><link linkend="__main_8h_1ab91267714bdf99d7b3d177f95f484157">initializeCANStructs()</link> uses too many variables... and it packages them into the different variables that are all being updated by the CAN protocol. These are variables that are read in from the motorController, Battery Management System, thermistors, charger, and charge controller. These are then packaged in to the canTaskData variable which is passed to <link linkend="__c_a_n_8h_1a785e095da30ce4993a186804102bf2ea">canTask()</link>. <link linkend="__c_a_n_8h_1a785e095da30ce4993a186804102bf2ea">canTask()</link> updates the variable which in turn updates it for everything, allowing display to be updated with no problem (since all variables used by tasks are just pointers to the original variable that is declared in <link linkend="__main_8h">Main.h</link> and then updating one just updates everything across the board. <?linebreak?> <?linebreak?>Update this accordingly as we add more CAN items to the bike (if we ever do). </para>
</note>
</para>
<para>
Definition at line <link linkend="__main_8ino_source_1l00218">218</link> of file <link linkend="__main_8ino_source">Main.ino</link>.</para>
</section>
<anchor xml:id="__main_8h_1a128d10ba9e06eb69d1dfc91ffef935ba"/><section>
    <title>initializeDisplayStructs()</title>
<indexterm><primary>initializeDisplayStructs</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>initializeDisplayStructs</secondary></indexterm>
<para><computeroutput>void initializeDisplayStructs ( )</computeroutput></para>
<para><note><title>Note</title>

<para><link linkend="__main_8h_1a128d10ba9e06eb69d1dfc91ffef935ba">initializeDisplayStructs()</link> uses the variables: seriesVoltage, motorControllerBatteryVoltage, auxiliaryBatteryVoltage, RPM, motorControllerTemp, motorCurrent, errorMessage, chargerCurrent, chargerVoltage, bms_status_flag, evccVoltage, thTempshe and then packages them into a variable called measurementData which is taken from <link linkend="__display_8h">Display.h</link> Then the measurement data and screen variable are packaged into the displayTaskWrap variable which is passed to the displayTask as the void pointer for the task&apos;s data. </para>
</note>
</para>
<para>
Definition at line <link linkend="__main_8ino_source_1l00199">199</link> of file <link linkend="__main_8ino_source">Main.ino</link>.</para>
</section>
<anchor xml:id="__main_8h_1a797cf3c70ce7ae02bba9bfd3f6d886de"/><section>
    <title>initializeLogStructs()</title>
<indexterm><primary>initializeLogStructs</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>initializeLogStructs</secondary></indexterm>
<para><computeroutput>void initializeLogStructs ( )</computeroutput></para>
<para><note><title>Note</title>

<para><link linkend="__main_8h_1a797cf3c70ce7ae02bba9bfd3f6d886de">initializeLogStructs()</link> uses too many variables... and it packages them into different logging variables which are then passed to the &quot;logs&quot; variable which is used by the <link linkend="__data_logging_8h_1a24f7ab7e53619e5770ad9acc25b9b819">dataLoggingTask()</link>. Therefore, to add more data to datalogging or change the variables first you would need to change the corresponding variables that make up the &quot;logs&quot; varaible in <link linkend="__main_8h">Main.h</link> and then change those corresponding variables in <link linkend="__main_8h_1a797cf3c70ce7ae02bba9bfd3f6d886de">initializeLogStructs()</link>. <?linebreak?> <?linebreak?>This will be handy to the SOC team later as they implement more changes. </para>
</note>
</para>
<para>
Definition at line <link linkend="__main_8ino_source_1l00207">207</link> of file <link linkend="__main_8ino_source">Main.ino</link>.</para>
</section>
<anchor xml:id="__main_8h_1a32469c898d757b2b30c00d0546f91802"/><section>
    <title>initializePreChargeStruct()</title>
<indexterm><primary>initializePreChargeStruct</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>initializePreChargeStruct</secondary></indexterm>
<para><computeroutput>void initializePreChargeStruct ( )</computeroutput></para>
<para><note><title>Note</title>

<para><link linkend="__main_8h_1a32469c898d757b2b30c00d0546f91802">initializePreChargeStruct()</link> uses too many variables... It is primarily composed of the cellVoltages, bmsStatus, etc. which are used to shutdown or startup to bike depending on the situation it is in. The rest of the variables correspond to the bloated method we use for gyroscope reading. It is good for racing and is efficient enough, but if we ever run out of stuff to do please make it less bloated as described in the TODO at the top of the file. </para>
</note>
</para>
<para>
Definition at line <link linkend="__main_8ino_source_1l00229">229</link> of file <link linkend="__main_8ino_source">Main.ino</link>.</para>
</section>
<anchor xml:id="__main_8h_1afe461d27b9c48d5921c00d521181f12f"/><section>
    <title>loop()</title>
<indexterm><primary>loop</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>loop</secondary></indexterm>
<para><computeroutput>void loop ( )</computeroutput></para>
<para><note><title>Note</title>

<para>Arduino framework classic. <link linkend="__main_8h_1a4fc01d736fe50cf5b977f755b675f11d">setup()</link> should run once. <link linkend="__main_8h_1afe461d27b9c48d5921c00d521181f12f">loop()</link> should run forever. Doesn&apos;t work in our case because we run RTOS via <link linkend="__main_8h_1a4fc01d736fe50cf5b977f755b675f11d">setup()</link>. </para>
</note>
</para>
<para>
Definition at line <link linkend="__main_8ino_source_1l00256">256</link> of file <link linkend="__main_8ino_source">Main.ino</link>.</para>
</section>
<anchor xml:id="__main_8h_1a966fda2bc617e020cb78f814bb5514c1"/><section>
    <title>release_SPI_control()</title>
<indexterm><primary>release_SPI_control</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>release_SPI_control</secondary></indexterm>
<para><computeroutput>void release_SPI_control (void )</computeroutput></para>
<para><note><title>Note</title>

<para>Just a basic helper method releases control of the spiMutex which is used as an example line in <link linkend="__main_8h_1a4fc01d736fe50cf5b977f755b675f11d">setup()</link> but not actually used in the current <link linkend="_tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1">xTaskCreate()</link> methods or this RTOS in general. <?linebreak?> <?linebreak?>The purpose of a mutex is to create a sort of indication to the RTOS that there is a specific resource being used for a specific task and to not begin any other task that interrupts this specific resource, like the pins used for the SPI protocol for this case, etc. etc. <?linebreak?> <?linebreak?>Please read up on Mutex, etc. in the RTOS documentation to make sure you use it correctly. This is only necessary if there are different tasks with two different devices using the same communication protocol. </para>
</note>
</para>
<para>
Definition at line <link linkend="__main_8ino_source_1l00241">241</link> of file <link linkend="__main_8ino_source">Main.ino</link>.</para>
</section>
<anchor xml:id="__main_8h_1a4fc01d736fe50cf5b977f755b675f11d"/><section>
    <title>setup()</title>
<indexterm><primary>setup</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>setup</secondary></indexterm>
<para><computeroutput>void setup ( )</computeroutput></para>
<para><note><title>Note</title>

<para><link linkend="__main_8h_1a4fc01d736fe50cf5b977f755b675f11d">setup()</link> calls on all the helper methods in <link linkend="__main_8ino">Main.ino</link>. These helper methods serve to initialize all pin modes, package all variables from <link linkend="__main_8h">Main.h</link> into structs, initialize all communication protocols (as of now, just I2C), and then use those packaged structs to call on the RTOS <link linkend="_tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1">xTaskCreate()</link> to then send the variables off to various tasks with no issues. <link linkend="_tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1">xTaskCreate()</link> takes in a function name (pointer to an existing function which contains the essence of the task (these exist in the different files)), a label (string), stack size (integer/number), the parameters required for that task (a void pointer to the packaged structs from before) and lastly a task priority. There&apos;s another variable but it&apos;s kinda useless for our case and is only discussed in the detailed discussion below. <?linebreak?> <?linebreak?> Taking from the FreeRTOS documentation, the parameters serve the following DETAILED purposes. <?linebreak?> <?linebreak?>pvTaskCode aka the pointer to the function used for the task. This function is usually an infinite loop with an RTOS VTaskDelay() call which will be further elaborated on within those functions in the documentation. <?linebreak?> <?linebreak?>pcName aka the string with the funciton name. This is ususally used for debugging purposes. usStackDepth is the number of words to allocate for the task&apos;s stack (for those of you who havent had a chance to take CSE 374 or CSE 351, stack is dynamic memory, thus if any of your tasks use a lot of parameters or perform recursion, the stack size might have to be increased). Display has often been a victim of the stack size being too small in the past. <?linebreak?> <?linebreak?>pvParameters aka the void pointer to the struct composed of the variables declared in <link linkend="__main_8h">Main.h</link>. Just a simple void pointer which is passed to the task when it executes. While passing variables and being careful with memory leaks is not too much of a concern thanks to the Arduino framework, it is still important to use good practices like this void pointer task memory unit to avoid any issues (plus RTOS just requires something to be passed through anyway). <?linebreak?> <?linebreak?>uxPriority aka the priority at which the task will execute. Lower priority numbers indicate tasks with lower priority in execution. That is, while the RTOS is constantly swapping between your tasks, ensuring they execute properly, etc the higher priority tasks are given highest priority to run once the CPU is ready. Just makes sense really. <?linebreak?> <?linebreak?>pxCreatedTask is a variable that is used to pass a handle to the created task outside of the <link linkend="_tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1">xTaskCreate()</link> function. That means the ??? IDK it&apos;s not needed. </para>
</note>
</para>

<para>First this method calls on <link linkend="__main_8ino_1a31d554847ae8fdeaba2460e0395cb75f">setupPins()</link> to set certain pins to output and input. This initializes how the pins will be used and interact with peripherals for the rest of the runtime of the firmware.</para>

<para>Then this method calls on <link linkend="__main_8ino_1a128d10ba9e06eb69d1dfc91ffef935ba">initializeDisplayStructs()</link> to map the static variables from <link linkend="__main_8h">Main.h</link> from to a struct that is used for the <link linkend="__display_8ino_1a7121972a969d5d8bd9c96626cfd61b11">displayTask()</link></para>

<para>Then this method calls on <link linkend="__main_8ino_1ab91267714bdf99d7b3d177f95f484157">initializeCANStructs()</link> to map the static variables from <link linkend="__main_8h">Main.h</link> from to a struct that is used for the <link linkend="__c_a_n_8h_1a785e095da30ce4993a186804102bf2ea">canTask()</link></para>

<para>Then this method calls on <link linkend="__main_8ino_1a797cf3c70ce7ae02bba9bfd3f6d886de">initializeLogStructs()</link> to map the static variables from <link linkend="__main_8h">Main.h</link> from to a struct that is used for the <link linkend="__data_logging_8h_1a24f7ab7e53619e5770ad9acc25b9b819">dataLoggingTask()</link></para>

<para>Then this method calls on <link linkend="__main_8ino_1a32469c898d757b2b30c00d0546f91802">initializePreChargeStruct()</link> to map the static variables from <link linkend="__main_8h">Main.h</link> from to a struct that is used for the <link linkend="__pre_charge_8ino_1a2cd6f5c27d7667dbd0b6a0bc756340a3">prechargeTask()</link></para>

<para>Then this method initializes Serial communication using Serial.begin() initializing Serial at a baud rate of 115200.</para>

<para><note><title>Note</title>

<para>DISCLAIMER: When first running this code on a fresh board, the time will not properly update to Pacific Standard, or any real-looking time. Instead it will update to whatever default value is on the teensy board RTC (real-time clock). Thus, to set the Teensy RTC to the real world clock, you need to upload the sketch: <?linebreak?> <?linebreak?>File-&gt;Examples-&gt;Time-&gt;TimeTeensy3 and open the serial port. That will set the internal time to the time on the laptop I believe, or connects to the internet somehow to determine the &quot;current&quot; time. This next line calls with the statement setTime(Teensy3Clock.get()) sets the current stored time to the time stored in the internal RTC in the Teensy, allowing for Teensy time from the internal RTC (powered by the coin cell).</para>
</note>
Then this method starts the SD Card and prints the status if that works.</para>

<para>Then this method calls on the <link linkend="__display_8h_1a79b84de3ddc4f88db07ac708452e4467">setupDisplay()</link> method which just initializes variables that are used by the <link linkend="__display_8ino_1a7121972a969d5d8bd9c96626cfd61b11">displayTask()</link></para>

<para>Then this method calls on the <link linkend="__c_a_n_8h_1a833ae6516ecb5cb3f8a7bd5adbf2bd9b">setupCAN()</link> method which just initializes the CAN bus at a baud rate of 250000. And then begins the CAN bus.</para>

<para>Then this method calls on the <link linkend="__precharge_8h_1a5782bd590f95fb2269eb43a3d70c18f4">setupI2C()</link> method which just initializes the I2C communication protocol, setting the clock to 40KHz, reading in the initial values of the gyroscope, taking ~2 seconds worth of data to calibrate.</para>

<para>The main and most important function of setup is initializing the tasks using <link linkend="_tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1">xTaskCreate()</link>. The details of parameters are explained in the Note at the start of <link linkend="__main_8ino_1a4fc01d736fe50cf5b977f755b675f11d">setup()</link>. The stack sizes are edited in <link linkend="__main_8h">Main.h</link> and the priorities are logically assigned for <link linkend="__precharge_8h_1a3a618d104e1f329b2aad074b706db5c9">preChargeTask()</link> with highest priority 5, <link linkend="__c_a_n_8h_1a785e095da30ce4993a186804102bf2ea">canTask()</link> with second highest priority 4 since it contains data that can be used to trigger Off states for <link linkend="__precharge_8h_1a3a618d104e1f329b2aad074b706db5c9">preChargeTask()</link>. dataLogging() is 3, it&apos;s important to update the stored data from the race, but it&apos;s more important to shutdown the bike if batteries are dying. <link linkend="__display_8ino_1a7121972a969d5d8bd9c96626cfd61b11">displayTask()</link> is a 2 because see aforementioned reasoning for dataLogging(). <link linkend="__main_8ino_1a0d7297755c0775a9b0e4f7eeeafd7c7e">idleTask()</link> is a 1 ideally we never want to idle unless everything is taken care of and the teensy is that powerful.</para>

<para>Then, the firmware checks if the tasks passed, if they failed, it stays in a loop printing error creating tasks.</para>

<para>Lastly the method prints out that it will attempt to start the scheduler. If this succeeds, only lines from the task methods should know execute.</para>

<para>If this fails, the method prints out insufficient RAM and breaks.</para>
<para>
Definition at line <link linkend="__main_8ino_source_1l00065">65</link> of file <link linkend="__main_8ino_source">Main.ino</link>.</para>
</section>
<anchor xml:id="__main_8h_1a31d554847ae8fdeaba2460e0395cb75f"/><section>
    <title>setupPins()</title>
<indexterm><primary>setupPins</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>setupPins</secondary></indexterm>
<para><computeroutput>void setupPins ( )</computeroutput></para>
<para><note><title>Note</title>

<para><link linkend="__main_8h_1a31d554847ae8fdeaba2460e0395cb75f">setupPins()</link> calls on the Arduino library&apos;s pinMode and digitalWrite() methods to initialize pins to specific states. The variables and macros corresponding to the pin numbers are taken from the .h files of the task they serve. </para>
</note>
</para>

<para><note><title>Note</title>

<para>NOTE: SOME OF THESE PINS MAY NEED TO BE REMOVED NOW: CONTACTOR_CLOSED_LED, CONTACTOR_PRECHARGED_LED, CLOSE_CONTACTOR_BUTTON</para>
</note>
Initializes the pin corresponding to High Voltage Toggle as an input PULLUP resistor.</para>

<para>Initializes the pin corresponding to Closing the Contactor as an input PULLUP resistor.</para>

<para>Initializes the pin corresponding to the Screen reset as output and then outputs HIGH to that pin.</para>

<para>Initializes the pin corresponding to the Chip Select as output and then outputs HIGH to that pin.</para>

<para>UNSURE WHAT THE TS_CS pin is and at this point I&apos;m too scared to ask. Sets it to output and HIGH.</para>

<para>Initializes the pin corresponding to the Precharge as output and then outputs LOW to that pin.</para>

<para>Initializes the pin corresponding to the Contactor as output and then outputs LOW to that pin.</para>

<para>Initializes the pin corresponding to the Contactor Precharge-Read LED as output and then outputs LOW to that pin.</para>

<para>Initializes the pin corresponding to the Contactor-Closed LED as output and then outputs LOW to that pin.</para>
<para>
Definition at line <link linkend="__main_8ino_source_1l00162">162</link> of file <link linkend="__main_8ino_source">Main.ino</link>.</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="__main_8h_1a93a21521d3b3e91006f1957dabab890b"/><section>
    <title>Acc_X</title>
<indexterm><primary>Acc_X</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Acc_X</secondary></indexterm>
<para><computeroutput>float Acc_X = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Acc_X stores the acceleration along the x-axis. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00098">98</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a3b4304cff5611528af473a1dfb86c345"/><section>
    <title>Acc_Y</title>
<indexterm><primary>Acc_Y</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Acc_Y</secondary></indexterm>
<para><computeroutput>float Acc_Y = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Acc_Y stores the acceleration along the y-axis. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00100">100</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a68e2313572725be66b8d99950942dfb4"/><section>
    <title>Acc_Z</title>
<indexterm><primary>Acc_Z</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Acc_Z</secondary></indexterm>
<para><computeroutput>float Acc_Z = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Acc_Z stores the acceleration along the z-axis. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00102">102</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1acbed8fcd71fbc60a2452c5e5e9433903"/><section>
    <title>Angle_Pitch</title>
<indexterm><primary>Angle_Pitch</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Angle_Pitch</secondary></indexterm>
<para><computeroutput>float Angle_Pitch = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Angle_Pitch stores essentially angle_Y. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00106">106</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a6514f0d80926dc8e4aea4c92bd86c9eb"/><section>
    <title>Angle_Roll</title>
<indexterm><primary>Angle_Roll</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Angle_Roll</secondary></indexterm>
<para><computeroutput>float Angle_Roll = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Angle_Roll stores essentially angle_X. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00104">104</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a6cb6d63c8afdc45f4ef149e6d3750a1c"/><section>
    <title>angle_X</title>
<indexterm><primary>angle_X</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>angle_X</secondary></indexterm>
<para><computeroutput>float angle_X = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>angle_X is the variable used for measuring the &quot;x-axis angle&quot; from the gyroscope. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00079">79</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a89aa0714a95ede6f4c623dbeb38ff019"/><section>
    <title>angle_Y</title>
<indexterm><primary>angle_Y</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>angle_Y</secondary></indexterm>
<para><computeroutput>float angle_Y = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>angle_Y is the variable used for measuring the &quot;y-axis angle&quot; from the gyroscope. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00081">81</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a68edb5124f79f990fb79a9e5b7a7f1e8"/><section>
    <title>auxiliaryBatteryVoltage</title>
<indexterm><primary>auxiliaryBatteryVoltage</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>auxiliaryBatteryVoltage</secondary></indexterm>
<para><computeroutput>float auxiliaryBatteryVoltage = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00075">75</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a668e87eca74f2126136ee32a6964005e"/><section>
    <title>bms_c_fault</title>
<indexterm><primary>bms_c_fault</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>bms_c_fault</secondary></indexterm>
<para><computeroutput>int bms_c_fault = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00057">57</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a54619d6c6a00d3268f764c33bd352ebf"/><section>
    <title>bms_c_id</title>
<indexterm><primary>bms_c_id</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>bms_c_id</secondary></indexterm>
<para><computeroutput>int bms_c_id = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00055">55</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a04c234659b28f92e2eab7998b586bb4c"/><section>
    <title>bms_status_flag</title>
<indexterm><primary>bms_status_flag</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>bms_status_flag</secondary></indexterm>
<para><computeroutput>int bms_status_flag = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00053">53</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ae0522609134711f92c96ffa8ed05e582"/><section>
    <title>bmsStatus</title>
<indexterm><primary>bmsStatus</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>bmsStatus</secondary></indexterm>
<para><computeroutput><link linkend="_struct_b_m_s_status">BMSStatus</link> bmsStatus = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of a struct to store all bms status data. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00167">167</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ade498aeeb82732f18af609faa0b323cb"/><section>
    <title>bmsVoltageLog</title>
<indexterm><primary>bmsVoltageLog</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>bmsVoltageLog</secondary></indexterm>
<para><computeroutput><link linkend="_struct_c_s_v_writer">CSVWriter</link> bmsVoltageLog = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of the logging struct for BMS voltages. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00198">198</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ab1d006bdd632ad57598689186c8ce63a"/><section>
    <title>canTaskData</title>
<indexterm><primary>canTaskData</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>canTaskData</secondary></indexterm>
<para><computeroutput><link linkend="_struct_c_a_n_task_data">CANTaskData</link> canTaskData<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of a struct to store all CAN data, then pass it as a void pointer. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00177">177</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a006c7981abf25c0944f67d017aa5fe1f"/><section>
    <title>cellsReady</title>
<indexterm><primary>cellsReady</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>cellsReady</secondary></indexterm>
<para><computeroutput>bool cellsReady<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00067">67</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1afca6798677cebeeb7599ea00e1e243dd"/><section>
    <title>cellVoltages</title>
<indexterm><primary>cellVoltages</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>cellVoltages</secondary></indexterm>
<para><computeroutput><link linkend="_struct_cell_voltages">CellVoltages</link> cellVoltages = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of a struct to store all cell voltage data. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00165">165</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1aad0824db126321851b9f0c49a3115de5"/><section>
    <title>cellVoltagesArr</title>
<indexterm><primary>cellVoltagesArr</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>cellVoltagesArr</secondary></indexterm>
<para><computeroutput>float cellVoltagesArr[24]<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00063">63</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a566a5d391bca1611a2bfd1d97a1aa24c"/><section>
    <title>chargeControllerStats</title>
<indexterm><primary>chargeControllerStats</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>chargeControllerStats</secondary></indexterm>
<para><computeroutput><link linkend="_struct_charge_controller_stats">ChargeControllerStats</link> chargeControllerStats = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of a struct to store all charge controller stats data. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00173">173</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a1e4f6826343fcd16576ce3c411fb2287"/><section>
    <title>chargeFlag</title>
<indexterm><primary>chargeFlag</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>chargeFlag</secondary></indexterm>
<para><computeroutput>byte chargeFlag = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00148">148</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a8b27b4284d9d4039618e5da068c2bc7f"/><section>
    <title>chargerCurrent</title>
<indexterm><primary>chargerCurrent</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>chargerCurrent</secondary></indexterm>
<para><computeroutput>float chargerCurrent = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00154">154</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1aa249f1d073086c27682168bbd7dc77ee"/><section>
    <title>chargerStats</title>
<indexterm><primary>chargerStats</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>chargerStats</secondary></indexterm>
<para><computeroutput><link linkend="_struct_charger_stats">ChargerStats</link> chargerStats = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of a struct to store all charger stats data. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00171">171</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a5613c4060f829f65acaac2bc064ae063"/><section>
    <title>chargerStatusFlag</title>
<indexterm><primary>chargerStatusFlag</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>chargerStatusFlag</secondary></indexterm>
<para><computeroutput>byte chargerStatusFlag = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00150">150</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a85ede348554a838fb67a3ceb3313be5b"/><section>
    <title>chargerTemp</title>
<indexterm><primary>chargerTemp</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>chargerTemp</secondary></indexterm>
<para><computeroutput>int8_t chargerTemp = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00156">156</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ab11fffe9a473928798422de66fcde502"/><section>
    <title>chargerVoltage</title>
<indexterm><primary>chargerVoltage</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>chargerVoltage</secondary></indexterm>
<para><computeroutput>float chargerVoltage = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00152">152</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ae40c5f8677bda4442f02f482f3b50d33"/><section>
    <title>controllerStatus</title>
<indexterm><primary>controllerStatus</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>controllerStatus</secondary></indexterm>
<para><computeroutput>byte controllerStatus = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00136">136</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a40646f0d9308996b7d391cb8e0d95905"/><section>
    <title>cycleCount</title>
<indexterm><primary>cycleCount</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>cycleCount</secondary></indexterm>
<para><computeroutput>int cycleCount = 0</computeroutput></para><para>
Definition at line <link linkend="__main_8h_source_1l00204">204</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1af74b66e7d389be76470292071c65f556"/><section>
    <title>dataLoggingTaskData</title>
<indexterm><primary>dataLoggingTaskData</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>dataLoggingTaskData</secondary></indexterm>
<para><computeroutput><link linkend="_struct_data_logging_task_data">DataLoggingTaskData</link> dataLoggingTaskData<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of a struct to store all dataLogging data, then pass it as a void pointer. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00179">179</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a9e20c92d5e427acd66b85b1451d23a6b"/><section>
    <title>errorMessage</title>
<indexterm><primary>errorMessage</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>errorMessage</secondary></indexterm>
<para><computeroutput>int errorMessage = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00134">134</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a283f91fe8cbd45a92dda13dd793bbbe0"/><section>
    <title>evccCurrent</title>
<indexterm><primary>evccCurrent</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>evccCurrent</secondary></indexterm>
<para><computeroutput>float evccCurrent = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00144">144</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a1e5e5db4f4b03ea34fcc2aaf5a334f2a"/><section>
    <title>evccEnable</title>
<indexterm><primary>evccEnable</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>evccEnable</secondary></indexterm>
<para><computeroutput>byte evccEnable = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00140">140</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a10823f3996ecbd5481190d44baa7fd8e"/><section>
    <title>evccVoltage</title>
<indexterm><primary>evccVoltage</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>evccVoltage</secondary></indexterm>
<para><computeroutput>float evccVoltage = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00142">142</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a077d47652e49b1a9d682fd58ae94ba46"/><section>
    <title>Kalman_1DOutput</title>
<indexterm><primary>Kalman_1DOutput</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Kalman_1DOutput</secondary></indexterm>
<para><computeroutput>float Kalman_1DOutput[] = {0, 0}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Output of the filter [0] is angle_x, [1] is angle_y. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00118">118</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1afb2a04d0a4be86d47607dea17db62631"/><section>
    <title>Kalman_AnglePitch</title>
<indexterm><primary>Kalman_AnglePitch</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Kalman_AnglePitch</secondary></indexterm>
<para><computeroutput>float Kalman_AnglePitch = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00114">114</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ac2f400fd7d3933dbf70df179a012817a"/><section>
    <title>Kalman_AngleRoll</title>
<indexterm><primary>Kalman_AngleRoll</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Kalman_AngleRoll</secondary></indexterm>
<para><computeroutput>float Kalman_AngleRoll = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Kalman_AngleRoll is the Kalman filter processed roll angle. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00110">110</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ae5ea9a8add204eed975816b032f4db3b"/><section>
    <title>Kalman_UncertaintyAnglePitch</title>
<indexterm><primary>Kalman_UncertaintyAnglePitch</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Kalman_UncertaintyAnglePitch</secondary></indexterm>
<para><computeroutput>float Kalman_UncertaintyAnglePitch = 2 * 2<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00116">116</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a2896dd40967cce4e4f8b65e93cc2fb9d"/><section>
    <title>Kalman_UncertaintyAngleRoll</title>
<indexterm><primary>Kalman_UncertaintyAngleRoll</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Kalman_UncertaintyAngleRoll</secondary></indexterm>
<para><computeroutput>float Kalman_UncertaintyAngleRoll = 2 * 2<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00112">112</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a9462b5ab9931c29422982609bceb3fad"/><section>
    <title>logs</title>
<indexterm><primary>logs</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>logs</secondary></indexterm>
<para><computeroutput><link linkend="_struct_c_s_v_writer">CSVWriter</link>* logs[] = {&amp;<link linkend="__main_8h_1a74a7fab0bce9e95dfced1f40d1764e9a">motorTemperatureLog</link>, &amp;<link linkend="__main_8h_1ae230e041b8d09151f97b07151fdaf38c">motorControllerTemperatureLog</link>, &amp;<link linkend="__main_8h_1a4ca34bc3c27d808ebe3480bfed4b997a">motorControllerVoltageLog</link>, &amp;<link linkend="__main_8h_1a3ed95fd1ffa6f914d3bb19bbb59d2cd0">motorCurrentLog</link>, &amp;<link linkend="__main_8h_1a60f914a71f12f33ed914208fbf5be838">rpmLog</link>, &amp;<link linkend="__main_8h_1a8941dbd7f821806a7a6f4eb705b1472b">thermistorLog</link>, &amp;<link linkend="__main_8h_1ade498aeeb82732f18af609faa0b323cb">bmsVoltageLog</link>}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of the logging struct for storing all the above logs to pass onto dataLogging. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00200">200</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ad817dda0a86c980182765da5a3cafec8"/><section>
    <title>lowerUpperCells</title>
<indexterm><primary>lowerUpperCells</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>lowerUpperCells</secondary></indexterm>
<para><computeroutput>int lowerUpperCells = -1</computeroutput></para><para>
Definition at line <link linkend="__main_8h_source_1l00206">206</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a0de2096b0657dfd13ffeb3d18ae5d65c"/><section>
    <title>ltc_count</title>
<indexterm><primary>ltc_count</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>ltc_count</secondary></indexterm>
<para><computeroutput>int ltc_count = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00061">61</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ae21e58b785392a0951862c107609d059"/><section>
    <title>ltc_fault</title>
<indexterm><primary>ltc_fault</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>ltc_fault</secondary></indexterm>
<para><computeroutput>int ltc_fault = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00059">59</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a962a20f8dc1ba6934fdc04e44bde53a8"/><section>
    <title>measurementData</title>
<indexterm><primary>measurementData</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>measurementData</secondary></indexterm>
<para><computeroutput><link linkend="__display_8h_1a2dded6e25e0cb307491fd7997b66b2a4">MeasurementScreenData</link> measurementData = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of a struct to store all display data. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00159">159</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1aca95a5d67296e1cf7fd5d05296cefc5a"/><section>
    <title>motorControllerBatteryVoltage</title>
<indexterm><primary>motorControllerBatteryVoltage</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>motorControllerBatteryVoltage</secondary></indexterm>
<para><computeroutput>float motorControllerBatteryVoltage = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00126">126</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a45af45f80ded31266ad90143957a4e5e"/><section>
    <title>motorControllerTemp</title>
<indexterm><primary>motorControllerTemp</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>motorControllerTemp</secondary></indexterm>
<para><computeroutput>float motorControllerTemp = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00130">130</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ae230e041b8d09151f97b07151fdaf38c"/><section>
    <title>motorControllerTemperatureLog</title>
<indexterm><primary>motorControllerTemperatureLog</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>motorControllerTemperatureLog</secondary></indexterm>
<para><computeroutput><link linkend="_struct_c_s_v_writer">CSVWriter</link> motorControllerTemperatureLog = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of the logging struct for motor controller temperatures. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00188">188</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a4ca34bc3c27d808ebe3480bfed4b997a"/><section>
    <title>motorControllerVoltageLog</title>
<indexterm><primary>motorControllerVoltageLog</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>motorControllerVoltageLog</secondary></indexterm>
<para><computeroutput><link linkend="_struct_c_s_v_writer">CSVWriter</link> motorControllerVoltageLog = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of the logging struct for motor controller voltage. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00190">190</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a7facdac5aec018a06fc1443c2f90a66d"/><section>
    <title>motorCurrent</title>
<indexterm><primary>motorCurrent</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>motorCurrent</secondary></indexterm>
<para><computeroutput>float motorCurrent = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00124">124</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a3ed95fd1ffa6f914d3bb19bbb59d2cd0"/><section>
    <title>motorCurrentLog</title>
<indexterm><primary>motorCurrentLog</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>motorCurrentLog</secondary></indexterm>
<para><computeroutput><link linkend="_struct_c_s_v_writer">CSVWriter</link> motorCurrentLog = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of the logging struct for motor controller current. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00192">192</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a9eeb128a9907154869e9ffa78e065039"/><section>
    <title>motorStats</title>
<indexterm><primary>motorStats</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>motorStats</secondary></indexterm>
<para><computeroutput><link linkend="_struct_motor_stats">MotorStats</link> motorStats = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of a struct to store all motor data. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00161">161</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1adf4cca4e15700419969edf3ce2ffe6e6"/><section>
    <title>motorTemp</title>
<indexterm><primary>motorTemp</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>motorTemp</secondary></indexterm>
<para><computeroutput>float motorTemp = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00132">132</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a74a7fab0bce9e95dfced1f40d1764e9a"/><section>
    <title>motorTemperatureLog</title>
<indexterm><primary>motorTemperatureLog</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>motorTemperatureLog</secondary></indexterm>
<para><computeroutput><link linkend="_struct_c_s_v_writer">CSVWriter</link> motorTemperatureLog = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of the logging struct for motor temperatures. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00186">186</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1abb61c6dc61d12b31aad7bdadd495b70a"/><section>
    <title>motorTemps</title>
<indexterm><primary>motorTemps</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>motorTemps</secondary></indexterm>
<para><computeroutput><link linkend="_struct_motor_temps">MotorTemps</link> motorTemps = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of a struct to store all motor temperature data. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00163">163</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a548fbf99c23fe3ef17f2e1a7b0992070"/><section>
    <title>ms</title>
<indexterm><primary>ms</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>ms</secondary></indexterm>
<para><computeroutput>unsigned long ms = millis()</computeroutput></para><para>
Definition at line <link linkend="__main_8h_source_1l00207">207</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a695dccac97a0f45cf570237e981b2b5d"/><section>
    <title>preChargeData</title>
<indexterm><primary>preChargeData</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>preChargeData</secondary></indexterm>
<para><computeroutput><link linkend="_struct_pre_charge_task_data">PreChargeTaskData</link> preChargeData = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of a struct to store all preCharge data, then pass it as a void pointer. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00181">181</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a94bbee6853ba61e7fa11539e15174888"/><section>
    <title>Rate_CalibrationNumber</title>
<indexterm><primary>Rate_CalibrationNumber</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Rate_CalibrationNumber</secondary></indexterm>
<para><computeroutput>int Rate_CalibrationNumber = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Rate_CalibrationNumber stores the rate calibration number) </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00095">95</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a474d53e2608e3f1b00990ca9a7ccc64a"/><section>
    <title>Rate_CalibrationPitch</title>
<indexterm><primary>Rate_CalibrationPitch</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Rate_CalibrationPitch</secondary></indexterm>
<para><computeroutput>float Rate_CalibrationPitch = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Rate_CalibrationPitch stores the rate calibration of the pitch angle (y-axis) </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00091">91</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a1fde90bfdfb774d5f83e5fea79c17caf"/><section>
    <title>Rate_CalibrationRoll</title>
<indexterm><primary>Rate_CalibrationRoll</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Rate_CalibrationRoll</secondary></indexterm>
<para><computeroutput>float Rate_CalibrationRoll = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Rate_CalibrationRoll stores the rate calibration of the roll angle (x-axis) </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00089">89</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1af1c993c5e41ee4d2e881139640989c1a"/><section>
    <title>Rate_CalibrationYaw</title>
<indexterm><primary>Rate_CalibrationYaw</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Rate_CalibrationYaw</secondary></indexterm>
<para><computeroutput>float Rate_CalibrationYaw = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Rate_CalibrationYaw stores the rate calibration of the pitch angle (y-axis) </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00093">93</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ae4de7890b46aeb807d61f0b71efc9ffe"/><section>
    <title>Rate_Pitch</title>
<indexterm><primary>Rate_Pitch</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Rate_Pitch</secondary></indexterm>
<para><computeroutput>float Rate_Pitch = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Rate_Pitch stores the rate of the pitch angle (y-axis) </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00085">85</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a5ac66e09e5f95b02b3a99a4a2a33f0aa"/><section>
    <title>Rate_Roll</title>
<indexterm><primary>Rate_Roll</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Rate_Roll</secondary></indexterm>
<para><computeroutput>float Rate_Roll = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Rate_Roll stores the rate of the roll angle (x-axis) </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00083">83</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a537fbd46985b9026ec7d6d0360d1d4d0"/><section>
    <title>Rate_Yaw</title>
<indexterm><primary>Rate_Yaw</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>Rate_Yaw</secondary></indexterm>
<para><computeroutput>float Rate_Yaw = 0.0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>USELESS REMOVE LATER: Rate_Yaw stores the rate of the yaw angle (z-axis) </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00087">87</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ade4e42cdef2d4a9d50b3184100ad8cba"/><section>
    <title>RPM</title>
<indexterm><primary>RPM</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>RPM</secondary></indexterm>
<para><computeroutput>float RPM = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00122">122</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a60f914a71f12f33ed914208fbf5be838"/><section>
    <title>rpmLog</title>
<indexterm><primary>rpmLog</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>rpmLog</secondary></indexterm>
<para><computeroutput><link linkend="_struct_c_s_v_writer">CSVWriter</link> rpmLog = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of the logging struct for motor RPM. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00194">194</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1acdca7f14bb24f1cb2aa9d0be982560b2"/><section>
    <title>sdStarted</title>
<indexterm><primary>sdStarted</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>sdStarted</secondary></indexterm>
<para><computeroutput>byte sdStarted = 0</computeroutput></para><para>
Definition at line <link linkend="__main_8h_source_1l00208">208</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ad2b91d0118e98c42f7d552fd5d3056ed"/><section>
    <title>seriesVoltage</title>
<indexterm><primary>seriesVoltage</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>seriesVoltage</secondary></indexterm>
<para><computeroutput>float seriesVoltage<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00065">65</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a76c0525d646735793add25b18043e600"/><section>
    <title>spi_mutex</title>
<indexterm><primary>spi_mutex</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>spi_mutex</secondary></indexterm>
<para><computeroutput><link linkend="_semphr_8h_1ad88c6df4a04beedeac782918c8a332f5">SemaphoreHandle_t</link> spi_mutex</computeroutput></para><para>
Definition at line <link linkend="__main_8h_source_1l00210">210</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1aefa2152d1586505d2d271edc7e9c4187"/><section>
    <title>thermistorEnabled</title>
<indexterm><primary>thermistorEnabled</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>thermistorEnabled</secondary></indexterm>
<para><computeroutput>int thermistorEnabled<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00071">71</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a8941dbd7f821806a7a6f4eb705b1472b"/><section>
    <title>thermistorLog</title>
<indexterm><primary>thermistorLog</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>thermistorLog</secondary></indexterm>
<para><computeroutput><link linkend="_struct_c_s_v_writer">CSVWriter</link> thermistorLog = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of the logging struct for thermistor temperatures. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00196">196</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1ad2bc733f382fc4bf0379382e3a15a94e"/><section>
    <title>thermistorPresent</title>
<indexterm><primary>thermistorPresent</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>thermistorPresent</secondary></indexterm>
<para><computeroutput>int thermistorPresent<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00073">73</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a18571448b101f12a60457d717dc4f953"/><section>
    <title>thermistorTemps</title>
<indexterm><primary>thermistorTemps</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>thermistorTemps</secondary></indexterm>
<para><computeroutput><link linkend="_struct_thermistor_temps">ThermistorTemps</link> thermistorTemps = {}<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>An instance of a struct to store all thermistorTemperatures. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00169">169</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1adca97acc6b0ff71f782f9c8a484a47b8"/><section>
    <title>throttle</title>
<indexterm><primary>throttle</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>throttle</secondary></indexterm>
<para><computeroutput>float throttle = 0<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00128">128</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a283b736b2bddfc8cbec62fe0759a9cd3"/><section>
    <title>thTemps</title>
<indexterm><primary>thTemps</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>thTemps</secondary></indexterm>
<para><computeroutput>float thTemps[10]<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Self explanatory. Read datasheet if more info needed. </para>
</para>
<para>
Definition at line <link linkend="__main_8h_source_1l00069">69</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
<anchor xml:id="__main_8h_1a61d9ef65d75b66821896182b133b31de"/><section>
    <title>timer</title>
<indexterm><primary>timer</primary><secondary>Main.h</secondary></indexterm>
<indexterm><primary>Main.h</primary><secondary>timer</secondary></indexterm>
<para><computeroutput>unsigned long timer = millis()</computeroutput></para><para>
Definition at line <link linkend="__main_8h_source_1l00203">203</link> of file <link linkend="__main_8h_source">Main.h</link>.</para>
</section>
</section>
</section>
