<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_task_notify_give" xml:lang="en-US">
<title>xTaskNotifyGive</title>
<indexterm><primary>xTaskNotifyGive</primary></indexterm>

<para>task. h <literallayout>BaseType_t <link linkend="_task_8h_1ac60cbd05577a3e4f3c3587dd9b213930">xTaskNotifyGive( TaskHandle_t xTaskToNotify )</link>;</literallayout></para>

<para>configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro to be available.</para>

<para>When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private &quot;notification value&quot;, which is a 32-bit unsigned integer (uint32_t).</para>

<para>Events can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.</para>

<para>A notification sent to a task can optionally perform an action, such as update, overwrite or increment the task&apos;s notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.</para>

<para><link linkend="_task_8h_1ac60cbd05577a3e4f3c3587dd9b213930">xTaskNotifyGive()</link> is a helper macro intended for use when task notifications are used as light weight and faster binary or counting semaphore equivalents. Actual FreeRTOS semaphores are given using the <link linkend="_semphr_8h_1aae55761cabfa9bf85c8f4430f78c0953">xSemaphoreGive()</link> API function, the equivalent action that instead uses a task notification is <link linkend="_task_8h_1ac60cbd05577a3e4f3c3587dd9b213930">xTaskNotifyGive()</link>.</para>

<para>When task notifications are being used as a binary or counting semaphore equivalent then the task being notified should wait for the notification using the ulTaskNotificationTake() API function rather than the <link linkend="_task_8h_1a0475fcda9718f403521c270a7270ff93">xTaskNotifyWait()</link> API function.</para>

<para>See <link xlink:href="http://www.FreeRTOS.org/RTOS-task-notifications.html">http://www.FreeRTOS.org/RTOS-task-notifications.html</link> for more details.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xTaskToNotify</entry><entry>
<para>The handle of the task being notified. The handle to a task can be returned from the <link linkend="_tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1">xTaskCreate()</link> API function used to create the task, and the handle of the currently running task can be obtained by calling <link linkend="_task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc">xTaskGetCurrentTaskHandle()</link>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_task_8h_1ac60cbd05577a3e4f3c3587dd9b213930">xTaskNotifyGive()</link> is a macro that calls <link linkend="_task_8h_1a0d2d54fb8a64011dfbb54983e4ed06bd">xTaskNotify()</link> with the eAction parameter set to eIncrement - so pdPASS is always returned. </para>
</formalpara>
</para>
</section>
