<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_stream_buffer_create_static" xml:lang="en-US">
<title>xStreamBufferCreateStatic</title>
<indexterm><primary>xStreamBufferCreateStatic</primary></indexterm>

<para><link linkend="_stream__buffer_8h">stream_buffer.h</link></para>

<para><literallayout>
StreamBufferHandle_t <link linkend="_stream__buffer_8h_1a3c248575ac1b83801db605b32a118f77">xStreamBufferCreateStatic( size_t xBufferSizeBytes,
                                                size_t xTriggerLevelBytes,
                                                uint8_t *pucStreamBufferStorageArea,
                                                StaticStreamBuffer_t *pxStaticStreamBuffer )</link>;
</literallayout> Creates a new stream buffer using statically allocated memory. See <link linkend="_stream__buffer_8h_1a39aa4dd8b83e2df7ded291f863fb5fed">xStreamBufferCreate()</link> for a version that uses dynamically allocated memory.</para>

<para>configSUPPORT_STATIC_ALLOCATION must be set to 1 in <link linkend="__free_r_t_o_s_config_8h">FreeRTOSConfig.h</link> for <link linkend="_stream__buffer_8h_1a3c248575ac1b83801db605b32a118f77">xStreamBufferCreateStatic()</link> to be available.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xBufferSizeBytes</entry><entry>
<para>The size, in bytes, of the buffer pointed to by the pucStreamBufferStorageArea parameter.</para>
</entry>
                            </row>
                            <row>
<entry>xTriggerLevelBytes</entry><entry>
<para>The number of bytes that must be in the stream buffer before a task that is blocked on the stream buffer to wait for data is moved out of the blocked state. For example, if a task is blocked on a read of an empty stream buffer that has a trigger level of 1 then the task will be unblocked when a single byte is written to the buffer or the task&apos;s block time expires. As another example, if a task is blocked on a read of an empty stream buffer that has a trigger level of 10 then the task will not be unblocked until the stream buffer contains at least 10 bytes or the task&apos;s block time expires. If a reading task&apos;s block time expires before the trigger level is reached then the task will still receive however many bytes are actually available. Setting a trigger level of 0 will result in a trigger level of 1 being used. It is not valid to specify a trigger level that is greater than the buffer size.</para>
</entry>
                            </row>
                            <row>
<entry>pucStreamBufferStorageArea</entry><entry>
<para>Must point to a uint8_t array that is at least xBufferSizeBytes + 1 big. This is the array to which streams are copied when they are written to the stream buffer.</para>
</entry>
                            </row>
                            <row>
<entry>pxStaticStreamBuffer</entry><entry>
<para>Must point to a variable of type StaticStreamBuffer_t, which will be used to hold the stream buffer&apos;s data structure.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>If the stream buffer is created successfully then a handle to the created stream buffer is returned. If either pucStreamBufferStorageArea or pxStaticstreamBuffer are NULL then NULL is returned.</para>
</formalpara>
Example use: <literallayout>

// Used to dimension the array used to hold the streams.  The available space
// will actually be one less than this, so 999.
#define STORAGE_SIZE_BYTES 1000

// Defines the memory that will actually hold the streams within the stream
// buffer.
static uint8_t ucStorageBuffer[ STORAGE_SIZE_BYTES ];

// The variable used to hold the stream buffer structure.
StaticStreamBuffer_t xStreamBufferStruct;

void MyFunction( void )
{
StreamBufferHandle_t xStreamBuffer;
const size_t xTriggerLevel = 1;

    xStreamBuffer = <link linkend="_stream__buffer_8h_1a3c248575ac1b83801db605b32a118f77">xStreamBufferCreateStatic( sizeof( ucBufferStorage ),
                                               xTriggerLevel,
                                               ucBufferStorage,
                                               &amp;xStreamBufferStruct )</link>;

    // As neither the pucStreamBufferStorageArea or pxStaticStreamBuffer
    // parameters were NULL, xStreamBuffer will not be NULL, and can be used to
    // reference the created stream buffer in other stream buffer API calls.

    // Other code that uses the stream buffer can go here.
}

</literallayout> </para>
</section>
