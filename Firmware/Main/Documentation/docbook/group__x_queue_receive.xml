<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_queue_receive" xml:lang="en-US">
<title>xQueueReceive</title>
<indexterm><primary>xQueueReceive</primary></indexterm>

<para>queue. h <literallayout>
BaseType_t <link linkend="_queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9">xQueueReceive(
                             QueueHandle_t xQueue,
                             void *pvBuffer,
                             TickType_t xTicksToWait
                        )</link>;</literallayout></para>

<para>Receive an item from a queue. The item is received by copy so a buffer of adequate size must be provided. The number of bytes copied into the buffer was defined when the queue was created.</para>

<para>Successfully received items are removed from the queue.</para>

<para>This function must not be used in an interrupt service routine. See xQueueReceiveFromISR for an alternative that can.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xQueue</entry><entry>
<para>The handle to the queue from which the item is to be received.</para>
</entry>
                            </row>
                            <row>
<entry>pvBuffer</entry><entry>
<para>Pointer to the buffer into which the received item will be copied.</para>
</entry>
                            </row>
                            <row>
<entry>xTicksToWait</entry><entry>
<para>The maximum amount of time the task should block waiting for an item to receive should the queue be empty at the time of the call. <link linkend="_queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9">xQueueReceive()</link> will return immediately if xTicksToWait is zero and the queue is empty. The time is defined in tick periods so the constant portTICK_PERIOD_MS should be used to convert to real time if this is required.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if an item was successfully received from the queue, otherwise pdFALSE.</para>
</formalpara>
Example usage: <literallayout>
struct AMessage
{
   char ucMessageID;
   char ucData[ 20 ];
} xMessage;

QueueHandle_t xQueue;

// Task to create a queue and post a value.
void vATask( void *pvParameters )
{
struct AMessage *pxMessage;

   // Create a queue capable of containing 10 pointers to AMessage structures.
   // These should be passed by pointer as they contain a lot of data.
   xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );
   if( xQueue == 0 )
   {
    // Failed to create the queue.
   }

   // ...

   // Send a pointer to a struct AMessage object.  Don&apos;t block if the
   // queue is already full.
   pxMessage = &amp; xMessage;
   xQueueSend( xQueue, ( void * ) &amp;pxMessage, ( TickType_t ) 0 );

   // ... Rest of task code.
}

// Task to receive from the queue.
void vADifferentTask( void *pvParameters )
{
struct AMessage *pxRxedMessage;

   if( xQueue != 0 )
   {
    // Receive a message on the created queue.  Block for 10 ticks if a
    // message is not immediately available.
    if( xQueueReceive( xQueue, &amp;( pxRxedMessage ), ( TickType_t ) 10 ) )
    {
        // pcRxedMessage now points to the struct AMessage variable posted
        // by vATask.
    }
   }

   // ... Rest of task code.
}
</literallayout> </para>
</section>
