<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_task_8h" xml:lang="en-US">
<title>FreeRTOS/task.h File Reference</title>
<indexterm><primary>FreeRTOS/task.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;list.h&quot;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structx_t_i_m_e___o_u_t">xTIME_OUT</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structx_m_e_m_o_r_y___r_e_g_i_o_n">xMEMORY_REGION</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s">xTASK_PARAMETERS</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structx_t_a_s_k___s_t_a_t_u_s">xTASK_STATUS</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_task_8h_1a3de6ae5641d96a68aa027673b6588016">tskKERNEL_VERSION_NUMBER</link>   &quot;V10.2.0&quot;</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a790e0e16f79e71d4791435a31d5b0fc7">tskKERNEL_VERSION_MAJOR</link>   10</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1ab0b5ab04d8419227d0a5ac94af6b3639">tskKERNEL_VERSION_MINOR</link>   2</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a4cb001d5c86f4a8a5272f27227eb3247">tskKERNEL_VERSION_BUILD</link>   0</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a96fbec2d0baf0d3e958af5fc709de9d6">tskMPU_REGION_READ_ONLY</link>   ( 1UL &lt;&lt; 0UL )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1aa13782bf13a683798cda192165d8c5d6">tskMPU_REGION_READ_WRITE</link>   ( 1UL &lt;&lt; 1UL )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1ab011150da041e1e65bc271152eabba3c">tskMPU_REGION_EXECUTE_NEVER</link>   ( 1UL &lt;&lt; 2UL )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1ad300fc0b16549387b185dffa7a2dc323">tskMPU_REGION_NORMAL_MEMORY</link>   ( 1UL &lt;&lt; 3UL )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a4ce090b0f3d783e72e230647c0261f96">tskMPU_REGION_DEVICE_MEMORY</link>   ( 1UL &lt;&lt; 4UL )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a96fbec2d0baf0d3e958af5fc709de9d6">tskMPU_REGION_READ_ONLY</link>   ( 1UL &lt;&lt; 0UL )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1aa13782bf13a683798cda192165d8c5d6">tskMPU_REGION_READ_WRITE</link>   ( 1UL &lt;&lt; 1UL )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1ab011150da041e1e65bc271152eabba3c">tskMPU_REGION_EXECUTE_NEVER</link>   ( 1UL &lt;&lt; 2UL )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1ad300fc0b16549387b185dffa7a2dc323">tskMPU_REGION_NORMAL_MEMORY</link>   ( 1UL &lt;&lt; 3UL )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a4ce090b0f3d783e72e230647c0261f96">tskMPU_REGION_DEVICE_MEMORY</link>   ( 1UL &lt;&lt; 4UL )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67">tskIDLE_PRIORITY</link>   ( ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) 0U )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a767e474430db1e60056e9678763f9202">taskYIELD</link>()   <link linkend="_portmacro_8h_1ae1ff06193615f5130b5a97dc9e708fc7">portYIELD</link>()</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1ab7bf0ae866292ba8296091a9d5209689">taskENTER_CRITICAL</link>()   <link linkend="_portmacro_8h_1a8a09321ad004019f3c8d0f2e4d7224c7">portENTER_CRITICAL</link>()</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1acb27098fc27d117f720d96bfdcd2b4c8">taskENTER_CRITICAL_FROM_ISR</link>()   <link linkend="_portmacro_8h_1a31b4260dbc1823ba80b578f86eb15a98">portSET_INTERRUPT_MASK_FROM_ISR</link>()</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643">taskEXIT_CRITICAL</link>()   <link linkend="_portmacro_8h_1a529358e6147881dd881c890ade21c9bd">portEXIT_CRITICAL</link>()</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1afa2f5acc3c925b6542ecca1acf67a234">taskEXIT_CRITICAL_FROM_ISR</link>(x)   <link linkend="_portmacro_8h_1a79d65a5d0f6f9133a0739832e9d8367e">portCLEAR_INTERRUPT_MASK_FROM_ISR</link>( x )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1aa455a648c2224964ee57758b8794198e">taskDISABLE_INTERRUPTS</link>()   <link linkend="_portmacro_8h_1a6e3d10ee1a0734a647ca192523c2cfc1">portDISABLE_INTERRUPTS</link>()</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a04361ba499e91eb35324e4cba6feea17">taskENABLE_INTERRUPTS</link>()   <link linkend="_portmacro_8h_1abc47e85a6befbb47961ad5ee7aa57173">portENABLE_INTERRUPTS</link>()</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a0cad071ca127a35df93166e9ed5b6ada">taskSCHEDULER_SUSPENDED</link>   ( ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 0 )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a0923fdaae1bfe42ac5cccd9e9ddca9ed">taskSCHEDULER_NOT_STARTED</link>   ( ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 1 )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1acbb675035741787d29da475b5a887545">taskSCHEDULER_RUNNING</link>   ( ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 2 )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a0d2d54fb8a64011dfbb54983e4ed06bd">xTaskNotify</link>(xTaskToNotify,  ulValue,  eAction)   <link linkend="_tasks_8c_1ab7ac3722f088a5530f7ac58cd48a5e7a">xTaskGenericNotify</link>( ( xTaskToNotify ), ( ulValue ), ( eAction ), NULL )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1aaa80adec29a2eebbfe0a551684a0acca">xTaskNotifyAndQuery</link>(xTaskToNotify,  ulValue,  eAction,  pulPreviousNotifyValue)   <link linkend="_tasks_8c_1ab7ac3722f088a5530f7ac58cd48a5e7a">xTaskGenericNotify</link>( ( xTaskToNotify ), ( ulValue ), ( eAction ), ( pulPreviousNotifyValue ) )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a1ed9129068b96a909356bd0369c5ecb0">xTaskNotifyFromISR</link>(xTaskToNotify,  ulValue,  eAction,  pxHigherPriorityTaskWoken)   <link linkend="_tasks_8c_1a23102158140aa66fb3b9fd132cd53695">xTaskGenericNotifyFromISR</link>( ( xTaskToNotify ), ( ulValue ), ( eAction ), NULL, ( pxHigherPriorityTaskWoken ) )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1a5c491b42e243a91c7473887d1fb96dd5">xTaskNotifyAndQueryFromISR</link>(xTaskToNotify,  ulValue,  eAction,  pulPreviousNotificationValue,  pxHigherPriorityTaskWoken)   <link linkend="_tasks_8c_1a23102158140aa66fb3b9fd132cd53695">xTaskGenericNotifyFromISR</link>( ( xTaskToNotify ), ( ulValue ), ( eAction ), ( pulPreviousNotificationValue ), ( pxHigherPriorityTaskWoken ) )</para>
</listitem>
            <listitem><para>#define <link linkend="_task_8h_1ac60cbd05577a3e4f3c3587dd9b213930">xTaskNotifyGive</link>(xTaskToNotify)   <link linkend="_tasks_8c_1ab7ac3722f088a5530f7ac58cd48a5e7a">xTaskGenericNotify</link>( ( xTaskToNotify ), ( 0 ), <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233a04fb0e98d2400e4cd28f1593bc868822">eIncrement</link>, NULL )</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_structtsk_task_control_block">tskTaskControlBlock</link> * <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link>(* <link linkend="_task_8h_1af984026250bf8fece2e0068874d4661d">TaskHookFunction_t</link>) (void *)</para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structx_t_i_m_e___o_u_t">xTIME_OUT</link> <link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link></para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structx_m_e_m_o_r_y___r_e_g_i_o_n">xMEMORY_REGION</link> <link linkend="_task_8h_1abc1e4d1b3f52e2a9101487e1831b992a">MemoryRegion_t</link></para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s">xTASK_PARAMETERS</link> <link linkend="_task_8h_1a388dc3e95bc2a93a2841a8d1e49634f3">TaskParameters_t</link></para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structx_t_a_s_k___s_t_a_t_u_s">xTASK_STATUS</link> <link linkend="_task_8h_1ae5c0c4b9b2c8af5836583b2984ef5b6e">TaskStatus_t</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_task_8h_1a1749369458e2282a22e862a619a3892c">eTaskState</link> { 
<link linkend="_task_8h_1a1749369458e2282a22e862a619a3892ca83318c0d58e6b2bafaefa1be597fb8b6">eRunning</link> = 0
, <link linkend="_task_8h_1a1749369458e2282a22e862a619a3892ca8570b65f331057b2cf92c504f0a2bc83">eReady</link>
, <link linkend="_task_8h_1a1749369458e2282a22e862a619a3892cad23d72c68f43b6fff4962ad4154766af">eBlocked</link>
, <link linkend="_task_8h_1a1749369458e2282a22e862a619a3892caf35a900d49fdfc2502eefc68fdb70f72">eSuspended</link>
, 
<link linkend="_task_8h_1a1749369458e2282a22e862a619a3892cacef5c6e771d3a07f656e07a13a20ba35">eDeleted</link>
, <link linkend="_task_8h_1a1749369458e2282a22e862a619a3892cab32c771bb60dc8b502f65b81eef3bd86">eInvalid</link>
 }</para>
</listitem>
            <listitem><para>enum <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233">eNotifyAction</link> { 
<link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a">eNoAction</link> = 0
, <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab7b1af2eeee53ae78eeff37c1cb6f79b">eSetBits</link>
, <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233a04fb0e98d2400e4cd28f1593bc868822">eIncrement</link>
, <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab61fc296ef909186b5824c823b33e130">eSetValueWithOverwrite</link>
, 
<link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233acc4dd3fe71b62c751187a2c4c515abac">eSetValueWithoutOverwrite</link>
 }</para>
</listitem>
            <listitem><para>enum <link linkend="_task_8h_1afd168a210ae0f2fb0fca242860a8178e">eSleepModeStatus</link> { <link linkend="_task_8h_1afd168a210ae0f2fb0fca242860a8178eaba7b1a394c63faa14a85dbb191f1c6f9">eAbortSleep</link> = 0
, <link linkend="_task_8h_1afd168a210ae0f2fb0fca242860a8178ea2c539add8104402c6336bc33a660d1d1">eStandardSleep</link>
, <link linkend="_task_8h_1afd168a210ae0f2fb0fca242860a8178ea004c4d9f1a2619193750d0e2f18f6046">eNoTasksWaitingTimeout</link>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_task_8h_1ad889595baff9faf9efe02f3696825409">vTaskAllocateMPURegions</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, const <link linkend="_task_8h_1abc1e4d1b3f52e2a9101487e1831b992a">MemoryRegion_t</link> *const pxRegions) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a27ff4ebce26565bef136bda84201ff80">vTaskDelete</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToDelete) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1aa154068cecd7f31446a7a84af44ab1a3">vTaskDelay</link> (const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToDelay) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a067da3e949e248096ec6c01f9cb75a47">vTaskDelayUntil</link> (<link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> *const pxPreviousWakeTime, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTimeIncrement) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1afefe333df0492c8411c0094badd25185">xTaskAbortDelay</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_task_8h_1a18d1148c845f5c4bff3b9e5b2077e058">uxTaskPriorityGet</link> (const <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_task_8h_1a772bdcb1ae3cb58b0f12a172357f4a06">uxTaskPriorityGetFromISR</link> (const <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_task_8h_1a1749369458e2282a22e862a619a3892c">eTaskState</link> <link linkend="_task_8h_1a954df77397d616484edb7c58c7760b10">eTaskGetState</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1ac08c26d037d0dc685740eec9b2028715">vTaskGetInfo</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, <link linkend="_task_8h_1ae5c0c4b9b2c8af5836583b2984ef5b6e">TaskStatus_t</link> *pxTaskStatus, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xGetFreeStackSpace, <link linkend="_task_8h_1a1749369458e2282a22e862a619a3892c">eTaskState</link> eState) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a1ee31be76e326e0644dbd6ac40a787b6">vTaskPrioritySet</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxNewPriority) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a84d4e660b04630be2939d91b3c2412f8">vTaskSuspend</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToSuspend) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a84a1584f29fb7736a1aa72ad5b3e9b44">vTaskResume</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToResume) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1aefbfd37c0661c3062fafd7334bff9aed">xTaskResumeFromISR</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToResume) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1aaf9dca1065c60abdeb309d56ab7293cb">vTaskStartScheduler</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a1651e13c7ccd6273f53a62425ec79a15">vTaskEndScheduler</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a366b302eba79d10b5ee2a3756f0fcc43">vTaskSuspendAll</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1a003f8ae6d649225abd030cc76e1c7d0e">xTaskResumeAll</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> <link linkend="_task_8h_1a753ecfe23e7386066ecccad5d16422f7">xTaskGetTickCount</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> <link linkend="_task_8h_1a092be3fd5752625303c307620be523ff">xTaskGetTickCountFromISR</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a">uxTaskGetNumberOfTasks</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>char * <link linkend="_task_8h_1aedab278c23c41dcbfdf312d383bdb342">pcTaskGetName</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToQuery) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> <link linkend="_task_8h_1a45b3b1cd0227269609499beeeb8c5c26">xTaskGetHandle</link> (const char *pcNameToQuery) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_task_8h_1a799967af01d328132cde814e47733437">uxTaskGetStackHighWaterMark</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="__free_r_t_o_s_8h_1ae4e85bffd36d76cf2796092f0ccd784a">configSTACK_DEPTH_TYPE</link> <link linkend="_task_8h_1a7fd88fa038a89eb539bd41ce64a93744">uxTaskGetStackHighWaterMark2</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1ab6607e5d8a9664e3aa9fe16efa694e83">xTaskCallApplicationTaskHook</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, void *pvParameter) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> <link linkend="_task_8h_1a3d5446a4403457e855cb84b3bba5570a">xTaskGetIdleTaskHandle</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState</link> (<link linkend="_task_8h_1ae5c0c4b9b2c8af5836583b2984ef5b6e">TaskStatus_t</link> *const pxTaskStatusArray, const <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxArraySize, uint32_t *const pulTotalRunTime) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1ab87abc717f34ddced76802d12588a93d">vTaskList</link> (char *pcWriteBuffer) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a52da9b427041a48dc9f6802e10f151d4">vTaskGetRunTimeStats</link> (char *pcWriteBuffer) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> <link linkend="_task_8h_1adcf1216358a193db9dea4ccdccd85dfd">xTaskGetIdleRunTimeCounter</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1aa7bd3a4f3847b83900fd6a9f1bacfe9e">xTaskGenericNotify</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToNotify, uint32_t ulValue, <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233">eNotifyAction</link> eAction, uint32_t *pulPreviousNotificationValue) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1a959c55f7950abffbc4107ce61ca52e97">xTaskGenericNotifyFromISR</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToNotify, uint32_t ulValue, <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233">eNotifyAction</link> eAction, uint32_t *pulPreviousNotificationValue, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> *pxHigherPriorityTaskWoken) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1a0475fcda9718f403521c270a7270ff93">xTaskNotifyWait</link> (uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a4a4bcf98ad282a596e13f3f30582a11b">vTaskNotifyGiveFromISR</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToNotify, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> *pxHigherPriorityTaskWoken) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>uint32_t <link linkend="_task_8h_1a66540bef602522a01a519f776e4c07d8">ulTaskNotifyTake</link> (<link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xClearCountOnExit, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1a4cb6c908a9d2d733e9d519d7dc27bb34">xTaskNotifyStateClear</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1a978e25460ac35706f9ad30b46d9403d8">xTaskIncrementTick</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a56ae23bc0dece4522d666959902221ca">vTaskPlaceOnEventList</link> (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *const pxEventList, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c">vTaskPlaceOnUnorderedEventList</link> (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *pxEventList, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xItemValue, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1ada3eb00e16241f5b648184a406a6a6fd">vTaskPlaceOnEventListRestricted</link> (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *const pxEventList, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait, const <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xWaitIndefinitely) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06">xTaskRemoveFromEventList</link> (const <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *const pxEventList) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b">vTaskRemoveFromUnorderedEventList</link> (<link linkend="_list_8h_1a1a62d469392f9bfe2443e7efab9c8398">ListItem_t</link> *pxEventListItem, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xItemValue) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a26df422f8d635d5191a3e106fbeeed68">vTaskSwitchContext</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> <link linkend="_task_8h_1a7793b4bbe45c10d4c5104c126b89e87c">uxTaskResetEventItemValue</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> <link linkend="_task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc">xTaskGetCurrentTaskHandle</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a67155ad4ea2482b5f4597a69f2152be0">vTaskSetTimeOutState</link> (<link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link> *const pxTimeOut) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1a3b018a85d339e536a6c05748dd666a3a">xTaskCheckForTimeOut</link> (<link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link> *const pxTimeOut, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> *const pxTicksToWait) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a998c69e37431a3a32c637b31ff60089a">vTaskMissedYield</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1a0241000e08a261372186d34825a35979">xTaskGetSchedulerState</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1aa715a488a6014df5a9393ca38c5938c0">xTaskPriorityInherit</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> const pxMutexHolder) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_task_8h_1a02fe2e1419fd6c35f75a1357c5e5ce22">xTaskPriorityDisinherit</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> const pxMutexHolder) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1aa11e6a58d2534fe91ed8ee3a02c9b5e0">vTaskPriorityDisinheritAfterTimeout</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> const pxMutexHolder, <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxHighestPriorityWaitingTask) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_task_8h_1ad8bb91e2267905f0069918802fa7f8b8">uxTaskGetTaskNumber</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1ae48f006277815cb1c534284e29ca8f82">vTaskSetTaskNumber</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, const <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxHandle) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a8dda6cb26bb158dd9636873135e63912">vTaskStepTick</link> (const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToJump) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_task_8h_1afd168a210ae0f2fb0fca242860a8178e">eSleepModeStatus</link> <link linkend="_task_8h_1ad185d5a451380c4040888620d9a92ec6">eTaskConfirmSleepModeStatus</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> <link linkend="_task_8h_1a54430b124666d513049dcbf888e6935f">pvTaskIncrementMutexHeldCount</link> (void) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
            <listitem><para>void <link linkend="_task_8h_1a9bff8681d5ed262e71b92805ca0da909">vTaskInternalSetTimeOutState</link> (<link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link> *const pxTimeOut) <link linkend="_mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_task_8h_1aa455a648c2224964ee57758b8794198e"/><section>
    <title>taskDISABLE_INTERRUPTS</title>
<indexterm><primary>taskDISABLE_INTERRUPTS</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>taskDISABLE_INTERRUPTS</secondary></indexterm>
<para><computeroutput>#define taskDISABLE_INTERRUPTS( )   <link linkend="_portmacro_8h_1a6e3d10ee1a0734a647ca192523c2cfc1">portDISABLE_INTERRUPTS</link>()</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00220">220</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a04361ba499e91eb35324e4cba6feea17"/><section>
    <title>taskENABLE_INTERRUPTS</title>
<indexterm><primary>taskENABLE_INTERRUPTS</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>taskENABLE_INTERRUPTS</secondary></indexterm>
<para><computeroutput>#define taskENABLE_INTERRUPTS( )   <link linkend="_portmacro_8h_1abc47e85a6befbb47961ad5ee7aa57173">portENABLE_INTERRUPTS</link>()</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00230">230</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1ab7bf0ae866292ba8296091a9d5209689"/><section>
    <title>taskENTER_CRITICAL</title>
<indexterm><primary>taskENTER_CRITICAL</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>taskENTER_CRITICAL</secondary></indexterm>
<para><computeroutput>#define taskENTER_CRITICAL( )   <link linkend="_portmacro_8h_1a8a09321ad004019f3c8d0f2e4d7224c7">portENTER_CRITICAL</link>()</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00195">195</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1acb27098fc27d117f720d96bfdcd2b4c8"/><section>
    <title>taskENTER_CRITICAL_FROM_ISR</title>
<indexterm><primary>taskENTER_CRITICAL_FROM_ISR</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>taskENTER_CRITICAL_FROM_ISR</secondary></indexterm>
<para><computeroutput>#define taskENTER_CRITICAL_FROM_ISR( )   <link linkend="_portmacro_8h_1a31b4260dbc1823ba80b578f86eb15a98">portSET_INTERRUPT_MASK_FROM_ISR</link>()</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00196">196</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643"/><section>
    <title>taskEXIT_CRITICAL</title>
<indexterm><primary>taskEXIT_CRITICAL</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>taskEXIT_CRITICAL</secondary></indexterm>
<para><computeroutput>#define taskEXIT_CRITICAL( )   <link linkend="_portmacro_8h_1a529358e6147881dd881c890ade21c9bd">portEXIT_CRITICAL</link>()</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00210">210</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1afa2f5acc3c925b6542ecca1acf67a234"/><section>
    <title>taskEXIT_CRITICAL_FROM_ISR</title>
<indexterm><primary>taskEXIT_CRITICAL_FROM_ISR</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>taskEXIT_CRITICAL_FROM_ISR</secondary></indexterm>
<para><computeroutput>#define taskEXIT_CRITICAL_FROM_ISR( x)   <link linkend="_portmacro_8h_1a79d65a5d0f6f9133a0739832e9d8367e">portCLEAR_INTERRUPT_MASK_FROM_ISR</link>( x )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00211">211</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a0923fdaae1bfe42ac5cccd9e9ddca9ed"/><section>
    <title>taskSCHEDULER_NOT_STARTED</title>
<indexterm><primary>taskSCHEDULER_NOT_STARTED</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>taskSCHEDULER_NOT_STARTED</secondary></indexterm>
<para><computeroutput>#define taskSCHEDULER_NOT_STARTED   ( ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 1 )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00236">236</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1acbb675035741787d29da475b5a887545"/><section>
    <title>taskSCHEDULER_RUNNING</title>
<indexterm><primary>taskSCHEDULER_RUNNING</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>taskSCHEDULER_RUNNING</secondary></indexterm>
<para><computeroutput>#define taskSCHEDULER_RUNNING   ( ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 2 )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00237">237</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a0cad071ca127a35df93166e9ed5b6ada"/><section>
    <title>taskSCHEDULER_SUSPENDED</title>
<indexterm><primary>taskSCHEDULER_SUSPENDED</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>taskSCHEDULER_SUSPENDED</secondary></indexterm>
<para><computeroutput>#define taskSCHEDULER_SUSPENDED   ( ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 0 )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00235">235</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a767e474430db1e60056e9678763f9202"/><section>
    <title>taskYIELD</title>
<indexterm><primary>taskYIELD</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>taskYIELD</secondary></indexterm>
<para><computeroutput>#define taskYIELD( )   <link linkend="_portmacro_8h_1ae1ff06193615f5130b5a97dc9e708fc7">portYIELD</link>()</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00181">181</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67"/><section>
    <title>tskIDLE_PRIORITY</title>
<indexterm><primary>tskIDLE_PRIORITY</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskIDLE_PRIORITY</secondary></indexterm>
<para><computeroutput>#define tskIDLE_PRIORITY   ( ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) 0U )</computeroutput></para>
<para>Defines the priority used by the idle task. This must not be modified. </para>
<para>
Definition at line <link linkend="_task_8h_source_1l00171">171</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a4cb001d5c86f4a8a5272f27227eb3247"/><section>
    <title>tskKERNEL_VERSION_BUILD</title>
<indexterm><primary>tskKERNEL_VERSION_BUILD</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskKERNEL_VERSION_BUILD</secondary></indexterm>
<para><computeroutput>#define tskKERNEL_VERSION_BUILD   0</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00049">49</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a790e0e16f79e71d4791435a31d5b0fc7"/><section>
    <title>tskKERNEL_VERSION_MAJOR</title>
<indexterm><primary>tskKERNEL_VERSION_MAJOR</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskKERNEL_VERSION_MAJOR</secondary></indexterm>
<para><computeroutput>#define tskKERNEL_VERSION_MAJOR   10</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00047">47</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1ab0b5ab04d8419227d0a5ac94af6b3639"/><section>
    <title>tskKERNEL_VERSION_MINOR</title>
<indexterm><primary>tskKERNEL_VERSION_MINOR</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskKERNEL_VERSION_MINOR</secondary></indexterm>
<para><computeroutput>#define tskKERNEL_VERSION_MINOR   2</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00048">48</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a3de6ae5641d96a68aa027673b6588016"/><section>
    <title>tskKERNEL_VERSION_NUMBER</title>
<indexterm><primary>tskKERNEL_VERSION_NUMBER</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskKERNEL_VERSION_NUMBER</secondary></indexterm>
<para><computeroutput>#define tskKERNEL_VERSION_NUMBER   &quot;V10.2.0&quot;</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00046">46</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a4ce090b0f3d783e72e230647c0261f96"/><section>
    <title>tskMPU_REGION_DEVICE_MEMORY<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>tskMPU_REGION_DEVICE_MEMORY</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskMPU_REGION_DEVICE_MEMORY</secondary></indexterm>
<para><computeroutput>#define tskMPU_REGION_DEVICE_MEMORY   ( 1UL &lt;&lt; 4UL )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00065">65</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a4ce090b0f3d783e72e230647c0261f96"/><section>
    <title>tskMPU_REGION_DEVICE_MEMORY<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>tskMPU_REGION_DEVICE_MEMORY</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskMPU_REGION_DEVICE_MEMORY</secondary></indexterm>
<para><computeroutput>#define tskMPU_REGION_DEVICE_MEMORY   ( 1UL &lt;&lt; 4UL )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00065">65</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1ab011150da041e1e65bc271152eabba3c"/><section>
    <title>tskMPU_REGION_EXECUTE_NEVER<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>tskMPU_REGION_EXECUTE_NEVER</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskMPU_REGION_EXECUTE_NEVER</secondary></indexterm>
<para><computeroutput>#define tskMPU_REGION_EXECUTE_NEVER   ( 1UL &lt;&lt; 2UL )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00063">63</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1ab011150da041e1e65bc271152eabba3c"/><section>
    <title>tskMPU_REGION_EXECUTE_NEVER<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>tskMPU_REGION_EXECUTE_NEVER</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskMPU_REGION_EXECUTE_NEVER</secondary></indexterm>
<para><computeroutput>#define tskMPU_REGION_EXECUTE_NEVER   ( 1UL &lt;&lt; 2UL )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00063">63</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1ad300fc0b16549387b185dffa7a2dc323"/><section>
    <title>tskMPU_REGION_NORMAL_MEMORY<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>tskMPU_REGION_NORMAL_MEMORY</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskMPU_REGION_NORMAL_MEMORY</secondary></indexterm>
<para><computeroutput>#define tskMPU_REGION_NORMAL_MEMORY   ( 1UL &lt;&lt; 3UL )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00064">64</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1ad300fc0b16549387b185dffa7a2dc323"/><section>
    <title>tskMPU_REGION_NORMAL_MEMORY<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>tskMPU_REGION_NORMAL_MEMORY</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskMPU_REGION_NORMAL_MEMORY</secondary></indexterm>
<para><computeroutput>#define tskMPU_REGION_NORMAL_MEMORY   ( 1UL &lt;&lt; 3UL )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00064">64</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a96fbec2d0baf0d3e958af5fc709de9d6"/><section>
    <title>tskMPU_REGION_READ_ONLY<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>tskMPU_REGION_READ_ONLY</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskMPU_REGION_READ_ONLY</secondary></indexterm>
<para><computeroutput>#define tskMPU_REGION_READ_ONLY   ( 1UL &lt;&lt; 0UL )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00061">61</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a96fbec2d0baf0d3e958af5fc709de9d6"/><section>
    <title>tskMPU_REGION_READ_ONLY<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>tskMPU_REGION_READ_ONLY</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskMPU_REGION_READ_ONLY</secondary></indexterm>
<para><computeroutput>#define tskMPU_REGION_READ_ONLY   ( 1UL &lt;&lt; 0UL )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00061">61</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1aa13782bf13a683798cda192165d8c5d6"/><section>
    <title>tskMPU_REGION_READ_WRITE<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>tskMPU_REGION_READ_WRITE</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskMPU_REGION_READ_WRITE</secondary></indexterm>
<para><computeroutput>#define tskMPU_REGION_READ_WRITE   ( 1UL &lt;&lt; 1UL )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00062">62</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1aa13782bf13a683798cda192165d8c5d6"/><section>
    <title>tskMPU_REGION_READ_WRITE<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>tskMPU_REGION_READ_WRITE</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>tskMPU_REGION_READ_WRITE</secondary></indexterm>
<para><computeroutput>#define tskMPU_REGION_READ_WRITE   ( 1UL &lt;&lt; 1UL )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00062">62</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a0d2d54fb8a64011dfbb54983e4ed06bd"/><section>
    <title>xTaskNotify</title>
<indexterm><primary>xTaskNotify</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskNotify</secondary></indexterm>
<para><computeroutput>#define xTaskNotify( xTaskToNotify,  ulValue,  eAction)   <link linkend="_tasks_8c_1ab7ac3722f088a5530f7ac58cd48a5e7a">xTaskGenericNotify</link>( ( xTaskToNotify ), ( ulValue ), ( eAction ), NULL )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l01857">1857</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1aaa80adec29a2eebbfe0a551684a0acca"/><section>
    <title>xTaskNotifyAndQuery</title>
<indexterm><primary>xTaskNotifyAndQuery</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskNotifyAndQuery</secondary></indexterm>
<para><computeroutput>#define xTaskNotifyAndQuery( xTaskToNotify,  ulValue,  eAction,  pulPreviousNotifyValue)   <link linkend="_tasks_8c_1ab7ac3722f088a5530f7ac58cd48a5e7a">xTaskGenericNotify</link>( ( xTaskToNotify ), ( ulValue ), ( eAction ), ( pulPreviousNotifyValue ) )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l01858">1858</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a5c491b42e243a91c7473887d1fb96dd5"/><section>
    <title>xTaskNotifyAndQueryFromISR</title>
<indexterm><primary>xTaskNotifyAndQueryFromISR</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskNotifyAndQueryFromISR</secondary></indexterm>
<para><computeroutput>#define xTaskNotifyAndQueryFromISR( xTaskToNotify,  ulValue,  eAction,  pulPreviousNotificationValue,  pxHigherPriorityTaskWoken)   <link linkend="_tasks_8c_1a23102158140aa66fb3b9fd132cd53695">xTaskGenericNotifyFromISR</link>( ( xTaskToNotify ), ( ulValue ), ( eAction ), ( pulPreviousNotificationValue ), ( pxHigherPriorityTaskWoken ) )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l01949">1949</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a1ed9129068b96a909356bd0369c5ecb0"/><section>
    <title>xTaskNotifyFromISR</title>
<indexterm><primary>xTaskNotifyFromISR</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskNotifyFromISR</secondary></indexterm>
<para><computeroutput>#define xTaskNotifyFromISR( xTaskToNotify,  ulValue,  eAction,  pxHigherPriorityTaskWoken)   <link linkend="_tasks_8c_1a23102158140aa66fb3b9fd132cd53695">xTaskGenericNotifyFromISR</link>( ( xTaskToNotify ), ( ulValue ), ( eAction ), NULL, ( pxHigherPriorityTaskWoken ) )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l01948">1948</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1ac60cbd05577a3e4f3c3587dd9b213930"/><section>
    <title>xTaskNotifyGive</title>
<indexterm><primary>xTaskNotifyGive</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskNotifyGive</secondary></indexterm>
<para><computeroutput>#define xTaskNotifyGive( xTaskToNotify)   <link linkend="_tasks_8c_1ab7ac3722f088a5530f7ac58cd48a5e7a">xTaskGenericNotify</link>( ( xTaskToNotify ), ( 0 ), <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233a04fb0e98d2400e4cd28f1593bc868822">eIncrement</link>, NULL )</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l02070">2070</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_task_8h_1abc1e4d1b3f52e2a9101487e1831b992a"/><section>
    <title>MemoryRegion_t</title>
<indexterm><primary>MemoryRegion_t</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>MemoryRegion_t</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_structx_m_e_m_o_r_y___r_e_g_i_o_n">xMEMORY_REGION</link> <link linkend="_task_8h_1abc1e4d1b3f52e2a9101487e1831b992a">MemoryRegion_t</link></computeroutput></para></section>
<anchor xml:id="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef"/><section>
    <title>TaskHandle_t</title>
<indexterm><primary>TaskHandle_t</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>TaskHandle_t</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_structtsk_task_control_block">tskTaskControlBlock</link>* <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link></computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00078">78</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1af984026250bf8fece2e0068874d4661d"/><section>
    <title>TaskHookFunction_t</title>
<indexterm><primary>TaskHookFunction_t</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>TaskHookFunction_t</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link>(* TaskHookFunction_t) (void *)</computeroutput></para><para>
Definition at line <link linkend="_task_8h_source_1l00084">84</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a388dc3e95bc2a93a2841a8d1e49634f3"/><section>
    <title>TaskParameters_t</title>
<indexterm><primary>TaskParameters_t</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>TaskParameters_t</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s">xTASK_PARAMETERS</link> <link linkend="_task_8h_1a388dc3e95bc2a93a2841a8d1e49634f3">TaskParameters_t</link></computeroutput></para></section>
<anchor xml:id="_task_8h_1ae5c0c4b9b2c8af5836583b2984ef5b6e"/><section>
    <title>TaskStatus_t</title>
<indexterm><primary>TaskStatus_t</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>TaskStatus_t</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_structx_t_a_s_k___s_t_a_t_u_s">xTASK_STATUS</link> <link linkend="_task_8h_1ae5c0c4b9b2c8af5836583b2984ef5b6e">TaskStatus_t</link></computeroutput></para></section>
<anchor xml:id="_task_8h_1a558b407b5433bee1696535e3c4816bdf"/><section>
    <title>TimeOut_t</title>
<indexterm><primary>TimeOut_t</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>TimeOut_t</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_structx_t_i_m_e___o_u_t">xTIME_OUT</link> <link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link></computeroutput></para></section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233"/><section>
    <title>eNotifyAction</title>
<indexterm><primary>eNotifyAction</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eNotifyAction</secondary></indexterm>
<para><computeroutput>enum <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233">eNotifyAction</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>eNoAction</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eNoAction</secondary></indexterm>
<anchor xml:id="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a"/>eNoAction</entry><entry></entry></row><row><entry><indexterm><primary>eSetBits</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eSetBits</secondary></indexterm>
<anchor xml:id="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab7b1af2eeee53ae78eeff37c1cb6f79b"/>eSetBits</entry><entry></entry></row><row><entry><indexterm><primary>eIncrement</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eIncrement</secondary></indexterm>
<anchor xml:id="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233a04fb0e98d2400e4cd28f1593bc868822"/>eIncrement</entry><entry></entry></row><row><entry><indexterm><primary>eSetValueWithOverwrite</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eSetValueWithOverwrite</secondary></indexterm>
<anchor xml:id="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab61fc296ef909186b5824c823b33e130"/>eSetValueWithOverwrite</entry><entry></entry></row><row><entry><indexterm><primary>eSetValueWithoutOverwrite</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eSetValueWithoutOverwrite</secondary></indexterm>
<anchor xml:id="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233acc4dd3fe71b62c751187a2c4c515abac"/>eSetValueWithoutOverwrite</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_task_8h_source_1l00098">98</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1afd168a210ae0f2fb0fca242860a8178e"/><section>
    <title>eSleepModeStatus</title>
<indexterm><primary>eSleepModeStatus</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eSleepModeStatus</secondary></indexterm>
<para><computeroutput>enum <link linkend="_task_8h_1afd168a210ae0f2fb0fca242860a8178e">eSleepModeStatus</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>eAbortSleep</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eAbortSleep</secondary></indexterm>
<anchor xml:id="_task_8h_1afd168a210ae0f2fb0fca242860a8178eaba7b1a394c63faa14a85dbb191f1c6f9"/>eAbortSleep</entry><entry></entry></row><row><entry><indexterm><primary>eStandardSleep</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eStandardSleep</secondary></indexterm>
<anchor xml:id="_task_8h_1afd168a210ae0f2fb0fca242860a8178ea2c539add8104402c6336bc33a660d1d1"/>eStandardSleep</entry><entry></entry></row><row><entry><indexterm><primary>eNoTasksWaitingTimeout</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eNoTasksWaitingTimeout</secondary></indexterm>
<anchor xml:id="_task_8h_1afd168a210ae0f2fb0fca242860a8178ea004c4d9f1a2619193750d0e2f18f6046"/>eNoTasksWaitingTimeout</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_task_8h_source_1l00159">159</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
<anchor xml:id="_task_8h_1a1749369458e2282a22e862a619a3892c"/><section>
    <title>eTaskState</title>
<indexterm><primary>eTaskState</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eTaskState</secondary></indexterm>
<para><computeroutput>enum <link linkend="_task_8h_1a1749369458e2282a22e862a619a3892c">eTaskState</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>eRunning</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eRunning</secondary></indexterm>
<anchor xml:id="_task_8h_1a1749369458e2282a22e862a619a3892ca83318c0d58e6b2bafaefa1be597fb8b6"/>eRunning</entry><entry></entry></row><row><entry><indexterm><primary>eReady</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eReady</secondary></indexterm>
<anchor xml:id="_task_8h_1a1749369458e2282a22e862a619a3892ca8570b65f331057b2cf92c504f0a2bc83"/>eReady</entry><entry></entry></row><row><entry><indexterm><primary>eBlocked</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eBlocked</secondary></indexterm>
<anchor xml:id="_task_8h_1a1749369458e2282a22e862a619a3892cad23d72c68f43b6fff4962ad4154766af"/>eBlocked</entry><entry></entry></row><row><entry><indexterm><primary>eSuspended</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eSuspended</secondary></indexterm>
<anchor xml:id="_task_8h_1a1749369458e2282a22e862a619a3892caf35a900d49fdfc2502eefc68fdb70f72"/>eSuspended</entry><entry></entry></row><row><entry><indexterm><primary>eDeleted</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eDeleted</secondary></indexterm>
<anchor xml:id="_task_8h_1a1749369458e2282a22e862a619a3892cacef5c6e771d3a07f656e07a13a20ba35"/>eDeleted</entry><entry></entry></row><row><entry><indexterm><primary>eInvalid</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eInvalid</secondary></indexterm>
<anchor xml:id="_task_8h_1a1749369458e2282a22e862a619a3892cab32c771bb60dc8b502f65b81eef3bd86"/>eInvalid</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_task_8h_source_1l00087">87</link> of file <link linkend="_task_8h_source">task.h</link>.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_task_8h_1ad185d5a451380c4040888620d9a92ec6"/><section>
    <title>eTaskConfirmSleepModeStatus()</title>
<indexterm><primary>eTaskConfirmSleepModeStatus</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eTaskConfirmSleepModeStatus</secondary></indexterm>
<para><computeroutput><link linkend="_task_8h_1afd168a210ae0f2fb0fca242860a8178e">eSleepModeStatus</link> eTaskConfirmSleepModeStatus (void )</computeroutput></para></section>
<anchor xml:id="_task_8h_1a954df77397d616484edb7c58c7760b10"/><section>
    <title>eTaskGetState()</title>
<indexterm><primary>eTaskGetState</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>eTaskGetState</secondary></indexterm>
<para><computeroutput><link linkend="_task_8h_1a1749369458e2282a22e862a619a3892c">eTaskState</link> eTaskGetState (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</computeroutput></para>
<para>task. h <literallayout>eTaskState <link linkend="_task_8h_1a954df77397d616484edb7c58c7760b10">eTaskGetState( TaskHandle_t xTask )</link>;</literallayout></para>

<para>INCLUDE_eTaskGetState must be defined as 1 for this function to be available. See the configuration section for more information.</para>

<para>Obtain the state of any task. States are encoded by the eTaskState enumerated type.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xTask</entry><entry>
<para>Handle of the task to be queried.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The state of xTask at the time the function was called. Note the state of the task might change between the function being called, and the functions return value being tested by the calling task. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_tasks_8c_source_1l01378">1378</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1aedab278c23c41dcbfdf312d383bdb342"/><section>
    <title>pcTaskGetName()</title>
<indexterm><primary>pcTaskGetName</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>pcTaskGetName</secondary></indexterm>
<para><computeroutput>char * pcTaskGetName (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToQuery)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02337">2337</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a54430b124666d513049dcbf888e6935f"/><section>
    <title>pvTaskIncrementMutexHeldCount()</title>
<indexterm><primary>pvTaskIncrementMutexHeldCount</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>pvTaskIncrementMutexHeldCount</secondary></indexterm>
<para><computeroutput><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> pvTaskIncrementMutexHeldCount (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04549">4549</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a66540bef602522a01a519f776e4c07d8"/><section>
    <title>ulTaskNotifyTake()</title>
<indexterm><primary>ulTaskNotifyTake</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>ulTaskNotifyTake</secondary></indexterm>
<para><computeroutput>uint32_t ulTaskNotifyTake (<link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xClearCountOnExit, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04566">4566</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a"/><section>
    <title>uxTaskGetNumberOfTasks()</title>
<indexterm><primary>uxTaskGetNumberOfTasks</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>uxTaskGetNumberOfTasks</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxTaskGetNumberOfTasks (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02329">2329</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a799967af01d328132cde814e47733437"/><section>
    <title>uxTaskGetStackHighWaterMark()</title>
<indexterm><primary>uxTaskGetStackHighWaterMark</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>uxTaskGetStackHighWaterMark</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxTaskGetStackHighWaterMark (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</computeroutput></para>
<para><link linkend="_task_8h">task.h</link> <literallayout>UBaseType_t <link linkend="_task_8h_1a799967af01d328132cde814e47733437">uxTaskGetStackHighWaterMark( TaskHandle_t xTask )</link>;</literallayout></para>

<para>INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in <link linkend="__free_r_t_o_s_config_8h">FreeRTOSConfig.h</link> for this function to be available.</para>

<para>Returns the high water mark of the stack associated with xTask. That is, the minimum free stack space there has been (in words, so on a 32 bit machine a value of 1 means 4 bytes) since the task started. The smaller the returned number the closer the task has come to overflowing its stack.</para>

<para><link linkend="_task_8h_1a799967af01d328132cde814e47733437">uxTaskGetStackHighWaterMark()</link> and <link linkend="_task_8h_1a7fd88fa038a89eb539bd41ce64a93744">uxTaskGetStackHighWaterMark2()</link> are the same except for their return type. Using configSTACK_DEPTH_TYPE allows the user to determine the return type. It gets around the problem of the value overflowing on 8-bit types without breaking backward compatibility for applications that expect an 8-bit return type.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xTask</entry><entry>
<para>Handle of the task associated with the stack to be checked. Set xTask to NULL to check the stack of the calling task.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The smallest amount of free stack space there has been (in words, so actual spaces on the stack rather than bytes) since the task referenced by xTask was created. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_task_8h_1a7fd88fa038a89eb539bd41ce64a93744"/><section>
    <title>uxTaskGetStackHighWaterMark2()</title>
<indexterm><primary>uxTaskGetStackHighWaterMark2</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>uxTaskGetStackHighWaterMark2</secondary></indexterm>
<para><computeroutput><link linkend="__free_r_t_o_s_8h_1ae4e85bffd36d76cf2796092f0ccd784a">configSTACK_DEPTH_TYPE</link> uxTaskGetStackHighWaterMark2 (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</computeroutput></para>
<para><link linkend="_task_8h">task.h</link> <literallayout>configSTACK_DEPTH_TYPE <link linkend="_task_8h_1a7fd88fa038a89eb539bd41ce64a93744">uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )</link>;</literallayout></para>

<para>INCLUDE_uxTaskGetStackHighWaterMark2 must be set to 1 in <link linkend="__free_r_t_o_s_config_8h">FreeRTOSConfig.h</link> for this function to be available.</para>

<para>Returns the high water mark of the stack associated with xTask. That is, the minimum free stack space there has been (in words, so on a 32 bit machine a value of 1 means 4 bytes) since the task started. The smaller the returned number the closer the task has come to overflowing its stack.</para>

<para><link linkend="_task_8h_1a799967af01d328132cde814e47733437">uxTaskGetStackHighWaterMark()</link> and <link linkend="_task_8h_1a7fd88fa038a89eb539bd41ce64a93744">uxTaskGetStackHighWaterMark2()</link> are the same except for their return type. Using configSTACK_DEPTH_TYPE allows the user to determine the return type. It gets around the problem of the value overflowing on 8-bit types without breaking backward compatibility for applications that expect an 8-bit return type.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xTask</entry><entry>
<para>Handle of the task associated with the stack to be checked. Set xTask to NULL to check the stack of the calling task.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The smallest amount of free stack space there has been (in words, so actual spaces on the stack rather than bytes) since the task referenced by xTask was created. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d"/><section>
    <title>uxTaskGetSystemState()</title>
<indexterm><primary>uxTaskGetSystemState</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>uxTaskGetSystemState</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxTaskGetSystemState (<link linkend="_task_8h_1ae5c0c4b9b2c8af5836583b2984ef5b6e">TaskStatus_t</link> *const pxTaskStatusArray, const <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxArraySize, uint32_t *const pulTotalRunTime)</computeroutput></para>
<para>configUSE_TRACE_FACILITY must be defined as 1 in <link linkend="__free_r_t_o_s_config_8h">FreeRTOSConfig.h</link> for <link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState()</link> to be available.</para>

<para><link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState()</link> populates an TaskStatus_t structure for each task in the system. TaskStatus_t structures contain, among other things, members for the task handle, task name, task priority, task state, and total amount of run time consumed by the task. See the TaskStatus_t structure definition in this file for the full member list.</para>

<para>NOTE: This function is intended for debugging use only as its use results in the scheduler remaining suspended for an extended period.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pxTaskStatusArray</entry><entry>
<para>A pointer to an array of TaskStatus_t structures. The array must contain at least one TaskStatus_t structure for each task that is under the control of the RTOS. The number of tasks under the control of the RTOS can be determined using the <link linkend="_task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a">uxTaskGetNumberOfTasks()</link> API function.</para>
</entry>
                            </row>
                            <row>
<entry>uxArraySize</entry><entry>
<para>The size of the array pointed to by the pxTaskStatusArray parameter. The size is specified as the number of indexes in the array, or the number of TaskStatus_t structures contained in the array, not by the number of bytes in the array.</para>
</entry>
                            </row>
                            <row>
<entry>pulTotalRunTime</entry><entry>
<para>If configGENERATE_RUN_TIME_STATS is set to 1 in <link linkend="__free_r_t_o_s_config_8h">FreeRTOSConfig.h</link> then *pulTotalRunTime is set by <link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState()</link> to the total run time (as defined by the run time stats clock, see <link xlink:href="http://www.freertos.org/rtos-run-time-stats.html">http://www.freertos.org/rtos-run-time-stats.html</link>) since the target booted. pulTotalRunTime can be set to NULL to omit the total run time information.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The number of TaskStatus_t structures that were populated by <link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState()</link>. This should equal the number returned by the <link linkend="_task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a">uxTaskGetNumberOfTasks()</link> API function, but will be zero if the value passed in the uxArraySize parameter was too small.</para>
</formalpara>
Example usage: <literallayout>
 // This example demonstrates how a human readable table of run time stats
 // information is generated from raw data provided by <link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState()</link>.
 // The human readable table is written to pcWriteBuffer
 void <link linkend="_task_8h_1a52da9b427041a48dc9f6802e10f151d4">vTaskGetRunTimeStats( char *pcWriteBuffer )</link>
 {
 TaskStatus_t *pxTaskStatusArray;
 volatile UBaseType_t uxArraySize, x;
 uint32_t ulTotalRunTime, ulStatsAsPercentage;

    // Make sure the write buffer does not contain a string.
    *pcWriteBuffer = 0x00;

    // Take a snapshot of the number of tasks in case it changes while this
    // function is executing.
    uxArraySize = <link linkend="_task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a">uxTaskGetNumberOfTasks()</link>;

    // Allocate a TaskStatus_t structure for each task.  An array could be
    // allocated statically at compile time.
    pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );

    if( pxTaskStatusArray != NULL )
    {
        // Generate raw status information about each task.
        uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &amp;ulTotalRunTime );

        // For percentage calculations.
        ulTotalRunTime /= 100UL;

        // Avoid divide by zero errors.
        if( ulTotalRunTime &gt; 0 )
        {
            // For each populated position in the pxTaskStatusArray array,
            // format the raw data as human readable ASCII data
            for( x = 0; x &lt; uxArraySize; x++ )
            {
                // What percentage of the total run time has the task used?
                // This will always be rounded down to the nearest integer.
                // ulTotalRunTimeDiv100 has already been divided by 100.
                ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;

                if( ulStatsAsPercentage &gt; 0UL )
                {
                    sprintf( pcWriteBuffer, &quot;%s\t\t%lu\t\t%lu%%\r\n&quot;, pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );
                }
                else
                {
                    // If the percentage is zero here then the task has
                    // consumed less than 1% of the total run time.
                    sprintf( pcWriteBuffer, &quot;%s\t\t%lu\t\t&lt;1%%\r\n&quot;, pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );
                }

                pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
            }
        }

        // The array is no longer needed, free the memory it consumes.
        vPortFree( pxTaskStatusArray );
    }
 }
 </literallayout> </para>
<para>
Definition at line <link linkend="_tasks_8c_source_1l02484">2484</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1ad8bb91e2267905f0069918802fa7f8b8"/><section>
    <title>uxTaskGetTaskNumber()</title>
<indexterm><primary>uxTaskGetTaskNumber</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>uxTaskGetTaskNumber</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxTaskGetTaskNumber (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03286">3286</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a18d1148c845f5c4bff3b9e5b2077e058"/><section>
    <title>uxTaskPriorityGet()</title>
<indexterm><primary>uxTaskPriorityGet</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>uxTaskPriorityGet</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxTaskPriorityGet (const <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01470">1470</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a772bdcb1ae3cb58b0f12a172357f4a06"/><section>
    <title>uxTaskPriorityGetFromISR()</title>
<indexterm><primary>uxTaskPriorityGetFromISR</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>uxTaskPriorityGetFromISR</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxTaskPriorityGetFromISR (const <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</computeroutput></para>
<para>task. h <literallayout>UBaseType_t <link linkend="_task_8h_1a772bdcb1ae3cb58b0f12a172357f4a06">uxTaskPriorityGetFromISR( const TaskHandle_t xTask )</link>;</literallayout></para>

<para>A version of <link linkend="_task_8h_1a18d1148c845f5c4bff3b9e5b2077e058">uxTaskPriorityGet()</link> that can be used from an ISR. </para>
<para>
Definition at line <link linkend="_tasks_8c_source_1l01492">1492</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a7793b4bbe45c10d4c5104c126b89e87c"/><section>
    <title>uxTaskResetEventItemValue()</title>
<indexterm><primary>uxTaskResetEventItemValue</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>uxTaskResetEventItemValue</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> uxTaskResetEventItemValue (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04533">4533</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1ad889595baff9faf9efe02f3696825409"/><section>
    <title>vTaskAllocateMPURegions()</title>
<indexterm><primary>vTaskAllocateMPURegions</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskAllocateMPURegions</secondary></indexterm>
<para><computeroutput>void vTaskAllocateMPURegions (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, const <link linkend="_task_8h_1abc1e4d1b3f52e2a9101487e1831b992a">MemoryRegion_t</link> *const pxRegions)</computeroutput></para></section>
<anchor xml:id="_task_8h_1aa154068cecd7f31446a7a84af44ab1a3"/><section>
    <title>vTaskDelay()</title>
<indexterm><primary>vTaskDelay</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskDelay</secondary></indexterm>
<para><computeroutput>void vTaskDelay (const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToDelay)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01333">1333</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a067da3e949e248096ec6c01f9cb75a47"/><section>
    <title>vTaskDelayUntil()</title>
<indexterm><primary>vTaskDelayUntil</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskDelayUntil</secondary></indexterm>
<para><computeroutput>void vTaskDelayUntil (<link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> *const pxPreviousWakeTime, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTimeIncrement)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01249">1249</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a27ff4ebce26565bef136bda84201ff80"/><section>
    <title>vTaskDelete()</title>
<indexterm><primary>vTaskDelete</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskDelete</secondary></indexterm>
<para><computeroutput>void vTaskDelete (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToDelete)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01157">1157</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a1651e13c7ccd6273f53a62425ec79a15"/><section>
    <title>vTaskEndScheduler()</title>
<indexterm><primary>vTaskEndScheduler</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskEndScheduler</secondary></indexterm>
<para><computeroutput>void vTaskEndScheduler (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02089">2089</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1ac08c26d037d0dc685740eec9b2028715"/><section>
    <title>vTaskGetInfo()</title>
<indexterm><primary>vTaskGetInfo</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskGetInfo</secondary></indexterm>
<para><computeroutput>void vTaskGetInfo (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, <link linkend="_task_8h_1ae5c0c4b9b2c8af5836583b2984ef5b6e">TaskStatus_t</link> * pxTaskStatus, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xGetFreeStackSpace, <link linkend="_task_8h_1a1749369458e2282a22e862a619a3892c">eTaskState</link> eState)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03609">3609</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a52da9b427041a48dc9f6802e10f151d4"/><section>
    <title>vTaskGetRunTimeStats()</title>
<indexterm><primary>vTaskGetRunTimeStats</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskGetRunTimeStats</secondary></indexterm>
<para><computeroutput>void vTaskGetRunTimeStats (char * pcWriteBuffer)</computeroutput></para></section>
<anchor xml:id="_task_8h_1a9bff8681d5ed262e71b92805ca0da909"/><section>
    <title>vTaskInternalSetTimeOutState()</title>
<indexterm><primary>vTaskInternalSetTimeOutState</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskInternalSetTimeOutState</secondary></indexterm>
<para><computeroutput>void vTaskInternalSetTimeOutState (<link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link> *const pxTimeOut)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03207">3207</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1ab87abc717f34ddced76802d12588a93d"/><section>
    <title>vTaskList()</title>
<indexterm><primary>vTaskList</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskList</secondary></indexterm>
<para><computeroutput>void vTaskList (char * pcWriteBuffer)</computeroutput></para></section>
<anchor xml:id="_task_8h_1a998c69e37431a3a32c637b31ff60089a"/><section>
    <title>vTaskMissedYield()</title>
<indexterm><primary>vTaskMissedYield</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskMissedYield</secondary></indexterm>
<para><computeroutput>void vTaskMissedYield (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03278">3278</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a4a4bcf98ad282a596e13f3f30582a11b"/><section>
    <title>vTaskNotifyGiveFromISR()</title>
<indexterm><primary>vTaskNotifyGiveFromISR</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskNotifyGiveFromISR</secondary></indexterm>
<para><computeroutput>void vTaskNotifyGiveFromISR (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToNotify, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> * pxHigherPriorityTaskWoken)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04957">4957</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a56ae23bc0dece4522d666959902221ca"/><section>
    <title>vTaskPlaceOnEventList()</title>
<indexterm><primary>vTaskPlaceOnEventList</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskPlaceOnEventList</secondary></indexterm>
<para><computeroutput>void vTaskPlaceOnEventList (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *const pxEventList, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03019">3019</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1ada3eb00e16241f5b648184a406a6a6fd"/><section>
    <title>vTaskPlaceOnEventListRestricted()</title>
<indexterm><primary>vTaskPlaceOnEventListRestricted</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskPlaceOnEventListRestricted</secondary></indexterm>
<para><computeroutput>void vTaskPlaceOnEventListRestricted (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *const pxEventList, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait, const <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xWaitIndefinitely)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03062">3062</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c"/><section>
    <title>vTaskPlaceOnUnorderedEventList()</title>
<indexterm><primary>vTaskPlaceOnUnorderedEventList</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskPlaceOnUnorderedEventList</secondary></indexterm>
<para><computeroutput>void vTaskPlaceOnUnorderedEventList (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> * pxEventList, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xItemValue, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03036">3036</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1aa11e6a58d2534fe91ed8ee3a02c9b5e0"/><section>
    <title>vTaskPriorityDisinheritAfterTimeout()</title>
<indexterm><primary>vTaskPriorityDisinheritAfterTimeout</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskPriorityDisinheritAfterTimeout</secondary></indexterm>
<para><computeroutput>void vTaskPriorityDisinheritAfterTimeout (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> const pxMutexHolder, <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxHighestPriorityWaitingTask)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04118">4118</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a1ee31be76e326e0644dbd6ac40a787b6"/><section>
    <title>vTaskPrioritySet()</title>
<indexterm><primary>vTaskPrioritySet</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskPrioritySet</secondary></indexterm>
<para><computeroutput>void vTaskPrioritySet (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxNewPriority)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01532">1532</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b"/><section>
    <title>vTaskRemoveFromUnorderedEventList()</title>
<indexterm><primary>vTaskRemoveFromUnorderedEventList</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskRemoveFromUnorderedEventList</secondary></indexterm>
<para><computeroutput>void vTaskRemoveFromUnorderedEventList (<link linkend="_list_8h_1a1a62d469392f9bfe2443e7efab9c8398">ListItem_t</link> * pxEventListItem, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xItemValue)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03161">3161</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a84a1584f29fb7736a1aa72ad5b3e9b44"/><section>
    <title>vTaskResume()</title>
<indexterm><primary>vTaskResume</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskResume</secondary></indexterm>
<para><computeroutput>void vTaskResume (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToResume)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01843">1843</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1ae48f006277815cb1c534284e29ca8f82"/><section>
    <title>vTaskSetTaskNumber()</title>
<indexterm><primary>vTaskSetTaskNumber</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskSetTaskNumber</secondary></indexterm>
<para><computeroutput>void vTaskSetTaskNumber (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, const <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxHandle)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03309">3309</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a67155ad4ea2482b5f4597a69f2152be0"/><section>
    <title>vTaskSetTimeOutState()</title>
<indexterm><primary>vTaskSetTimeOutState</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskSetTimeOutState</secondary></indexterm>
<para><computeroutput>void vTaskSetTimeOutState (<link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link> *const pxTimeOut)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03195">3195</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1aaf9dca1065c60abdeb309d56ab7293cb"/><section>
    <title>vTaskStartScheduler()</title>
<indexterm><primary>vTaskStartScheduler</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskStartScheduler</secondary></indexterm>
<para><computeroutput>void vTaskStartScheduler (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01967">1967</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a8dda6cb26bb158dd9636873135e63912"/><section>
    <title>vTaskStepTick()</title>
<indexterm><primary>vTaskStepTick</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskStepTick</secondary></indexterm>
<para><computeroutput>void vTaskStepTick (const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToJump)</computeroutput></para></section>
<anchor xml:id="_task_8h_1a84d4e660b04630be2939d91b3c2412f8"/><section>
    <title>vTaskSuspend()</title>
<indexterm><primary>vTaskSuspend</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskSuspend</secondary></indexterm>
<para><computeroutput>void vTaskSuspend (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToSuspend)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01696">1696</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a366b302eba79d10b5ee2a3756f0fcc43"/><section>
    <title>vTaskSuspendAll()</title>
<indexterm><primary>vTaskSuspendAll</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskSuspendAll</secondary></indexterm>
<para><computeroutput>void vTaskSuspendAll (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02100">2100</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a26df422f8d635d5191a3e106fbeeed68"/><section>
    <title>vTaskSwitchContext()</title>
<indexterm><primary>vTaskSwitchContext</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>vTaskSwitchContext</secondary></indexterm>
<para><computeroutput>void vTaskSwitchContext (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02946">2946</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1afefe333df0492c8411c0094badd25185"/><section>
    <title>xTaskAbortDelay()</title>
<indexterm><primary>xTaskAbortDelay</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskAbortDelay</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskAbortDelay (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</computeroutput></para></section>
<anchor xml:id="_task_8h_1ab6607e5d8a9664e3aa9fe16efa694e83"/><section>
    <title>xTaskCallApplicationTaskHook()</title>
<indexterm><primary>xTaskCallApplicationTaskHook</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskCallApplicationTaskHook</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskCallApplicationTaskHook (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, void * pvParameter)</computeroutput></para>
<para><link linkend="_task_8h">task.h</link> <literallayout>BaseType_t <link linkend="_task_8h_1ab6607e5d8a9664e3aa9fe16efa694e83">xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )</link>;</literallayout></para>

<para>Calls the hook function associated with xTask. Passing xTask as NULL has the effect of calling the Running tasks (the calling task) hook function.</para>

<para>pvParameter is passed to the hook function for the task to interpret as it wants. The return value is the value returned by the task hook function registered by the user. </para>
</section>
<anchor xml:id="_task_8h_1a3b018a85d339e536a6c05748dd666a3a"/><section>
    <title>xTaskCheckForTimeOut()</title>
<indexterm><primary>xTaskCheckForTimeOut</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskCheckForTimeOut</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskCheckForTimeOut (<link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link> *const pxTimeOut, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> *const pxTicksToWait)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03215">3215</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1aa7bd3a4f3847b83900fd6a9f1bacfe9e"/><section>
    <title>xTaskGenericNotify()</title>
<indexterm><primary>xTaskGenericNotify</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskGenericNotify</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskGenericNotify (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToNotify, uint32_t ulValue, <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233">eNotifyAction</link> eAction, uint32_t * pulPreviousNotificationValue)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04714">4714</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a959c55f7950abffbc4107ce61ca52e97"/><section>
    <title>xTaskGenericNotifyFromISR()</title>
<indexterm><primary>xTaskGenericNotifyFromISR</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskGenericNotifyFromISR</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskGenericNotifyFromISR (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToNotify, uint32_t ulValue, <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233">eNotifyAction</link> eAction, uint32_t * pulPreviousNotificationValue, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> * pxHigherPriorityTaskWoken)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04828">4828</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc"/><section>
    <title>xTaskGetCurrentTaskHandle()</title>
<indexterm><primary>xTaskGetCurrentTaskHandle</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskGetCurrentTaskHandle</secondary></indexterm>
<para><computeroutput><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskGetCurrentTaskHandle (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03906">3906</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a45b3b1cd0227269609499beeeb8c5c26"/><section>
    <title>xTaskGetHandle()</title>
<indexterm><primary>xTaskGetHandle</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskGetHandle</secondary></indexterm>
<para><computeroutput><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskGetHandle (const char * pcNameToQuery)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02419">2419</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1adcf1216358a193db9dea4ccdccd85dfd"/><section>
    <title>xTaskGetIdleRunTimeCounter()</title>
<indexterm><primary>xTaskGetIdleRunTimeCounter</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskGetIdleRunTimeCounter</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTaskGetIdleRunTimeCounter (void )</computeroutput></para></section>
<anchor xml:id="_task_8h_1a3d5446a4403457e855cb84b3bba5570a"/><section>
    <title>xTaskGetIdleTaskHandle()</title>
<indexterm><primary>xTaskGetIdleTaskHandle</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskGetIdleTaskHandle</secondary></indexterm>
<para><computeroutput><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskGetIdleTaskHandle (void )</computeroutput></para>
<para><link linkend="_task_8h_1a3d5446a4403457e855cb84b3bba5570a">xTaskGetIdleTaskHandle()</link> is only available if INCLUDE_xTaskGetIdleTaskHandle is set to 1 in <link linkend="__free_r_t_o_s_config_8h">FreeRTOSConfig.h</link>.</para>

<para>Simply returns the handle of the idle task. It is not valid to call <link linkend="_task_8h_1a3d5446a4403457e855cb84b3bba5570a">xTaskGetIdleTaskHandle()</link> before the scheduler has been started. </para>
</section>
<anchor xml:id="_task_8h_1a0241000e08a261372186d34825a35979"/><section>
    <title>xTaskGetSchedulerState()</title>
<indexterm><primary>xTaskGetSchedulerState</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskGetSchedulerState</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskGetSchedulerState (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03923">3923</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a753ecfe23e7386066ecccad5d16422f7"/><section>
    <title>xTaskGetTickCount()</title>
<indexterm><primary>xTaskGetTickCount</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskGetTickCount</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTaskGetTickCount (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02283">2283</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a092be3fd5752625303c307620be523ff"/><section>
    <title>xTaskGetTickCountFromISR()</title>
<indexterm><primary>xTaskGetTickCountFromISR</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskGetTickCountFromISR</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTaskGetTickCountFromISR (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02298">2298</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a978e25460ac35706f9ad30b46d9403d8"/><section>
    <title>xTaskIncrementTick()</title>
<indexterm><primary>xTaskIncrementTick</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskIncrementTick</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskIncrementTick (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02664">2664</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a4cb6c908a9d2d733e9d519d7dc27bb34"/><section>
    <title>xTaskNotifyStateClear()</title>
<indexterm><primary>xTaskNotifyStateClear</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskNotifyStateClear</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskNotifyStateClear (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l05044">5044</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a0475fcda9718f403521c270a7270ff93"/><section>
    <title>xTaskNotifyWait()</title>
<indexterm><primary>xTaskNotifyWait</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskNotifyWait</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskNotifyWait (uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t * pulNotificationValue, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04634">4634</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a02fe2e1419fd6c35f75a1357c5e5ce22"/><section>
    <title>xTaskPriorityDisinherit()</title>
<indexterm><primary>xTaskPriorityDisinherit</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskPriorityDisinherit</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskPriorityDisinherit (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> const pxMutexHolder)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04038">4038</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1aa715a488a6014df5a9393ca38c5938c0"/><section>
    <title>xTaskPriorityInherit()</title>
<indexterm><primary>xTaskPriorityInherit</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskPriorityInherit</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskPriorityInherit (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> const pxMutexHolder)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03951">3951</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06"/><section>
    <title>xTaskRemoveFromEventList()</title>
<indexterm><primary>xTaskRemoveFromEventList</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskRemoveFromEventList</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskRemoveFromEventList (const <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *const pxEventList)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03093">3093</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1a003f8ae6d649225abd030cc76e1c7d0e"/><section>
    <title>xTaskResumeAll()</title>
<indexterm><primary>xTaskResumeAll</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskResumeAll</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskResumeAll (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02173">2173</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_task_8h_1aefbfd37c0661c3062fafd7334bff9aed"/><section>
    <title>xTaskResumeFromISR()</title>
<indexterm><primary>xTaskResumeFromISR</primary><secondary>task.h</secondary></indexterm>
<indexterm><primary>task.h</primary><secondary>xTaskResumeFromISR</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskResumeFromISR (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToResume)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01897">1897</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
</section>
</section>
