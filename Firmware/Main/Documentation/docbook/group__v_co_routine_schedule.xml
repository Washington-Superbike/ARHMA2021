<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__v_co_routine_schedule" xml:lang="en-US">
<title>vCoRoutineSchedule</title>
<indexterm><primary>vCoRoutineSchedule</primary></indexterm>

<para>croutine. h <literallayout>
void <link linkend="_croutine_8h_1a5333c649a2c063006ca3cd7a3b5b9240">vCoRoutineSchedule( void )</link>;</literallayout></para>

<para>Run a co-routine.</para>

<para><link linkend="_croutine_8h_1a5333c649a2c063006ca3cd7a3b5b9240">vCoRoutineSchedule()</link> executes the highest priority co-routine that is able to run. The co-routine will execute until it either blocks, yields or is preempted by a task. Co-routines execute cooperatively so one co-routine cannot be preempted by another, but can be preempted by a task.</para>

<para>If an application comprises of both tasks and co-routines then vCoRoutineSchedule should be called from the idle task (in an idle task hook).</para>

<para>Example usage: <literallayout>
// This idle task hook will schedule a co-routine each time it is called.
// The rest of the idle task will execute between co-routine calls.
void vApplicationIdleHook( void )
{
   <link linkend="_croutine_8h_1a5333c649a2c063006ca3cd7a3b5b9240">vCoRoutineSchedule()</link>;
}

// Alternatively, if you do not require any other part of the idle task to
// execute, the idle task hook can call vCoRoutineScheduler() within an
// infinite loop.
void vApplicationIdleHook( void )
{
   for( ;; )
   {
       <link linkend="_croutine_8h_1a5333c649a2c063006ca3cd7a3b5b9240">vCoRoutineSchedule()</link>;
   }
}
</literallayout> </para>
</section>
