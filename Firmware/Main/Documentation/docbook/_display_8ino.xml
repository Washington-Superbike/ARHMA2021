<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__display_8ino" xml:lang="en-US">
<title>C:/Users/ponym/ARHMA2021/Firmware/Main/Display.ino File Reference</title>
<indexterm><primary>C:/Users/ponym/ARHMA2021/Firmware/Main/Display.ino</primary></indexterm>
<para>

<para>The <link linkend="__display_8ino">Display.ino</link> file executes the Display task for the bike&apos;s firmware. This calls on the variables that are initialized in <link linkend="__display_8h">Display.h</link> and then calls on various methods from the ILI9341&apos;s adafruit display library to update the display. Updating the display includes comparing old and new data to ensure data has changed, erasing the previous data if it&apos;s changed and writing in the new data. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;Display.h&quot;<?linebreak?>#include &quot;Main.h&quot;<?linebreak?>#include &quot;FreeRTOS_TEENSY4.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="__display_8ino_1a7121972a969d5d8bd9c96626cfd61b11">displayTask</link> (void *measurementDataPtr)</para>
</listitem>
            <listitem><para>void <link linkend="__display_8ino_1a79b84de3ddc4f88db07ac708452e4467">setupDisplay</link> (<link linkend="__display_8h_1a2dded6e25e0cb307491fd7997b66b2a4">MeasurementScreenData</link> msData)</para>
</listitem>
            <listitem><para>void <link linkend="__display_8ino_1a2af0d27bbe0bf5e4e4b8207139104c78">displayUpdate</link> (<link linkend="__display_8h_1a2dded6e25e0cb307491fd7997b66b2a4">MeasurementScreenData</link> msData)</para>
</listitem>
            <listitem><para>void <link linkend="__display_8ino_1a255d71bb7f36b2056059bd579af11f3a">thermiDataPrint</link> (int numberOfLines)</para>
</listitem>
            <listitem><para>void <link linkend="__display_8ino_1a1faaa02c20faaddf6f9e78859eb3cb0c">timePrint</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="__display_8ino_1ae5303e677c439d26296656ed10d656cc">setupMeasurementScreen</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="__display_8ino_1a9622e737a6a548ba9f9ffcbb6ed1bb2d">eraseThenPrint</link> (int xPos, int yPos, String oldData, String newData)</para>
</listitem>
            <listitem><para>void <link linkend="__display_8ino_1a2fcaba5d0c64fb3389132dca04224211">manualScreenDataUpdater</link> ()</para>
</listitem>
            <listitem><para>float <link linkend="__display_8ino_1ad609934bdce8f8169cc609cb7913f507">aux_voltage_read</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>The <link linkend="__display_8ino">Display.ino</link> file executes the Display task for the bike&apos;s firmware. This calls on the variables that are initialized in <link linkend="__display_8h">Display.h</link> and then calls on various methods from the ILI9341&apos;s adafruit display library to update the display. Updating the display includes comparing old and new data to ensure data has changed, erasing the previous data if it&apos;s changed and writing in the new data. </para>

<para><formalpara><title>Author</title>

<para>Washington Superbike </para>
</formalpara>
<formalpara><title>Date</title>

<para>1-March-2023 </para>
</formalpara>
<note><title>Note</title>

<para>This works. Display does slow down a bit in the speedometer screen, but that is also due to often the numbers were changing in the <link linkend="__display_8ino_1a2fcaba5d0c64fb3389132dca04224211">manualScreenDataUpdater()</link>method updating data too frequently. Just consider reducing the size of the text in case it looks like it is updating too slowly at speeds of ~60-80 mph.</para>
</note>
<para><link linkend="_todo_1_todo000007">Todo</link> 
<para>Remove all unused vars and tighten up methods. <?linebreak?> <?linebreak?> There are WAY more macros (#define statements) that need to be written for defining some frequently used values in display. Can&apos;t think of them off the top of my head, but make and use those. <?linebreak?> <?linebreak?> In the speedometer screen, add code to show angles. If the angle is near the threshold (&gt; ~30 degrees), show it in red. If the angle is near safe (&lt; ~30 degrees), show it in green. Add an indicator that prints out preCharge statuses This variable is called hv_state in <link linkend="__precharge_8h">preCharge.h</link> basically print out this variable if possbie. This is similar to how cars print out engine flags, etc. </para>
</para></para>
<para>
Definition in file <link linkend="__display_8ino_source">Display.ino</link>.</para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__display_8ino_1ad609934bdce8f8169cc609cb7913f507"/><section>
    <title>aux_voltage_read()</title>
<indexterm><primary>aux_voltage_read</primary><secondary>Display.ino</secondary></indexterm>
<indexterm><primary>Display.ino</primary><secondary>aux_voltage_read</secondary></indexterm>
<para><computeroutput>float aux_voltage_read ( )</computeroutput></para>
<para>Reads in the aux_voltage of the LV system and reads in the values. Would be better in CAN, but alas Chase said leave it here, it&apos;s here.</para>
<para>
Definition at line <link linkend="__display_8ino_source_1l00240">240</link> of file <link linkend="__display_8ino_source">Display.ino</link>.</para>
</section>
<anchor xml:id="__display_8ino_1a7121972a969d5d8bd9c96626cfd61b11"/><section>
    <title>displayTask()</title>
<indexterm><primary>displayTask</primary><secondary>Display.ino</secondary></indexterm>
<indexterm><primary>Display.ino</primary><secondary>displayTask</secondary></indexterm>
<para><computeroutput>void displayTask (void * measurementDataPtr)</computeroutput></para>
<para>Parses the data from the void pointer to be processable? Idk if that&apos;s word. Passes the measurementScreenData to the <link linkend="__display_8ino_1a2af0d27bbe0bf5e4e4b8207139104c78">displayUpdate()</link> method. The <link linkend="__display_8ino_1a2af0d27bbe0bf5e4e4b8207139104c78">displayUpdate()</link> method then processes it and updates the screen accordingly.</para>
<para>
Definition at line <link linkend="__display_8ino_source_1l00038">38</link> of file <link linkend="__display_8ino_source">Display.ino</link>.</para>
</section>
<anchor xml:id="__display_8ino_1a2af0d27bbe0bf5e4e4b8207139104c78"/><section>
    <title>displayUpdate()</title>
<indexterm><primary>displayUpdate</primary><secondary>Display.ino</secondary></indexterm>
<indexterm><primary>Display.ino</primary><secondary>displayUpdate</secondary></indexterm>
<para><computeroutput>void displayUpdate (<link linkend="__display_8h_1a2dded6e25e0cb307491fd7997b66b2a4">MeasurementScreenData</link> msData)</computeroutput></para><para>
Definition at line <link linkend="__display_8ino_source_1l00084">84</link> of file <link linkend="__display_8ino_source">Display.ino</link>.</para>
</section>
<anchor xml:id="__display_8ino_1a9622e737a6a548ba9f9ffcbb6ed1bb2d"/><section>
    <title>eraseThenPrint()</title>
<indexterm><primary>eraseThenPrint</primary><secondary>Display.ino</secondary></indexterm>
<indexterm><primary>Display.ino</primary><secondary>eraseThenPrint</secondary></indexterm>
<para><computeroutput>void eraseThenPrint (int xPos, int yPos, String oldData, String newData)</computeroutput></para>
<para>Erases the old value using the oldData parameter by writing it in the background color and then setting it back to the printing color to write the newData.</para>
<para>
Definition at line <link linkend="__display_8ino_source_1l00208">208</link> of file <link linkend="__display_8ino_source">Display.ino</link>.</para>
</section>
<anchor xml:id="__display_8ino_1a2fcaba5d0c64fb3389132dca04224211"/><section>
    <title>manualScreenDataUpdater()</title>
<indexterm><primary>manualScreenDataUpdater</primary><secondary>Display.ino</secondary></indexterm>
<indexterm><primary>Display.ino</primary><secondary>manualScreenDataUpdater</secondary></indexterm>
<para><computeroutput>void manualScreenDataUpdater ( )</computeroutput></para>
<para>Iterates through all the printedVals array and then does += 1 to make sure it&apos;s increasing. This change should be reflected in the display itself.</para>
<para>
Definition at line <link linkend="__display_8ino_source_1l00225">225</link> of file <link linkend="__display_8ino_source">Display.ino</link>.</para>
</section>
<anchor xml:id="__display_8ino_1a79b84de3ddc4f88db07ac708452e4467"/><section>
    <title>setupDisplay()</title>
<indexterm><primary>setupDisplay</primary><secondary>Display.ino</secondary></indexterm>
<indexterm><primary>Display.ino</primary><secondary>setupDisplay</secondary></indexterm>
<para><computeroutput>void setupDisplay (<link linkend="__display_8h_1a2dded6e25e0cb307491fd7997b66b2a4">MeasurementScreenData</link> msData)</computeroutput></para>
<para>Calls on tft.begin() method and sets the orientation using tft.setRotatio() and also sets the screen to ILI9341_WHITE or ILI9341_BLACK based on Debugging or Speedometer screen.</para>

<para>Initializes all the PrintedDataStructs to set their position, values, and point to the correct pointer corresponding to the correct data.</para>

<para>Calls on the <link linkend="__display_8ino_1ae5303e677c439d26296656ed10d656cc">setupMeasurementScreen()</link> to finish up the setup.</para>
<para>
Definition at line <link linkend="__display_8ino_source_1l00051">51</link> of file <link linkend="__display_8ino_source">Display.ino</link>.</para>
</section>
<anchor xml:id="__display_8ino_1ae5303e677c439d26296656ed10d656cc"/><section>
    <title>setupMeasurementScreen()</title>
<indexterm><primary>setupMeasurementScreen</primary><secondary>Display.ino</secondary></indexterm>
<indexterm><primary>Display.ino</primary><secondary>setupMeasurementScreen</secondary></indexterm>
<para><computeroutput>void setupMeasurementScreen ( )</computeroutput></para>
<para>If the screen is debugging type, it will print out all the data labels in their data locations as a black text This is achieved using a bunch of tft methods. Nice.</para>

<para>If the screen is speedometer type, it will print out all the data labels in their locations (SPEED up top and RPM at the bottom). This is achieved using a bunch of tft methods. Nice.</para>
<para>
Definition at line <link linkend="__display_8ino_source_1l00171">171</link> of file <link linkend="__display_8ino_source">Display.ino</link>.</para>
</section>
<anchor xml:id="__display_8ino_1a255d71bb7f36b2056059bd579af11f3a"/><section>
    <title>thermiDataPrint()</title>
<indexterm><primary>thermiDataPrint</primary><secondary>Display.ino</secondary></indexterm>
<indexterm><primary>Display.ino</primary><secondary>thermiDataPrint</secondary></indexterm>
<para><computeroutput>void thermiDataPrint (int numberOfLines)</computeroutput></para><para>
Definition at line <link linkend="__display_8ino_source_1l00130">130</link> of file <link linkend="__display_8ino_source">Display.ino</link>.</para>
</section>
<anchor xml:id="__display_8ino_1a1faaa02c20faaddf6f9e78859eb3cb0c"/><section>
    <title>timePrint()</title>
<indexterm><primary>timePrint</primary><secondary>Display.ino</secondary></indexterm>
<indexterm><primary>Display.ino</primary><secondary>timePrint</secondary></indexterm>
<para><computeroutput>void timePrint ( )</computeroutput></para><para>
Definition at line <link linkend="__display_8ino_source_1l00160">160</link> of file <link linkend="__display_8ino_source">Display.ino</link>.</para>
</section>
</section>
</section>
