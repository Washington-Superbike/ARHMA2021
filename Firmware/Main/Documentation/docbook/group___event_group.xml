<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group___event_group" xml:lang="en-US">
<title>EventGroup</title>
<indexterm><primary>EventGroup</primary></indexterm>
<simplesect>
    <title>Modules    </title>
        <itemizedlist>
            <listitem><para><link linkend="_group___event_group_handle__t">EventGroupHandle_t</link></para>
</listitem>
            <listitem><para><link linkend="_group__x_event_group_create">xEventGroupCreate</link></para>
</listitem>
            <listitem><para><link linkend="_group__x_event_group_wait_bits">xEventGroupWaitBits</link></para>
</listitem>
            <listitem><para><link linkend="_group__x_event_group_clear_bits">xEventGroupClearBits</link></para>
</listitem>
            <listitem><para><link linkend="_group__x_event_group_clear_bits_from_i_s_r">xEventGroupClearBitsFromISR</link></para>
</listitem>
            <listitem><para><link linkend="_group__x_event_group_set_bits">xEventGroupSetBits</link></para>
</listitem>
            <listitem><para><link linkend="_group__x_event_group_set_bits_from_i_s_r">xEventGroupSetBitsFromISR</link></para>
</listitem>
            <listitem><para><link linkend="_group__x_event_group_sync">xEventGroupSync</link></para>
</listitem>
            <listitem><para><link linkend="_group__x_event_group_get_bits">xEventGroupGetBits</link></para>
</listitem>
            <listitem><para><link linkend="_group__x_event_group_get_bits_from_i_s_r">xEventGroupGetBitsFromISR</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>An event group is a collection of bits to which an application can assign a meaning. For example, an application may create an event group to convey the status of various CAN bus related events in which bit 0 might mean &quot;A CAN
message has been received and is ready for processing&quot;, bit 1 might mean &quot;The
application has queued a message that is ready for sending onto the CAN
network&quot;, and bit 2 might mean &quot;It is time to send a SYNC message onto the
CAN network&quot; etc. A task can then test the bit values to see which events are active, and optionally enter the Blocked state to wait for a specified bit or a group of specified bits to be active. To continue the CAN bus example, a CAN controlling task can enter the Blocked state (and therefore not consume any processing time) until either bit 0, bit 1 or bit 2 are active, at which time the bit that was actually active would inform the task which action it had to take (process a received message, send a message, or send a SYNC).</para>

<para>The event groups implementation contains intelligence to avoid race conditions that would otherwise occur were an application to use a simple variable for the same purpose. This is particularly important with respect to when a bit within an event group is to be cleared, and when bits have to be set and then tested atomically - as is the case where event groups are used to create a synchronisation point between multiple tasks (a &apos;rendezvous&apos;). </para>
</section>
</section>
