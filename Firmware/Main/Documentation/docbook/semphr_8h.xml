<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_semphr_8h" xml:lang="en-US">
<title>C:/Users/ponym/ARHMA2021/Firmware/Main/FreeRTOS/semphr.h File Reference</title>
<indexterm><primary>C:/Users/ponym/ARHMA2021/Firmware/Main/FreeRTOS/semphr.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;queue.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_semphr_8h_1a73cfd14cf25a13f8dd4dc1d74b7fc04a">semBINARY_SEMAPHORE_QUEUE_LENGTH</link>&#160;&#160;&#160;( ( uint8_t ) 1U )</para>
</listitem>
            <listitem><para>#define <link linkend="_semphr_8h_1a93bd07e28aed3084bdafa1f4e99700b2">semSEMAPHORE_QUEUE_ITEM_LENGTH</link>&#160;&#160;&#160;( ( uint8_t ) 0U )</para>
</listitem>
            <listitem><para>#define <link linkend="_semphr_8h_1a124bb5bd7805baa06fbd3239840d6803">semGIVE_BLOCK_TIME</link>&#160;&#160;&#160;( ( <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> ) 0U )</para>
</listitem>
            <listitem><para>#define <link linkend="_semphr_8h_1af116e436d2a5ae5bd72dbade2b5ea930">xSemaphoreTake</link>(xSemaphore,  xBlockTime)&#160;&#160;&#160;<link linkend="_queue_8c_1ade45e48664e5ec17ea091f00cd34394f">xQueueSemaphoreTake</link>( ( xSemaphore ), ( xBlockTime ) )</para>
</listitem>
            <listitem><para>#define <link linkend="_semphr_8h_1aae55761cabfa9bf85c8f4430f78c0953">xSemaphoreGive</link>(xSemaphore)&#160;&#160;&#160;<link linkend="_queue_8c_1acb67c81366c00896b21cd826e07d885d">xQueueGenericSend</link>( ( <link linkend="_queue_8h_1a57349603001f8ddf51c888c49e2804d7">QueueHandle_t</link> ) ( xSemaphore ), NULL, <link linkend="_semphr_8h_1a124bb5bd7805baa06fbd3239840d6803">semGIVE_BLOCK_TIME</link>, <link linkend="_queue_8h_1a4d78fa863fbeb90425a2dda08fae8b12">queueSEND_TO_BACK</link> )</para>
</listitem>
            <listitem><para>#define <link linkend="_semphr_8h_1a68aa43df8b2a0dbe17d05fad74670ef0">xSemaphoreGiveFromISR</link>(xSemaphore,  pxHigherPriorityTaskWoken)&#160;&#160;&#160;<link linkend="_queue_8c_1a4df49fafb6ba4400ede6f2d07a40865f">xQueueGiveFromISR</link>( ( <link linkend="_queue_8h_1a57349603001f8ddf51c888c49e2804d7">QueueHandle_t</link> ) ( xSemaphore ), ( pxHigherPriorityTaskWoken ) )</para>
</listitem>
            <listitem><para>#define <link linkend="_semphr_8h_1a076419b58e072655686939016e7ca3c5">xSemaphoreTakeFromISR</link>(xSemaphore,  pxHigherPriorityTaskWoken)&#160;&#160;&#160;<link linkend="_queue_8c_1ac61ec62828e70ed35d18559a35550462">xQueueReceiveFromISR</link>( ( <link linkend="_queue_8h_1a57349603001f8ddf51c888c49e2804d7">QueueHandle_t</link> ) ( xSemaphore ), NULL, ( pxHigherPriorityTaskWoken ) )</para>
</listitem>
            <listitem><para>#define <link linkend="_semphr_8h_1acd7d0eda0923d7caeeaaee9202c43eab">vSemaphoreDelete</link>(xSemaphore)&#160;&#160;&#160;<link linkend="_queue_8c_1a35c0b4f9a0e940cb3a86ca4c5e84c41c">vQueueDelete</link>( ( <link linkend="_queue_8h_1a57349603001f8ddf51c888c49e2804d7">QueueHandle_t</link> ) ( xSemaphore ) )</para>
</listitem>
            <listitem><para>#define <link linkend="_semphr_8h_1a7403bfbc06fb8449b2334f55d939a4c4">xSemaphoreGetMutexHolder</link>(xSemaphore)&#160;&#160;&#160;<link linkend="_queue_8h_1ac49b15e4005be658fd04e68407ef4fb1">xQueueGetMutexHolder</link>( ( xSemaphore ) )</para>
</listitem>
            <listitem><para>#define <link linkend="_semphr_8h_1ac3db48a47d2030b535651f306b44191b">xSemaphoreGetMutexHolderFromISR</link>(xSemaphore)&#160;&#160;&#160;<link linkend="_queue_8h_1a8ccb06cf46ba1c052809a3809954bd07">xQueueGetMutexHolderFromISR</link>( ( xSemaphore ) )</para>
</listitem>
            <listitem><para>#define <link linkend="_semphr_8h_1aa26a3d7cf9b5595a652daeb7f81229f3">uxSemaphoreGetCount</link>(xSemaphore)&#160;&#160;&#160;<link linkend="_queue_8c_1a4158a6134c9d1c60ffdb18d279d475b1">uxQueueMessagesWaiting</link>( ( <link linkend="_queue_8h_1a57349603001f8ddf51c888c49e2804d7">QueueHandle_t</link> ) ( xSemaphore ) )</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_queue_8h_1a57349603001f8ddf51c888c49e2804d7">QueueHandle_t</link> <link linkend="_semphr_8h_1ad88c6df4a04beedeac782918c8a332f5">SemaphoreHandle_t</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_semphr_8h_1a73cfd14cf25a13f8dd4dc1d74b7fc04a"/><section>
    <title>semBINARY_SEMAPHORE_QUEUE_LENGTH</title>
<indexterm><primary>semBINARY_SEMAPHORE_QUEUE_LENGTH</primary><secondary>semphr.h</secondary></indexterm>
<indexterm><primary>semphr.h</primary><secondary>semBINARY_SEMAPHORE_QUEUE_LENGTH</secondary></indexterm>
<para><computeroutput>#define semBINARY_SEMAPHORE_QUEUE_LENGTH&#160;&#160;&#160;( ( uint8_t ) 1U )</computeroutput></para><para>
Definition at line <link linkend="_semphr_8h_source_1l00039">39</link> of file <link linkend="_semphr_8h_source">semphr.h</link>.</para>
</section>
<anchor xml:id="_semphr_8h_1a124bb5bd7805baa06fbd3239840d6803"/><section>
    <title>semGIVE_BLOCK_TIME</title>
<indexterm><primary>semGIVE_BLOCK_TIME</primary><secondary>semphr.h</secondary></indexterm>
<indexterm><primary>semphr.h</primary><secondary>semGIVE_BLOCK_TIME</secondary></indexterm>
<para><computeroutput>#define semGIVE_BLOCK_TIME&#160;&#160;&#160;( ( <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> ) 0U )</computeroutput></para><para>
Definition at line <link linkend="_semphr_8h_source_1l00041">41</link> of file <link linkend="_semphr_8h_source">semphr.h</link>.</para>
</section>
<anchor xml:id="_semphr_8h_1a93bd07e28aed3084bdafa1f4e99700b2"/><section>
    <title>semSEMAPHORE_QUEUE_ITEM_LENGTH</title>
<indexterm><primary>semSEMAPHORE_QUEUE_ITEM_LENGTH</primary><secondary>semphr.h</secondary></indexterm>
<indexterm><primary>semphr.h</primary><secondary>semSEMAPHORE_QUEUE_ITEM_LENGTH</secondary></indexterm>
<para><computeroutput>#define semSEMAPHORE_QUEUE_ITEM_LENGTH&#160;&#160;&#160;( ( uint8_t ) 0U )</computeroutput></para><para>
Definition at line <link linkend="_semphr_8h_source_1l00040">40</link> of file <link linkend="_semphr_8h_source">semphr.h</link>.</para>
</section>
<anchor xml:id="_semphr_8h_1aa26a3d7cf9b5595a652daeb7f81229f3"/><section>
    <title>uxSemaphoreGetCount</title>
<indexterm><primary>uxSemaphoreGetCount</primary><secondary>semphr.h</secondary></indexterm>
<indexterm><primary>semphr.h</primary><secondary>uxSemaphoreGetCount</secondary></indexterm>
<para><computeroutput>#define uxSemaphoreGetCount( xSemaphore)&#160;&#160;&#160;<link linkend="_queue_8c_1a4158a6134c9d1c60ffdb18d279d475b1">uxQueueMessagesWaiting</link>( ( <link linkend="_queue_8h_1a57349603001f8ddf51c888c49e2804d7">QueueHandle_t</link> ) ( xSemaphore ) )</computeroutput></para>
<para><link linkend="_semphr_8h">semphr.h</link> <literallayout>UBaseType_t <link linkend="_semphr_8h_1aa26a3d7cf9b5595a652daeb7f81229f3">uxSemaphoreGetCount( SemaphoreHandle_t xSemaphore )</link>;</literallayout></para>

<para>If the semaphore is a counting semaphore then <link linkend="_semphr_8h_1aa26a3d7cf9b5595a652daeb7f81229f3">uxSemaphoreGetCount()</link> returns its current count value. If the semaphore is a binary semaphore then <link linkend="_semphr_8h_1aa26a3d7cf9b5595a652daeb7f81229f3">uxSemaphoreGetCount()</link> returns 1 if the semaphore is available, and 0 if the semaphore is not available. </para>
<para>
Definition at line <link linkend="_semphr_8h_source_1l01136">1136</link> of file <link linkend="_semphr_8h_source">semphr.h</link>.</para>
</section>
<anchor xml:id="_semphr_8h_1acd7d0eda0923d7caeeaaee9202c43eab"/><section>
    <title>vSemaphoreDelete</title>
<indexterm><primary>vSemaphoreDelete</primary><secondary>semphr.h</secondary></indexterm>
<indexterm><primary>semphr.h</primary><secondary>vSemaphoreDelete</secondary></indexterm>
<para><computeroutput>#define vSemaphoreDelete( xSemaphore)&#160;&#160;&#160;<link linkend="_queue_8c_1a35c0b4f9a0e940cb3a86ca4c5e84c41c">vQueueDelete</link>( ( <link linkend="_queue_8h_1a57349603001f8ddf51c888c49e2804d7">QueueHandle_t</link> ) ( xSemaphore ) )</computeroutput></para><para>
Definition at line <link linkend="_semphr_8h_source_1l01098">1098</link> of file <link linkend="_semphr_8h_source">semphr.h</link>.</para>
</section>
<anchor xml:id="_semphr_8h_1a7403bfbc06fb8449b2334f55d939a4c4"/><section>
    <title>xSemaphoreGetMutexHolder</title>
<indexterm><primary>xSemaphoreGetMutexHolder</primary><secondary>semphr.h</secondary></indexterm>
<indexterm><primary>semphr.h</primary><secondary>xSemaphoreGetMutexHolder</secondary></indexterm>
<para><computeroutput>#define xSemaphoreGetMutexHolder( xSemaphore)&#160;&#160;&#160;<link linkend="_queue_8h_1ac49b15e4005be658fd04e68407ef4fb1">xQueueGetMutexHolder</link>( ( xSemaphore ) )</computeroutput></para>
<para><link linkend="_semphr_8h">semphr.h</link> <literallayout>TaskHandle_t <link linkend="_semphr_8h_1a7403bfbc06fb8449b2334f55d939a4c4">xSemaphoreGetMutexHolder( SemaphoreHandle_t xMutex )</link>;</literallayout></para>

<para>If xMutex is indeed a mutex type semaphore, return the current mutex holder. If xMutex is not a mutex type semaphore, or the mutex is available (not held by a task), return NULL.</para>

<para>Note: This is a good way of determining if the calling task is the mutex holder, but not a good way of determining the identity of the mutex holder as the holder may change between the function exiting and the returned value being tested. </para>
<para>
Definition at line <link linkend="_semphr_8h_source_1l01113">1113</link> of file <link linkend="_semphr_8h_source">semphr.h</link>.</para>
</section>
<anchor xml:id="_semphr_8h_1ac3db48a47d2030b535651f306b44191b"/><section>
    <title>xSemaphoreGetMutexHolderFromISR</title>
<indexterm><primary>xSemaphoreGetMutexHolderFromISR</primary><secondary>semphr.h</secondary></indexterm>
<indexterm><primary>semphr.h</primary><secondary>xSemaphoreGetMutexHolderFromISR</secondary></indexterm>
<para><computeroutput>#define xSemaphoreGetMutexHolderFromISR( xSemaphore)&#160;&#160;&#160;<link linkend="_queue_8h_1a8ccb06cf46ba1c052809a3809954bd07">xQueueGetMutexHolderFromISR</link>( ( xSemaphore ) )</computeroutput></para>
<para><link linkend="_semphr_8h">semphr.h</link> <literallayout>TaskHandle_t <link linkend="_semphr_8h_1ac3db48a47d2030b535651f306b44191b">xSemaphoreGetMutexHolderFromISR( SemaphoreHandle_t xMutex )</link>;</literallayout></para>

<para>If xMutex is indeed a mutex type semaphore, return the current mutex holder. If xMutex is not a mutex type semaphore, or the mutex is available (not held by a task), return NULL. </para>
<para>
Definition at line <link linkend="_semphr_8h_source_1l01124">1124</link> of file <link linkend="_semphr_8h_source">semphr.h</link>.</para>
</section>
<anchor xml:id="_semphr_8h_1aae55761cabfa9bf85c8f4430f78c0953"/><section>
    <title>xSemaphoreGive</title>
<indexterm><primary>xSemaphoreGive</primary><secondary>semphr.h</secondary></indexterm>
<indexterm><primary>semphr.h</primary><secondary>xSemaphoreGive</secondary></indexterm>
<para><computeroutput>#define xSemaphoreGive( xSemaphore)&#160;&#160;&#160;<link linkend="_queue_8c_1acb67c81366c00896b21cd826e07d885d">xQueueGenericSend</link>( ( <link linkend="_queue_8h_1a57349603001f8ddf51c888c49e2804d7">QueueHandle_t</link> ) ( xSemaphore ), NULL, <link linkend="_semphr_8h_1a124bb5bd7805baa06fbd3239840d6803">semGIVE_BLOCK_TIME</link>, <link linkend="_queue_8h_1a4d78fa863fbeb90425a2dda08fae8b12">queueSEND_TO_BACK</link> )</computeroutput></para><para>
Definition at line <link linkend="_semphr_8h_source_1l00447">447</link> of file <link linkend="_semphr_8h_source">semphr.h</link>.</para>
</section>
<anchor xml:id="_semphr_8h_1a68aa43df8b2a0dbe17d05fad74670ef0"/><section>
    <title>xSemaphoreGiveFromISR</title>
<indexterm><primary>xSemaphoreGiveFromISR</primary><secondary>semphr.h</secondary></indexterm>
<indexterm><primary>semphr.h</primary><secondary>xSemaphoreGiveFromISR</secondary></indexterm>
<para><computeroutput>#define xSemaphoreGiveFromISR( xSemaphore,  pxHigherPriorityTaskWoken)&#160;&#160;&#160;<link linkend="_queue_8c_1a4df49fafb6ba4400ede6f2d07a40865f">xQueueGiveFromISR</link>( ( <link linkend="_queue_8h_1a57349603001f8ddf51c888c49e2804d7">QueueHandle_t</link> ) ( xSemaphore ), ( pxHigherPriorityTaskWoken ) )</computeroutput></para><para>
Definition at line <link linkend="_semphr_8h_source_1l00624">624</link> of file <link linkend="_semphr_8h_source">semphr.h</link>.</para>
</section>
<anchor xml:id="_semphr_8h_1af116e436d2a5ae5bd72dbade2b5ea930"/><section>
    <title>xSemaphoreTake</title>
<indexterm><primary>xSemaphoreTake</primary><secondary>semphr.h</secondary></indexterm>
<indexterm><primary>semphr.h</primary><secondary>xSemaphoreTake</secondary></indexterm>
<para><computeroutput>#define xSemaphoreTake( xSemaphore,  xBlockTime)&#160;&#160;&#160;<link linkend="_queue_8c_1ade45e48664e5ec17ea091f00cd34394f">xQueueSemaphoreTake</link>( ( xSemaphore ), ( xBlockTime ) )</computeroutput></para><para>
Definition at line <link linkend="_semphr_8h_source_1l00289">289</link> of file <link linkend="_semphr_8h_source">semphr.h</link>.</para>
</section>
<anchor xml:id="_semphr_8h_1a076419b58e072655686939016e7ca3c5"/><section>
    <title>xSemaphoreTakeFromISR</title>
<indexterm><primary>xSemaphoreTakeFromISR</primary><secondary>semphr.h</secondary></indexterm>
<indexterm><primary>semphr.h</primary><secondary>xSemaphoreTakeFromISR</secondary></indexterm>
<para><computeroutput>#define xSemaphoreTakeFromISR( xSemaphore,  pxHigherPriorityTaskWoken)&#160;&#160;&#160;<link linkend="_queue_8c_1ac61ec62828e70ed35d18559a35550462">xQueueReceiveFromISR</link>( ( <link linkend="_queue_8h_1a57349603001f8ddf51c888c49e2804d7">QueueHandle_t</link> ) ( xSemaphore ), NULL, ( pxHigherPriorityTaskWoken ) )</computeroutput></para>
<para>semphr. h <literallayout>
<link linkend="_semphr_8h_1a076419b58e072655686939016e7ca3c5">xSemaphoreTakeFromISR(
                         SemaphoreHandle_t xSemaphore,
                         BaseType_t *pxHigherPriorityTaskWoken
                     )</link></literallayout></para>

<para><emphasis>Macro</emphasis> to take a semaphore from an ISR. The semaphore must have previously been created with a call to xSemaphoreCreateBinary() or xSemaphoreCreateCounting().</para>

<para>Mutex type semaphores (those created using a call to xSemaphoreCreateMutex()) must not be used with this macro.</para>

<para>This macro can be used from an ISR, however taking a semaphore from an ISR is not a common operation. It is likely to only be useful when taking a counting semaphore when an interrupt is obtaining an object from a resource pool (when the semaphore count indicates the number of resources available).</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xSemaphore</entry><entry>
<para>A handle to the semaphore being taken. This is the handle returned when the semaphore was created.</para>
</entry>
                            </row>
                            <row>
<entry>pxHigherPriorityTaskWoken</entry><entry>
<para><link linkend="_semphr_8h_1a076419b58e072655686939016e7ca3c5">xSemaphoreTakeFromISR()</link> will set *pxHigherPriorityTaskWoken to pdTRUE if taking the semaphore caused a task to unblock, and the unblocked task has a priority higher than the currently running task. If <link linkend="_semphr_8h_1a076419b58e072655686939016e7ca3c5">xSemaphoreTakeFromISR()</link> sets this value to pdTRUE then a context switch should be requested before the interrupt is exited.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if the semaphore was successfully taken, otherwise pdFALSE </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_semphr_8h_source_1l00658">658</link> of file <link linkend="_semphr_8h_source">semphr.h</link>.</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_semphr_8h_1ad88c6df4a04beedeac782918c8a332f5"/><section>
    <title>SemaphoreHandle_t</title>
<indexterm><primary>SemaphoreHandle_t</primary><secondary>semphr.h</secondary></indexterm>
<indexterm><primary>semphr.h</primary><secondary>SemaphoreHandle_t</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_queue_8h_1a57349603001f8ddf51c888c49e2804d7">QueueHandle_t</link> <link linkend="_semphr_8h_1ad88c6df4a04beedeac782918c8a332f5">SemaphoreHandle_t</link></computeroutput></para><para>
Definition at line <link linkend="_semphr_8h_source_1l00037">37</link> of file <link linkend="_semphr_8h_source">semphr.h</link>.</para>
</section>
</section>
</section>
