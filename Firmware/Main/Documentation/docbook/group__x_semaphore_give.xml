<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_semaphore_give" xml:lang="en-US">
<title>xSemaphoreGive</title>
<indexterm><primary>xSemaphoreGive</primary></indexterm>

<para>semphr. h <literallayout><link linkend="_semphr_8h_1aae55761cabfa9bf85c8f4430f78c0953">xSemaphoreGive( SemaphoreHandle_t xSemaphore )</link></literallayout></para>

<para><emphasis>Macro</emphasis> to release a semaphore. The semaphore must have previously been created with a call to xSemaphoreCreateBinary(), xSemaphoreCreateMutex() or xSemaphoreCreateCounting(). and obtained using sSemaphoreTake().</para>

<para>This macro must not be used from an ISR. See xSemaphoreGiveFromISR () for an alternative which can be used from an ISR.</para>

<para>This macro must also not be used on semaphores created using xSemaphoreCreateRecursiveMutex().</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xSemaphore</entry><entry>
<para>A handle to the semaphore being released. This is the handle returned when the semaphore was created.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if the semaphore was released. pdFALSE if an error occurred. Semaphores are implemented using queues. An error can occur if there is no space on the queue to post a message - indicating that the semaphore was not first obtained correctly.</para>
</formalpara>
Example usage: <literallayout>
SemaphoreHandle_t xSemaphore = NULL;

void vATask( void * pvParameters )
{
   // Create the semaphore to guard a shared resource.
   xSemaphore = vSemaphoreCreateBinary();

   if( xSemaphore != NULL )
   {
       if( <link linkend="_semphr_8h_1aae55761cabfa9bf85c8f4430f78c0953">xSemaphoreGive( xSemaphore )</link> != pdTRUE )
       {
           // We would expect this call to fail because we cannot give
           // a semaphore without first &quot;taking&quot; it!
       }

       // Obtain the semaphore - don&apos;t block if the semaphore is not
       // immediately available.
       if( <link linkend="_semphr_8h_1af116e436d2a5ae5bd72dbade2b5ea930">xSemaphoreTake( xSemaphore, ( TickType_t ) 0 )</link> )
       {
           // We now have the semaphore and can access the shared resource.

           // ...

           // We have finished accessing the shared resource so can free the
           // semaphore.
           if( <link linkend="_semphr_8h_1aae55761cabfa9bf85c8f4430f78c0953">xSemaphoreGive( xSemaphore )</link> != pdTRUE )
           {
               // We would not expect this call to fail because we must have
               // obtained the semaphore to get here.
           }
       }
   }
}
</literallayout> </para>
</section>
