<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__cr_q_u_e_u_e___s_e_n_d" xml:lang="en-US">
<title>crQUEUE_SEND</title>
<indexterm><primary>crQUEUE_SEND</primary></indexterm>

<para><literallayout>
<link linkend="_croutine_8h_1a26af3d36f22a04168eebdf5b08465d6e">crQUEUE_SEND(
                 CoRoutineHandle_t xHandle,
                 QueueHandle_t pxQueue,
                 void *pvItemToQueue,
                 TickType_t xTicksToWait,
                 BaseType_t *pxResult
            )</link></literallayout></para>

<para>The macro&apos;s <link linkend="_croutine_8h_1a26af3d36f22a04168eebdf5b08465d6e">crQUEUE_SEND()</link> and <link linkend="_croutine_8h_1a586d57fd9a3e2aa5ae66484ed3be36c9">crQUEUE_RECEIVE()</link> are the co-routine equivalent to the <link linkend="_queue_8h_1af7eb49d3249351176992950d9185abe9">xQueueSend()</link> and <link linkend="_queue_8c_1ad0a166f3b1219a5e37e31f8090d4800d">xQueueReceive()</link> functions used by tasks.</para>

<para>crQUEUE_SEND and crQUEUE_RECEIVE can only be used from a co-routine whereas <link linkend="_queue_8h_1af7eb49d3249351176992950d9185abe9">xQueueSend()</link> and <link linkend="_queue_8c_1ad0a166f3b1219a5e37e31f8090d4800d">xQueueReceive()</link> can only be used from tasks.</para>

<para>crQUEUE_SEND can only be called from the co-routine function itself - not from within a function called by the co-routine function. This is because co-routines do not maintain their own stack.</para>

<para>See the co-routine section of the WEB documentation for information on passing data between tasks and co-routines and between ISR&apos;s and co-routines.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xHandle</entry><entry>
<para>The handle of the calling co-routine. This is the xHandle parameter of the co-routine function.</para>
</entry>
                            </row>
                            <row>
<entry>pxQueue</entry><entry>
<para>The handle of the queue on which the data will be posted. The handle is obtained as the return value when the queue is created using the xQueueCreate() API function.</para>
</entry>
                            </row>
                            <row>
<entry>pvItemToQueue</entry><entry>
<para>A pointer to the data being posted onto the queue. The number of bytes of each queued item is specified when the queue is created. This number of bytes is copied from pvItemToQueue into the queue itself.</para>
</entry>
                            </row>
                            <row>
<entry>xTickToDelay</entry><entry>
<para>The number of ticks that the co-routine should block to wait for space to become available on the queue, should space not be available immediately. The actual amount of time this equates to is defined by configTICK_RATE_HZ (set in <link linkend="__free_r_t_o_s_config_8h">FreeRTOSConfig.h</link>). The constant portTICK_PERIOD_MS can be used to convert ticks to milliseconds (see example below).</para>
</entry>
                            </row>
                            <row>
<entry>pxResult</entry><entry>
<para>The variable pointed to by pxResult will be set to pdPASS if data was successfully posted onto the queue, otherwise it will be set to an error defined within <link linkend="_projdefs_8h">ProjDefs.h</link>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Example usage: <literallayout>
// Co-routine function that blocks for a fixed period then posts a number onto
// a queue.
static void prvCoRoutineFlashTask( CoRoutineHandle_t xHandle, UBaseType_t uxIndex )
{
// Variables in co-routines must be declared static if they must maintain value across a blocking call.
static BaseType_t xNumberToPost = 0;
static BaseType_t xResult;

   // Co-routines must begin with a call to <link linkend="_croutine_8h_1a19a57a201a325e8af1207ed68c4aedde">crSTART()</link>.
   <link linkend="_croutine_8h_1a19a57a201a325e8af1207ed68c4aedde">crSTART( xHandle )</link>;

   for( ;; )
   {
       // This assumes the queue has already been created.
       <link linkend="_croutine_8h_1a26af3d36f22a04168eebdf5b08465d6e">crQUEUE_SEND( xHandle, xCoRoutineQueue, &amp;xNumberToPost, NO_DELAY, &amp;xResult )</link>;

       if( xResult != pdPASS )
       {
           // The message was not posted!
       }

       // Increment the number to be posted onto the queue.
       xNumberToPost++;

       // Delay for 100 ticks.
       <link linkend="_croutine_8h_1a05a06feb11028f2d1d440ea335f562ba">crDELAY( xHandle, 100 )</link>;
   }

   // Co-routines must end with a call to <link linkend="_croutine_8h_1ae6038cc976689b50000475ebfc4e2f23">crEND()</link>.
   <link linkend="_croutine_8h_1ae6038cc976689b50000475ebfc4e2f23">crEND()</link>;
}</literallayout> </para>
</section>
