<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_message_buffer_create" xml:lang="en-US">
<title>xMessageBufferCreate</title>
<indexterm><primary>xMessageBufferCreate</primary></indexterm>

<para><link linkend="_message__buffer_8h">message_buffer.h</link></para>

<para><literallayout>
MessageBufferHandle_t <link linkend="_message__buffer_8h_1a2959cd0e3d2bd20d46908e5c9872be36">xMessageBufferCreate( size_t xBufferSizeBytes )</link>;
</literallayout></para>

<para>Creates a new message buffer using dynamically allocated memory. See <link linkend="_message__buffer_8h_1acc84f4a15dbd39ecbad35f7337e78b2c">xMessageBufferCreateStatic()</link> for a version that uses statically allocated memory (memory that is allocated at compile time).</para>

<para>configSUPPORT_DYNAMIC_ALLOCATION must be set to 1 or left undefined in <link linkend="__free_r_t_o_s_config_8h">FreeRTOSConfig.h</link> for <link linkend="_message__buffer_8h_1a2959cd0e3d2bd20d46908e5c9872be36">xMessageBufferCreate()</link> to be available.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xBufferSizeBytes</entry><entry>
<para>The total number of bytes (not messages) the message buffer will be able to hold at any one time. When a message is written to the message buffer an additional sizeof( size_t ) bytes are also written to store the message&apos;s length. sizeof( size_t ) is typically 4 bytes on a 32-bit architecture, so on most 32-bit architectures a 10 byte message will take up 14 bytes of message buffer space.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>If NULL is returned, then the message buffer cannot be created because there is insufficient heap memory available for FreeRTOS to allocate the message buffer data structures and storage area. A non-NULL value being returned indicates that the message buffer has been created successfully - the returned value should be stored as the handle to the created message buffer.</para>
</formalpara>
Example use: <literallayout>

void vAFunction( void )
{
MessageBufferHandle_t xMessageBuffer;
const size_t xMessageBufferSizeBytes = 100;

    // Create a message buffer that can hold 100 bytes.  The memory used to hold
    // both the message buffer structure and the messages themselves is allocated
    // dynamically.  Each message added to the buffer consumes an additional 4
    // bytes which are used to hold the lengh of the message.
    xMessageBuffer = <link linkend="_message__buffer_8h_1a2959cd0e3d2bd20d46908e5c9872be36">xMessageBufferCreate( xMessageBufferSizeBytes )</link>;

    if( xMessageBuffer == NULL )
    {
        // There was not enough heap memory space available to create the
        // message buffer.
    }
    else
    {
        // The message buffer was created successfully and can now be used.
    }

</literallayout> </para>
</section>
