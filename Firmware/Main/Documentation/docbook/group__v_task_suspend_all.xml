<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__v_task_suspend_all" xml:lang="en-US">
<title>vTaskSuspendAll</title>
<indexterm><primary>vTaskSuspendAll</primary></indexterm>

<para>task. h <literallayout>void <link linkend="_task_8h_1a366b302eba79d10b5ee2a3756f0fcc43">vTaskSuspendAll( void )</link>;</literallayout></para>

<para>Suspends the scheduler without disabling interrupts. Context switches will not occur while the scheduler is suspended.</para>

<para>After calling vTaskSuspendAll () the calling task will continue to execute without risk of being swapped out until a call to xTaskResumeAll () has been made.</para>

<para>API functions that have the potential to cause a context switch (for example, <link linkend="_task_8h_1a067da3e949e248096ec6c01f9cb75a47">vTaskDelayUntil()</link>, <link linkend="_queue_8h_1af7eb49d3249351176992950d9185abe9">xQueueSend()</link>, etc.) must not be called while the scheduler is suspended.</para>

<para>Example usage: <literallayout>
void vTask1( void * pvParameters )
{
    for( ;; )
    {
     // Task code goes here.

     // ...

     // At some point the task wants to perform a long operation during
     // which it does not want to get swapped out.  It cannot use
     // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the
     // operation may cause interrupts to be missed - including the
     // ticks.

     // Prevent the real time kernel swapping out the task.
     vTaskSuspendAll ();

     // Perform the operation here.  There is no need to use critical
     // sections as we have all the microcontroller processing time.
     // During this time interrupts will still operate and the kernel
     // tick count will be maintained.

     // ...

     // The operation is complete.  Restart the kernel.
     xTaskResumeAll ();
    }
}
  </literallayout> </para>
</section>
