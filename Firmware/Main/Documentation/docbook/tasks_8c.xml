<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tasks_8c" xml:lang="en-US">
<title>C:/Users/ponym/ARHMA2021/Firmware/Main/FreeRTOS/tasks.c File Reference</title>
<indexterm><primary>C:/Users/ponym/ARHMA2021/Firmware/Main/FreeRTOS/tasks.c</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;stdlib.h&gt;<?linebreak?>#include &lt;string.h&gt;<?linebreak?>#include &quot;FreeRTOS.h&quot;<?linebreak?>#include &quot;task.h&quot;<?linebreak?>#include &quot;timers.h&quot;<?linebreak?>#include &quot;stack_macros.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structtsk_task_control_block">tskTaskControlBlock</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_tasks_8c_1ab622d8c674f2a417a666a7ed89109e79">MPU_WRAPPERS_INCLUDED_FROM_API_FILE</link></para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1acd0c920e40647de517ac633965b52273">taskYIELD_IF_USING_PREEMPTION</link>()&#160;&#160;&#160;<link linkend="__free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e">portYIELD_WITHIN_API</link>()</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1a4f2f023143b2cd2367a441e104f8cf2c">taskNOT_WAITING_NOTIFICATION</link>&#160;&#160;&#160;( ( uint8_t ) 0 )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1acee66205293e253c13626e74798a0cf0">taskWAITING_NOTIFICATION</link>&#160;&#160;&#160;( ( uint8_t ) 1 )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1aa62ac91d5f644c98b5459c28ae4f689e">taskNOTIFICATION_RECEIVED</link>&#160;&#160;&#160;( ( uint8_t ) 2 )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1ad3b1c99066f14855be098ccca1685fac">tskSTACK_FILL_BYTE</link>&#160;&#160;&#160;( 0xa5U )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1af06a1633d2fb92f67712e62f3d1c3777">tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB</link>&#160;&#160;&#160;( ( uint8_t ) 0 )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1ad65be2320d426aca4e0e72d29ccd04de">tskSTATICALLY_ALLOCATED_STACK_ONLY</link>&#160;&#160;&#160;( ( uint8_t ) 1 )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1a9851e50775136d536fed623e1ac598aa">tskSTATICALLY_ALLOCATED_STACK_AND_TCB</link>&#160;&#160;&#160;( ( uint8_t ) 2 )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1a95d95c8702f95db8a8a446e1d083245a">tskSET_NEW_STACKS_TO_KNOWN_VALUE</link>&#160;&#160;&#160;1</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1a13f2f32dab5dee7a9b2c848c88ef9bcc">tskRUNNING_CHAR</link>&#160;&#160;&#160;( &apos;X&apos; )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1a4cd87df39bdffff557d06f4ff15a30b0">tskBLOCKED_CHAR</link>&#160;&#160;&#160;( &apos;B&apos; )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1a2fd6c7a58ad28dd1f2c1e322b1ab3fcb">tskREADY_CHAR</link>&#160;&#160;&#160;( &apos;R&apos; )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1a9aba572191d065741f5a3e94c416d455">tskDELETED_CHAR</link>&#160;&#160;&#160;( &apos;D&apos; )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1a3613b4b66406c8f6cc73e5c3e9f208db">tskSUSPENDED_CHAR</link>&#160;&#160;&#160;( &apos;S&apos; )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1aa637612832bcdd420acc9e6cc4361071">configIDLE_TASK_NAME</link>&#160;&#160;&#160;&quot;IDLE&quot;</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1a80c883536b1faef436fcd47b16a10f98">taskRECORD_READY_PRIORITY</link>(uxPriority)&#160;&#160;&#160;<link linkend="_portmacro_8h_1a113cd9b8401284194da8ddc4569aa484">portRECORD_READY_PRIORITY</link>( uxPriority, <link linkend="_tasks_8c_1a3fffd96ac9ae0d8b352ae10896ed4531">uxTopReadyPriority</link> )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1adace394d56a7fe7a8f8ee83edba3537c">taskSELECT_HIGHEST_PRIORITY_TASK</link>()</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1a9517fc40d713aff9dd8182223948f9c8">taskRESET_READY_PRIORITY</link>(uxPriority)</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1aa604b7713b82e63154a290e21ecf700c">taskSWITCH_DELAYED_LISTS</link>()</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b">prvAddTaskToReadyList</link>(pxTCB)</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b">prvGetTCBFromHandle</link>(pxHandle)&#160;&#160;&#160;( ( ( pxHandle ) == NULL ) ? <link linkend="_tasks_8c_1a1f2284b749c9706d04510853bd8e8f91">pxCurrentTCB</link> : ( pxHandle ) )</para>
</listitem>
            <listitem><para>#define <link linkend="_tasks_8c_1a3e36f3eda563e810a24ab36ee7c978d4">taskEVENT_LIST_ITEM_VALUE_IN_USE</link>&#160;&#160;&#160;0x80000000UL</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_structtsk_task_control_block">tskTaskControlBlock</link> <link linkend="_tasks_8c_1a67b1ddede4e49c946dd720d83c5838a5">tskTCB</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_tasks_8c_1a67b1ddede4e49c946dd720d83c5838a5">tskTCB</link> <link linkend="_tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453">TCB_t</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1abefde0f5ca141ae3d6e25f66a5234082">prvTaskIsTaskSuspended</link> (const <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</para>
</listitem>
            <listitem><para>static void <link linkend="_tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19">prvInitialiseTaskLists</link> (void)</para>
</listitem>
            <listitem><para>static void <link linkend="_tasks_8c_1af0212702c981e5413a318c0346ac37b2">prvIdleTask</link> (void *pvParameters)</para>
</listitem>
            <listitem><para>static void <link linkend="_tasks_8c_1ad538c599036f7914942471780230ffa6">prvDeleteTCB</link> (<link linkend="_tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453">TCB_t</link> *pxTCB)</para>
</listitem>
            <listitem><para>static void <link linkend="_tasks_8c_1a903096c962a2bc907f4b902a7d42302a">prvCheckTasksWaitingTermination</link> (void)</para>
</listitem>
            <listitem><para>static void <link linkend="_tasks_8c_1ab4574e77d9aea876272e563c68f639da">prvAddCurrentTaskToDelayedList</link> (<link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait, const <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xCanBlockIndefinitely)</para>
</listitem>
            <listitem><para>static <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_tasks_8c_1a76a09ef72cff5e96bdfb4f9e882f4cfe">prvListTasksWithinSingleList</link> (<link linkend="_task_8h_1ae5c0c4b9b2c8af5836583b2984ef5b6e">TaskStatus_t</link> *pxTaskStatusArray, <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *pxList, <link linkend="_task_8h_1a1749369458e2282a22e862a619a3892c">eTaskState</link> eState)</para>
</listitem>
            <listitem><para>static <link linkend="_tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453">TCB_t</link> * <link linkend="_tasks_8c_1a2a2eca63c8d866fff6851e2096881382">prvSearchForNameWithinSingleList</link> (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *pxList, const char pcNameToQuery[])</para>
</listitem>
            <listitem><para>static uint16_t <link linkend="_tasks_8c_1aaba9e72c97964b8d9496e8dbdd40aa60">prvTaskCheckFreeStackSpace</link> (const uint8_t *pucStackByte)</para>
</listitem>
            <listitem><para>static void <link linkend="_tasks_8c_1ad1b2e4995f863a99cf980836efe330d7">prvResetNextTaskUnblockTime</link> (void)</para>
</listitem>
            <listitem><para>static void <link linkend="_tasks_8c_1a6c4d7ca7b68c92ae0d62edd7ecdd8e31">prvInitialiseNewTask</link> (<link linkend="_projdefs_8h_1a9b32502ff92c255c686dacde53c1cba0">TaskFunction_t</link> pxTaskCode, const char *const pcName, const uint32_t ulStackDepth, void *const pvParameters, <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxPriority, <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> *const pxCreatedTask, <link linkend="_tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453">TCB_t</link> *pxNewTCB, const <link linkend="_task_8h_1abc1e4d1b3f52e2a9101487e1831b992a">MemoryRegion_t</link> *const xRegions)</para>
</listitem>
            <listitem><para>static void <link linkend="_tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e">prvAddNewTaskToReadyList</link> (<link linkend="_tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453">TCB_t</link> *pxNewTCB)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1">xTaskCreate</link> (<link linkend="_projdefs_8h_1a9b32502ff92c255c686dacde53c1cba0">TaskFunction_t</link> pxTaskCode, const char *const pcName, const uint16_t usStackDepth, void *const pvParameters, <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxPriority, <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> *const pxCreatedTask)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1af9cf8dedc1248f4351d3cb5910e33d7a">vTaskDelete</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToDelete)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1abbc32467f223c78ba36f577b56a32897">vTaskDelayUntil</link> (<link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> *const pxPreviousWakeTime, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTimeIncrement)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a9917b05abb77e75e959151ae67065dce">vTaskDelay</link> (const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToDelay)</para>
</listitem>
            <listitem><para><link linkend="_task_8h_1a1749369458e2282a22e862a619a3892c">eTaskState</link> <link linkend="_tasks_8c_1aab948efa7e3b657465cd06196b259ed7">eTaskGetState</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_tasks_8c_1a30334556d57da4f2bc8faf60dfa5b63b">uxTaskPriorityGet</link> (const <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_tasks_8c_1af4197dbd93e7f8c4a715c9d9829d4d60">uxTaskPriorityGetFromISR</link> (const <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a364e424f7bf8efced5738f44803f6580">vTaskPrioritySet</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxNewPriority)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a7fa54417f854974ae4a2b38729b60f12">vTaskSuspend</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToSuspend)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1ad8abaa814e2cfc4830c276415d0935bb">vTaskResume</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToResume)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1a17fb13e7325d9dee9dec76f4a736138b">xTaskResumeFromISR</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToResume)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a598661cdd2a6af95a077245d11e3d142">vTaskStartScheduler</link> (void)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1aeadc53d3d0d0ea3a6c7702a9eacbf452">vTaskEndScheduler</link> (void)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a084d232640bd1d04bcac0b8784417015">vTaskSuspendAll</link> (void)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1adf830ea0f150fcdfdaa944667137f080">xTaskResumeAll</link> (void)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> <link linkend="_tasks_8c_1a5fa24e36d5e1eeb57f5b73b72ea048e7">xTaskGetTickCount</link> (void)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> <link linkend="_tasks_8c_1ad58fd766b8f438b5703276f585738762">xTaskGetTickCountFromISR</link> (void)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_tasks_8c_1a4b660446c721df74158dddb9fc189c1e">uxTaskGetNumberOfTasks</link> (void)</para>
</listitem>
            <listitem><para>char * <link linkend="_tasks_8c_1acb1be57d03f6f1a3161b69e98df6ccb9">pcTaskGetName</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToQuery)</para>
</listitem>
            <listitem><para><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> <link linkend="_tasks_8c_1a86e945a322943dca5023dc49d1458b0c">xTaskGetHandle</link> (const char *pcNameToQuery)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_tasks_8c_1a5bd92b080086390cae790e5bd74bd018">uxTaskGetSystemState</link> (<link linkend="_task_8h_1ae5c0c4b9b2c8af5836583b2984ef5b6e">TaskStatus_t</link> *const pxTaskStatusArray, const <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxArraySize, uint32_t *const pulTotalRunTime)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1a54f31e9aef0eb7b87e48c7d68ecc84c1">xTaskIncrementTick</link> (void)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a9c86137bc3c1cbffc39fff22627cb885">vTaskSwitchContext</link> (void)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1adc9eb47ceecf7dd7ee325bebff9eafc5">vTaskPlaceOnEventList</link> (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *const pxEventList, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a0896d9cd10d789ef8dbb95c4959c3ce5">vTaskPlaceOnUnorderedEventList</link> (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *pxEventList, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xItemValue, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1ae8c3085adca5389867fd6267a44a2c7e">vTaskPlaceOnEventListRestricted</link> (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *const pxEventList, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait, const <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xWaitIndefinitely)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1a6d21c9054b62d8bc1bfb2724e11578d9">xTaskRemoveFromEventList</link> (const <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *const pxEventList)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a82d239ddcdd2d68abe14789b1257b11f">vTaskRemoveFromUnorderedEventList</link> (<link linkend="_list_8h_1a1a62d469392f9bfe2443e7efab9c8398">ListItem_t</link> *pxEventListItem, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xItemValue)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a5dfb2b9e41fb002318d9c55452a91c83">vTaskSetTimeOutState</link> (<link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link> *const pxTimeOut)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a91fbc7c4b65e32fae51b7d43ebdcb131">vTaskInternalSetTimeOutState</link> (<link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link> *const pxTimeOut)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1acfc8de487c86355713d0e8546506d9e4">xTaskCheckForTimeOut</link> (<link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link> *const pxTimeOut, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> *const pxTicksToWait)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a33c369f5f08ab96659f94093fdb985af">vTaskMissedYield</link> (void)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_tasks_8c_1a3d0244e50b0591b64cc05df68ed1217f">uxTaskGetTaskNumber</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a19139609bc1895960fcd85613c819a20">vTaskSetTaskNumber</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, const <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxHandle)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a8b1132bc3b01220a1b949c8006af0943">vTaskSetThreadLocalStoragePointer</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToSet, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xIndex, void *pvValue)</para>
</listitem>
            <listitem><para>void * <link linkend="_tasks_8c_1a7c95aced700fe8d9cc12326a3eb0e916">pvTaskGetThreadLocalStoragePointer</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToQuery, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xIndex)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a24b033eee266bdc8c3de63171a543f65">vTaskGetInfo</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, <link linkend="_task_8h_1ae5c0c4b9b2c8af5836583b2984ef5b6e">TaskStatus_t</link> *pxTaskStatus, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xGetFreeStackSpace, <link linkend="_task_8h_1a1749369458e2282a22e862a619a3892c">eTaskState</link> eState)</para>
</listitem>
            <listitem><para><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> <link linkend="_tasks_8c_1a28aaeed93d0de14da726f3a1a8c33251">xTaskGetCurrentTaskHandle</link> (void)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1a95ee42e80f8afd6815d4b7080717cd7f">xTaskGetSchedulerState</link> (void)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1ad84a9d66e311d48251c0334b3107165c">xTaskPriorityInherit</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> const pxMutexHolder)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1a5d3cae31dc49e7c8d552e7e16b226379">xTaskPriorityDisinherit</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> const pxMutexHolder)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a8d317cbb8311a0f572dbee9fe35ab01d">vTaskPriorityDisinheritAfterTimeout</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> const pxMutexHolder, <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxHighestPriorityWaitingTask)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> <link linkend="_tasks_8c_1a7ffe39eff8b9037b2de04f15a10ba717">uxTaskResetEventItemValue</link> (void)</para>
</listitem>
            <listitem><para><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> <link linkend="_tasks_8c_1a9ccf2385d919ea110e39b7b3420bec0d">pvTaskIncrementMutexHeldCount</link> (void)</para>
</listitem>
            <listitem><para>uint32_t <link linkend="_tasks_8c_1a1dd29cf3d25f9968ac86b0ca35af8ada">ulTaskNotifyTake</link> (<link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xClearCountOnExit, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1a7cab914767933dc732f2c36e3915f6b0">xTaskNotifyWait</link> (uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1ab7ac3722f088a5530f7ac58cd48a5e7a">xTaskGenericNotify</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToNotify, uint32_t ulValue, <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233">eNotifyAction</link> eAction, uint32_t *pulPreviousNotificationValue)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1a23102158140aa66fb3b9fd132cd53695">xTaskGenericNotifyFromISR</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToNotify, uint32_t ulValue, <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233">eNotifyAction</link> eAction, uint32_t *pulPreviousNotificationValue, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> *pxHigherPriorityTaskWoken)</para>
</listitem>
            <listitem><para>void <link linkend="_tasks_8c_1a0c31cb4be76285f05909de23ede05331">vTaskNotifyGiveFromISR</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToNotify, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> *pxHigherPriorityTaskWoken)</para>
</listitem>
            <listitem><para><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1a4cb6c908a9d2d733e9d519d7dc27bb34">xTaskNotifyStateClear</link> (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><link linkend="_tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453">TCB_t</link> *volatile <link linkend="_tasks_8c_1a1f2284b749c9706d04510853bd8e8f91">pxCurrentTCB</link> = NULL</para>
</listitem>
            <listitem><para>static <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> <link linkend="_tasks_8c_1ab4a8345f8c340d07086342c0dd92c972">pxReadyTasksLists</link> [(10)]</para>
</listitem>
            <listitem><para>static <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> <link linkend="_tasks_8c_1a07888d97f0712ee0b671b295c03ad19d">xDelayedTaskList1</link></para>
</listitem>
            <listitem><para>static <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> <link linkend="_tasks_8c_1aa53d90340a8a11b958e385cd170b8c6d">xDelayedTaskList2</link></para>
</listitem>
            <listitem><para>static <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *volatile <link linkend="_tasks_8c_1a30b4b716a99940e93fc9d4a13c1f81db">pxDelayedTaskList</link></para>
</listitem>
            <listitem><para>static <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *volatile <link linkend="_tasks_8c_1aae5cac9860aec54036f49920561a9705">pxOverflowDelayedTaskList</link></para>
</listitem>
            <listitem><para>static <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> <link linkend="_tasks_8c_1a73880e71e7ed72242d1a078685107421">xPendingReadyList</link></para>
</listitem>
            <listitem><para>static <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> <link linkend="_tasks_8c_1a9d5346b64d3da2ce013224df5f403005">xTasksWaitingTermination</link></para>
</listitem>
            <listitem><para>static volatile <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_tasks_8c_1ad31bb9fd9a09cc9045861dd458f54615">uxDeletedTasksWaitingCleanUp</link> = ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) 0U</para>
</listitem>
            <listitem><para>static <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> <link linkend="_tasks_8c_1aeeff59d101a1407ffc42f81fda83baca">xSuspendedTaskList</link></para>
</listitem>
            <listitem><para>static volatile <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_tasks_8c_1a54edd210c179ef9d185f5ebb020eaa5a">uxCurrentNumberOfTasks</link> = ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) 0U</para>
</listitem>
            <listitem><para>static volatile <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> <link linkend="_tasks_8c_1aaa88969a9b48aea401dbb1ff2b0ef4de">xTickCount</link> = ( <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> ) 0</para>
</listitem>
            <listitem><para>static volatile <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_tasks_8c_1a3fffd96ac9ae0d8b352ae10896ed4531">uxTopReadyPriority</link> = ( ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) 0U )</para>
</listitem>
            <listitem><para>static volatile <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1a1799bfbb95c907794761d18bd75faff5">xSchedulerRunning</link> = ( ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 0 )</para>
</listitem>
            <listitem><para>static volatile <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_tasks_8c_1a476a5b10aeb0bf39d29d6baccbc26f56">uxPendedTicks</link> = ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) 0U</para>
</listitem>
            <listitem><para>static volatile <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1a25abc99b92e910c1602028081e13b1b0">xYieldPending</link> = ( ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 0 )</para>
</listitem>
            <listitem><para>static volatile <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> <link linkend="_tasks_8c_1ab278ffe04bd2e0cdf4acdabdd7692306">xNumOfOverflows</link> = ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 0</para>
</listitem>
            <listitem><para>static <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_tasks_8c_1a47256f539ed98e54c6e5b025ccc68279">uxTaskNumber</link> = ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) 0U</para>
</listitem>
            <listitem><para>static volatile <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> <link linkend="_tasks_8c_1ac27aa725d8922f33f880005e72edec68">xNextTaskUnblockTime</link> = ( <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> ) 0U</para>
</listitem>
            <listitem><para>static <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> <link linkend="_tasks_8c_1ab1afeb7ccc3b00411775f107e31134ad">xIdleTaskHandle</link> = NULL</para>
</listitem>
            <listitem><para>static volatile <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> <link linkend="_tasks_8c_1a7522707fcf80b216e3a5b25ba464ec85">uxSchedulerSuspended</link> = ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) ( ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 0 )</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_tasks_8c_1aa637612832bcdd420acc9e6cc4361071"/><section>
    <title>configIDLE_TASK_NAME</title>
<indexterm><primary>configIDLE_TASK_NAME</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>configIDLE_TASK_NAME</secondary></indexterm>
<para><computeroutput>#define configIDLE_TASK_NAME&#160;&#160;&#160;&quot;IDLE&quot;</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00112">112</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ab622d8c674f2a417a666a7ed89109e79"/><section>
    <title>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</title>
<indexterm><primary>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</secondary></indexterm>
<para><computeroutput>#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00035">35</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b"/><section>
    <title>prvAddTaskToReadyList</title>
<indexterm><primary>prvAddTaskToReadyList</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvAddTaskToReadyList</secondary></indexterm>
<para><computeroutput>#define prvAddTaskToReadyList( pxTCB)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<link linkend="__free_r_t_o_s_8h_1a8c5050de556ff7e7cdbc7de55f46709d">traceMOVED_TASK_TO_READY_STATE</link>(&#32;pxTCB&#32;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;taskRECORD_READY_PRIORITY(&#32;(&#32;pxTCB&#32;)-&gt;uxPriority&#32;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;vListInsertEnd(&#32;&amp;(&#32;<link linkend="_tasks_8c_1ab4a8345f8c340d07086342c0dd92c972">pxReadyTasksLists</link>[&#32;(&#32;pxTCB&#32;)-&gt;uxPriority&#32;]&#32;),&#32;&amp;(&#32;(&#32;pxTCB&#32;)-&gt;xStateListItem&#32;)&#32;);&#32;\
&#32;&#32;&#32;&#32;tracePOST_MOVED_TASK_TO_READY_STATE(&#32;pxTCB&#32;)
</programlisting><para>
Definition at line <link linkend="_tasks_8c_source_1l00218">218</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b"/><section>
    <title>prvGetTCBFromHandle</title>
<indexterm><primary>prvGetTCBFromHandle</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvGetTCBFromHandle</secondary></indexterm>
<para><computeroutput>#define prvGetTCBFromHandle( pxHandle)&#160;&#160;&#160;( ( ( pxHandle ) == NULL ) ? <link linkend="_tasks_8c_1a1f2284b749c9706d04510853bd8e8f91">pxCurrentTCB</link> : ( pxHandle ) )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00231">231</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a3e36f3eda563e810a24ab36ee7c978d4"/><section>
    <title>taskEVENT_LIST_ITEM_VALUE_IN_USE</title>
<indexterm><primary>taskEVENT_LIST_ITEM_VALUE_IN_USE</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>taskEVENT_LIST_ITEM_VALUE_IN_USE</secondary></indexterm>
<para><computeroutput>#define taskEVENT_LIST_ITEM_VALUE_IN_USE&#160;&#160;&#160;0x80000000UL</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00244">244</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a4f2f023143b2cd2367a441e104f8cf2c"/><section>
    <title>taskNOT_WAITING_NOTIFICATION</title>
<indexterm><primary>taskNOT_WAITING_NOTIFICATION</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>taskNOT_WAITING_NOTIFICATION</secondary></indexterm>
<para><computeroutput>#define taskNOT_WAITING_NOTIFICATION&#160;&#160;&#160;( ( uint8_t ) 0 )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00068">68</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1aa62ac91d5f644c98b5459c28ae4f689e"/><section>
    <title>taskNOTIFICATION_RECEIVED</title>
<indexterm><primary>taskNOTIFICATION_RECEIVED</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>taskNOTIFICATION_RECEIVED</secondary></indexterm>
<para><computeroutput>#define taskNOTIFICATION_RECEIVED&#160;&#160;&#160;( ( uint8_t ) 2 )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00070">70</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a80c883536b1faef436fcd47b16a10f98"/><section>
    <title>taskRECORD_READY_PRIORITY</title>
<indexterm><primary>taskRECORD_READY_PRIORITY</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>taskRECORD_READY_PRIORITY</secondary></indexterm>
<para><computeroutput>#define taskRECORD_READY_PRIORITY( uxPriority)&#160;&#160;&#160;<link linkend="_portmacro_8h_1a113cd9b8401284194da8ddc4569aa484">portRECORD_READY_PRIORITY</link>( uxPriority, <link linkend="_tasks_8c_1a3fffd96ac9ae0d8b352ae10896ed4531">uxTopReadyPriority</link> )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00165">165</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a9517fc40d713aff9dd8182223948f9c8"/><section>
    <title>taskRESET_READY_PRIORITY</title>
<indexterm><primary>taskRESET_READY_PRIORITY</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>taskRESET_READY_PRIORITY</secondary></indexterm>
<para><computeroutput>#define taskRESET_READY_PRIORITY( uxPriority)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(&#32;<link linkend="_list_8h_1a18b4aded515bdc512017ea6e677a13bb">listCURRENT_LIST_LENGTH</link>(&#32;&amp;(&#32;<link linkend="_tasks_8c_1ab4a8345f8c340d07086342c0dd92c972">pxReadyTasksLists</link>[&#32;(&#32;uxPriority&#32;)&#32;]&#32;)&#32;)&#32;==&#32;(&#32;<link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link>&#32;)&#32;0&#32;)&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;portRESET_READY_PRIORITY(&#32;(&#32;uxPriority&#32;),&#32;(&#32;<link linkend="_tasks_8c_1a3fffd96ac9ae0d8b352ae10896ed4531">uxTopReadyPriority</link>&#32;)&#32;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}
</programlisting><para>
Definition at line <link linkend="_tasks_8c_source_1l00184">184</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1adace394d56a7fe7a8f8ee83edba3537c"/><section>
    <title>taskSELECT_HIGHEST_PRIORITY_TASK</title>
<indexterm><primary>taskSELECT_HIGHEST_PRIORITY_TASK</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>taskSELECT_HIGHEST_PRIORITY_TASK</secondary></indexterm>
<para><computeroutput>#define taskSELECT_HIGHEST_PRIORITY_TASK( )</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;<link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link>&#32;uxTopPriority;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Find&#32;the&#32;highest&#32;priority&#32;list&#32;that&#32;contains&#32;ready&#32;tasks.&#32;*/</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;portGET_HIGHEST_PRIORITY(&#32;uxTopPriority,&#32;<link linkend="_tasks_8c_1a3fffd96ac9ae0d8b352ae10896ed4531">uxTopReadyPriority</link>&#32;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;configASSERT(&#32;<link linkend="_list_8h_1a18b4aded515bdc512017ea6e677a13bb">listCURRENT_LIST_LENGTH</link>(&#32;&amp;(&#32;<link linkend="_tasks_8c_1ab4a8345f8c340d07086342c0dd92c972">pxReadyTasksLists</link>[&#32;uxTopPriority&#32;]&#32;)&#32;)&#32;&gt;&#32;0&#32;);&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;listGET_OWNER_OF_NEXT_ENTRY(&#32;<link linkend="_tasks_8c_1a1f2284b749c9706d04510853bd8e8f91">pxCurrentTCB</link>,&#32;&amp;(&#32;<link linkend="_tasks_8c_1ab4a8345f8c340d07086342c0dd92c972">pxReadyTasksLists</link>[&#32;uxTopPriority&#32;]&#32;)&#32;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">/*&#32;taskSELECT_HIGHEST_PRIORITY_TASK()&#32;*/</emphasis>
</programlisting><para>
Definition at line <link linkend="_tasks_8c_source_1l00169">169</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1aa604b7713b82e63154a290e21ecf700c"/><section>
    <title>taskSWITCH_DELAYED_LISTS</title>
<indexterm><primary>taskSWITCH_DELAYED_LISTS</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>taskSWITCH_DELAYED_LISTS</secondary></indexterm>
<para><computeroutput>#define taskSWITCH_DELAYED_LISTS( )</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;<link linkend="_structx_l_i_s_t">List_t</link>&#32;*pxTemp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\

&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;delayed&#32;tasks&#32;list&#32;should&#32;be&#32;empty&#32;when&#32;the&#32;lists&#32;are&#32;switched.&#32;*/</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;configASSERT(&#32;(&#32;<link linkend="_list_8h_1aaba6eb05d67ebc8026bea29193eca28f">listLIST_IS_EMPTY</link>(&#32;<link linkend="_tasks_8c_1a30b4b716a99940e93fc9d4a13c1f81db">pxDelayedTaskList</link>&#32;)&#32;)&#32;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\

&#32;&#32;&#32;&#32;pxTemp&#32;=&#32;<link linkend="_tasks_8c_1a30b4b716a99940e93fc9d4a13c1f81db">pxDelayedTaskList</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;<link linkend="_tasks_8c_1a30b4b716a99940e93fc9d4a13c1f81db">pxDelayedTaskList</link>&#32;=&#32;<link linkend="_tasks_8c_1aae5cac9860aec54036f49920561a9705">pxOverflowDelayedTaskList</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;<link linkend="_tasks_8c_1aae5cac9860aec54036f49920561a9705">pxOverflowDelayedTaskList</link>&#32;=&#32;pxTemp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;<link linkend="_tasks_8c_1ab278ffe04bd2e0cdf4acdabdd7692306">xNumOfOverflows</link>++;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;prvResetNextTaskUnblockTime();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
}
</programlisting><para>
Definition at line <link linkend="_tasks_8c_source_1l00198">198</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1acee66205293e253c13626e74798a0cf0"/><section>
    <title>taskWAITING_NOTIFICATION</title>
<indexterm><primary>taskWAITING_NOTIFICATION</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>taskWAITING_NOTIFICATION</secondary></indexterm>
<para><computeroutput>#define taskWAITING_NOTIFICATION&#160;&#160;&#160;( ( uint8_t ) 1 )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00069">69</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1acd0c920e40647de517ac633965b52273"/><section>
    <title>taskYIELD_IF_USING_PREEMPTION</title>
<indexterm><primary>taskYIELD_IF_USING_PREEMPTION</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>taskYIELD_IF_USING_PREEMPTION</secondary></indexterm>
<para><computeroutput>#define taskYIELD_IF_USING_PREEMPTION( )&#160;&#160;&#160;<link linkend="__free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e">portYIELD_WITHIN_API</link>()</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00064">64</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a4cd87df39bdffff557d06f4ff15a30b0"/><section>
    <title>tskBLOCKED_CHAR</title>
<indexterm><primary>tskBLOCKED_CHAR</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>tskBLOCKED_CHAR</secondary></indexterm>
<para><computeroutput>#define tskBLOCKED_CHAR&#160;&#160;&#160;( &apos;B&apos; )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00096">96</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a9aba572191d065741f5a3e94c416d455"/><section>
    <title>tskDELETED_CHAR</title>
<indexterm><primary>tskDELETED_CHAR</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>tskDELETED_CHAR</secondary></indexterm>
<para><computeroutput>#define tskDELETED_CHAR&#160;&#160;&#160;( &apos;D&apos; )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00098">98</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1af06a1633d2fb92f67712e62f3d1c3777"/><section>
    <title>tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB</title>
<indexterm><primary>tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB</secondary></indexterm>
<para><computeroutput>#define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB&#160;&#160;&#160;( ( uint8_t ) 0 )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00079">79</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a2fd6c7a58ad28dd1f2c1e322b1ab3fcb"/><section>
    <title>tskREADY_CHAR</title>
<indexterm><primary>tskREADY_CHAR</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>tskREADY_CHAR</secondary></indexterm>
<para><computeroutput>#define tskREADY_CHAR&#160;&#160;&#160;( &apos;R&apos; )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00097">97</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a13f2f32dab5dee7a9b2c848c88ef9bcc"/><section>
    <title>tskRUNNING_CHAR</title>
<indexterm><primary>tskRUNNING_CHAR</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>tskRUNNING_CHAR</secondary></indexterm>
<para><computeroutput>#define tskRUNNING_CHAR&#160;&#160;&#160;( &apos;X&apos; )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00095">95</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a95d95c8702f95db8a8a446e1d083245a"/><section>
    <title>tskSET_NEW_STACKS_TO_KNOWN_VALUE</title>
<indexterm><primary>tskSET_NEW_STACKS_TO_KNOWN_VALUE</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>tskSET_NEW_STACKS_TO_KNOWN_VALUE</secondary></indexterm>
<para><computeroutput>#define tskSET_NEW_STACKS_TO_KNOWN_VALUE&#160;&#160;&#160;1</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00087">87</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ad3b1c99066f14855be098ccca1685fac"/><section>
    <title>tskSTACK_FILL_BYTE</title>
<indexterm><primary>tskSTACK_FILL_BYTE</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>tskSTACK_FILL_BYTE</secondary></indexterm>
<para><computeroutput>#define tskSTACK_FILL_BYTE&#160;&#160;&#160;( 0xa5U )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00076">76</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a9851e50775136d536fed623e1ac598aa"/><section>
    <title>tskSTATICALLY_ALLOCATED_STACK_AND_TCB</title>
<indexterm><primary>tskSTATICALLY_ALLOCATED_STACK_AND_TCB</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>tskSTATICALLY_ALLOCATED_STACK_AND_TCB</secondary></indexterm>
<para><computeroutput>#define tskSTATICALLY_ALLOCATED_STACK_AND_TCB&#160;&#160;&#160;( ( uint8_t ) 2 )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00081">81</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ad65be2320d426aca4e0e72d29ccd04de"/><section>
    <title>tskSTATICALLY_ALLOCATED_STACK_ONLY</title>
<indexterm><primary>tskSTATICALLY_ALLOCATED_STACK_ONLY</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>tskSTATICALLY_ALLOCATED_STACK_ONLY</secondary></indexterm>
<para><computeroutput>#define tskSTATICALLY_ALLOCATED_STACK_ONLY&#160;&#160;&#160;( ( uint8_t ) 1 )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00080">80</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a3613b4b66406c8f6cc73e5c3e9f208db"/><section>
    <title>tskSUSPENDED_CHAR</title>
<indexterm><primary>tskSUSPENDED_CHAR</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>tskSUSPENDED_CHAR</secondary></indexterm>
<para><computeroutput>#define tskSUSPENDED_CHAR&#160;&#160;&#160;( &apos;S&apos; )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00099">99</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453"/><section>
    <title>TCB_t</title>
<indexterm><primary>TCB_t</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>TCB_t</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_tasks_8c_1a67b1ddede4e49c946dd720d83c5838a5">tskTCB</link> <link linkend="_tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453">TCB_t</link></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00330">330</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a67b1ddede4e49c946dd720d83c5838a5"/><section>
    <title>tskTCB</title>
<indexterm><primary>tskTCB</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>tskTCB</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_structtsk_task_control_block">tskTaskControlBlock</link> <link linkend="_tasks_8c_1a67b1ddede4e49c946dd720d83c5838a5">tskTCB</link></computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_tasks_8c_1aab948efa7e3b657465cd06196b259ed7"/><section>
    <title>eTaskGetState()</title>
<indexterm><primary>eTaskGetState</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>eTaskGetState</secondary></indexterm>
<para><computeroutput><link linkend="_task_8h_1a1749369458e2282a22e862a619a3892c">eTaskState</link> eTaskGetState (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</computeroutput></para>
<para>task. h <literallayout>eTaskState <link linkend="_task_8h_1a954df77397d616484edb7c58c7760b10">eTaskGetState( TaskHandle_t xTask )</link>;</literallayout></para>

<para>INCLUDE_eTaskGetState must be defined as 1 for this function to be available. See the configuration section for more information.</para>

<para>Obtain the state of any task. States are encoded by the eTaskState enumerated type.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xTask</entry><entry>
<para>Handle of the task to be queried.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The state of xTask at the time the function was called. Note the state of the task might change between the function being called, and the functions return value being tested by the calling task. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_tasks_8c_source_1l01378">1378</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1acb1be57d03f6f1a3161b69e98df6ccb9"/><section>
    <title>pcTaskGetName()</title>
<indexterm><primary>pcTaskGetName</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>pcTaskGetName</secondary></indexterm>
<para><computeroutput>char * pcTaskGetName (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToQuery)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02337">2337</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ab4574e77d9aea876272e563c68f639da"/><section>
    <title>prvAddCurrentTaskToDelayedList()</title>
<indexterm><primary>prvAddCurrentTaskToDelayedList</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvAddCurrentTaskToDelayedList</secondary></indexterm>
<para><computeroutput>static void prvAddCurrentTaskToDelayedList (<link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait, const <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xCanBlockIndefinitely)<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l05081">5081</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e"/><section>
    <title>prvAddNewTaskToReadyList()</title>
<indexterm><primary>prvAddNewTaskToReadyList</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvAddNewTaskToReadyList</secondary></indexterm>
<para><computeroutput>static void prvAddNewTaskToReadyList (<link linkend="_tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453">TCB_t</link> * pxNewTCB)<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01072">1072</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a903096c962a2bc907f4b902a7d42302a"/><section>
    <title>prvCheckTasksWaitingTermination()</title>
<indexterm><primary>prvCheckTasksWaitingTermination</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvCheckTasksWaitingTermination</secondary></indexterm>
<para><computeroutput>static void prvCheckTasksWaitingTermination (void )<computeroutput>[static]</computeroutput></computeroutput></para>
<para>THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK</para>
<para>
Definition at line <link linkend="_tasks_8c_source_1l03578">3578</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ad538c599036f7914942471780230ffa6"/><section>
    <title>prvDeleteTCB()</title>
<indexterm><primary>prvDeleteTCB</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvDeleteTCB</secondary></indexterm>
<para><computeroutput>static void prvDeleteTCB (<link linkend="_tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453">TCB_t</link> * pxTCB)<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03826">3826</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1af0212702c981e5413a318c0346ac37b2"/><section>
    <title>prvIdleTask()</title>
<indexterm><primary>prvIdleTask</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvIdleTask</secondary></indexterm>
<para><computeroutput>static void prvIdleTask (void * pvParameters)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE SCHEDULER IS STARTED.</para>
<para>
Definition at line <link linkend="_tasks_8c_source_1l03333">3333</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a6c4d7ca7b68c92ae0d62edd7ecdd8e31"/><section>
    <title>prvInitialiseNewTask()</title>
<indexterm><primary>prvInitialiseNewTask</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvInitialiseNewTask</secondary></indexterm>
<para><computeroutput>static void prvInitialiseNewTask (<link linkend="_projdefs_8h_1a9b32502ff92c255c686dacde53c1cba0">TaskFunction_t</link> pxTaskCode, const char *const pcName, const uint32_t ulStackDepth, void *const pvParameters, <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxPriority, <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> *const pxCreatedTask, <link linkend="_tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453">TCB_t</link> * pxNewTCB, const <link linkend="_task_8h_1abc1e4d1b3f52e2a9101487e1831b992a">MemoryRegion_t</link> *const xRegions)<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00821">821</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19"/><section>
    <title>prvInitialiseTaskLists()</title>
<indexterm><primary>prvInitialiseTaskLists</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvInitialiseTaskLists</secondary></indexterm>
<para><computeroutput>static void prvInitialiseTaskLists (void )<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03546">3546</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a76a09ef72cff5e96bdfb4f9e882f4cfe"/><section>
    <title>prvListTasksWithinSingleList()</title>
<indexterm><primary>prvListTasksWithinSingleList</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvListTasksWithinSingleList</secondary></indexterm>
<para><computeroutput>static <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> prvListTasksWithinSingleList (<link linkend="_task_8h_1ae5c0c4b9b2c8af5836583b2984ef5b6e">TaskStatus_t</link> * pxTaskStatusArray, <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> * pxList, <link linkend="_task_8h_1a1749369458e2282a22e862a619a3892c">eTaskState</link> eState)<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03705">3705</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ad1b2e4995f863a99cf980836efe330d7"/><section>
    <title>prvResetNextTaskUnblockTime()</title>
<indexterm><primary>prvResetNextTaskUnblockTime</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvResetNextTaskUnblockTime</secondary></indexterm>
<para><computeroutput>static void prvResetNextTaskUnblockTime (void )<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03880">3880</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a2a2eca63c8d866fff6851e2096881382"/><section>
    <title>prvSearchForNameWithinSingleList()</title>
<indexterm><primary>prvSearchForNameWithinSingleList</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvSearchForNameWithinSingleList</secondary></indexterm>
<para><computeroutput>static <link linkend="_tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453">TCB_t</link> * prvSearchForNameWithinSingleList (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> * pxList, const char pcNameToQuery[])<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02351">2351</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1aaba9e72c97964b8d9496e8dbdd40aa60"/><section>
    <title>prvTaskCheckFreeStackSpace()</title>
<indexterm><primary>prvTaskCheckFreeStackSpace</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvTaskCheckFreeStackSpace</secondary></indexterm>
<para><computeroutput>static uint16_t prvTaskCheckFreeStackSpace (const uint8_t * pucStackByte)<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03738">3738</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1abefde0f5ca141ae3d6e25f66a5234082"/><section>
    <title>prvTaskIsTaskSuspended()</title>
<indexterm><primary>prvTaskIsTaskSuspended</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>prvTaskIsTaskSuspended</secondary></indexterm>
<para><computeroutput>static <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> prvTaskIsTaskSuspended (const <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Utility task that simply returns pdTRUE if the task referenced by xTask is currently in the Suspended state, or pdFALSE if the task referenced by xTask is in any other state. </para>
<para>
Definition at line <link linkend="_tasks_8c_source_1l01797">1797</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a7c95aced700fe8d9cc12326a3eb0e916"/><section>
    <title>pvTaskGetThreadLocalStoragePointer()</title>
<indexterm><primary>pvTaskGetThreadLocalStoragePointer</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>pvTaskGetThreadLocalStoragePointer</secondary></indexterm>
<para><computeroutput>void * pvTaskGetThreadLocalStoragePointer (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToQuery, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xIndex)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03509">3509</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a9ccf2385d919ea110e39b7b3420bec0d"/><section>
    <title>pvTaskIncrementMutexHeldCount()</title>
<indexterm><primary>pvTaskIncrementMutexHeldCount</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>pvTaskIncrementMutexHeldCount</secondary></indexterm>
<para><computeroutput><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> pvTaskIncrementMutexHeldCount (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04549">4549</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a1dd29cf3d25f9968ac86b0ca35af8ada"/><section>
    <title>ulTaskNotifyTake()</title>
<indexterm><primary>ulTaskNotifyTake</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>ulTaskNotifyTake</secondary></indexterm>
<para><computeroutput>uint32_t ulTaskNotifyTake (<link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xClearCountOnExit, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04566">4566</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a4b660446c721df74158dddb9fc189c1e"/><section>
    <title>uxTaskGetNumberOfTasks()</title>
<indexterm><primary>uxTaskGetNumberOfTasks</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>uxTaskGetNumberOfTasks</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxTaskGetNumberOfTasks (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02329">2329</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a5bd92b080086390cae790e5bd74bd018"/><section>
    <title>uxTaskGetSystemState()</title>
<indexterm><primary>uxTaskGetSystemState</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>uxTaskGetSystemState</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxTaskGetSystemState (<link linkend="_task_8h_1ae5c0c4b9b2c8af5836583b2984ef5b6e">TaskStatus_t</link> *const pxTaskStatusArray, const <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxArraySize, uint32_t *const pulTotalRunTime)</computeroutput></para>
<para>configUSE_TRACE_FACILITY must be defined as 1 in <link linkend="__free_r_t_o_s_config_8h">FreeRTOSConfig.h</link> for <link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState()</link> to be available.</para>

<para><link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState()</link> populates an TaskStatus_t structure for each task in the system. TaskStatus_t structures contain, among other things, members for the task handle, task name, task priority, task state, and total amount of run time consumed by the task. See the TaskStatus_t structure definition in this file for the full member list.</para>

<para>NOTE: This function is intended for debugging use only as its use results in the scheduler remaining suspended for an extended period.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pxTaskStatusArray</entry><entry>
<para>A pointer to an array of TaskStatus_t structures. The array must contain at least one TaskStatus_t structure for each task that is under the control of the RTOS. The number of tasks under the control of the RTOS can be determined using the <link linkend="_task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a">uxTaskGetNumberOfTasks()</link> API function.</para>
</entry>
                            </row>
                            <row>
<entry>uxArraySize</entry><entry>
<para>The size of the array pointed to by the pxTaskStatusArray parameter. The size is specified as the number of indexes in the array, or the number of TaskStatus_t structures contained in the array, not by the number of bytes in the array.</para>
</entry>
                            </row>
                            <row>
<entry>pulTotalRunTime</entry><entry>
<para>If configGENERATE_RUN_TIME_STATS is set to 1 in <link linkend="__free_r_t_o_s_config_8h">FreeRTOSConfig.h</link> then *pulTotalRunTime is set by <link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState()</link> to the total run time (as defined by the run time stats clock, see <link xlink:href="http://www.freertos.org/rtos-run-time-stats.html">http://www.freertos.org/rtos-run-time-stats.html</link>) since the target booted. pulTotalRunTime can be set to NULL to omit the total run time information.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The number of TaskStatus_t structures that were populated by <link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState()</link>. This should equal the number returned by the <link linkend="_task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a">uxTaskGetNumberOfTasks()</link> API function, but will be zero if the value passed in the uxArraySize parameter was too small.</para>
</formalpara>
Example usage: <literallayout>
 // This example demonstrates how a human readable table of run time stats
 // information is generated from raw data provided by <link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState()</link>.
 // The human readable table is written to pcWriteBuffer
 void <link linkend="_task_8h_1a52da9b427041a48dc9f6802e10f151d4">vTaskGetRunTimeStats( char *pcWriteBuffer )</link>
 {
 TaskStatus_t *pxTaskStatusArray;
 volatile UBaseType_t uxArraySize, x;
 uint32_t ulTotalRunTime, ulStatsAsPercentage;

    // Make sure the write buffer does not contain a string.
    *pcWriteBuffer = 0x00;

    // Take a snapshot of the number of tasks in case it changes while this
    // function is executing.
    uxArraySize = <link linkend="_task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a">uxTaskGetNumberOfTasks()</link>;

    // Allocate a TaskStatus_t structure for each task.  An array could be
    // allocated statically at compile time.
    pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );

    if( pxTaskStatusArray != NULL )
    {
        // Generate raw status information about each task.
        uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &amp;ulTotalRunTime );

        // For percentage calculations.
        ulTotalRunTime /= 100UL;

        // Avoid divide by zero errors.
        if( ulTotalRunTime &gt; 0 )
        {
            // For each populated position in the pxTaskStatusArray array,
            // format the raw data as human readable ASCII data
            for( x = 0; x &lt; uxArraySize; x++ )
            {
                // What percentage of the total run time has the task used?
                // This will always be rounded down to the nearest integer.
                // ulTotalRunTimeDiv100 has already been divided by 100.
                ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;

                if( ulStatsAsPercentage &gt; 0UL )
                {
                    sprintf( pcWriteBuffer, &quot;%s\t\t%lu\t\t%lu%%\r\n&quot;, pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );
                }
                else
                {
                    // If the percentage is zero here then the task has
                    // consumed less than 1% of the total run time.
                    sprintf( pcWriteBuffer, &quot;%s\t\t%lu\t\t&lt;1%%\r\n&quot;, pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );
                }

                pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
            }
        }

        // The array is no longer needed, free the memory it consumes.
        vPortFree( pxTaskStatusArray );
    }
 }
 </literallayout> </para>
<para>
Definition at line <link linkend="_tasks_8c_source_1l02484">2484</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a3d0244e50b0591b64cc05df68ed1217f"/><section>
    <title>uxTaskGetTaskNumber()</title>
<indexterm><primary>uxTaskGetTaskNumber</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>uxTaskGetTaskNumber</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxTaskGetTaskNumber (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03286">3286</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a30334556d57da4f2bc8faf60dfa5b63b"/><section>
    <title>uxTaskPriorityGet()</title>
<indexterm><primary>uxTaskPriorityGet</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>uxTaskPriorityGet</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxTaskPriorityGet (const <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01470">1470</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1af4197dbd93e7f8c4a715c9d9829d4d60"/><section>
    <title>uxTaskPriorityGetFromISR()</title>
<indexterm><primary>uxTaskPriorityGetFromISR</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>uxTaskPriorityGetFromISR</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxTaskPriorityGetFromISR (const <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</computeroutput></para>
<para>task. h <literallayout>UBaseType_t <link linkend="_task_8h_1a772bdcb1ae3cb58b0f12a172357f4a06">uxTaskPriorityGetFromISR( const TaskHandle_t xTask )</link>;</literallayout></para>

<para>A version of <link linkend="_task_8h_1a18d1148c845f5c4bff3b9e5b2077e058">uxTaskPriorityGet()</link> that can be used from an ISR. </para>
<para>
Definition at line <link linkend="_tasks_8c_source_1l01492">1492</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a7ffe39eff8b9037b2de04f15a10ba717"/><section>
    <title>uxTaskResetEventItemValue()</title>
<indexterm><primary>uxTaskResetEventItemValue</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>uxTaskResetEventItemValue</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> uxTaskResetEventItemValue (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04533">4533</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a9917b05abb77e75e959151ae67065dce"/><section>
    <title>vTaskDelay()</title>
<indexterm><primary>vTaskDelay</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskDelay</secondary></indexterm>
<para><computeroutput>void vTaskDelay (const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToDelay)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01333">1333</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1abbc32467f223c78ba36f577b56a32897"/><section>
    <title>vTaskDelayUntil()</title>
<indexterm><primary>vTaskDelayUntil</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskDelayUntil</secondary></indexterm>
<para><computeroutput>void vTaskDelayUntil (<link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> *const pxPreviousWakeTime, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTimeIncrement)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01249">1249</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1af9cf8dedc1248f4351d3cb5910e33d7a"/><section>
    <title>vTaskDelete()</title>
<indexterm><primary>vTaskDelete</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskDelete</secondary></indexterm>
<para><computeroutput>void vTaskDelete (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToDelete)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01157">1157</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1aeadc53d3d0d0ea3a6c7702a9eacbf452"/><section>
    <title>vTaskEndScheduler()</title>
<indexterm><primary>vTaskEndScheduler</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskEndScheduler</secondary></indexterm>
<para><computeroutput>void vTaskEndScheduler (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02089">2089</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a24b033eee266bdc8c3de63171a543f65"/><section>
    <title>vTaskGetInfo()</title>
<indexterm><primary>vTaskGetInfo</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskGetInfo</secondary></indexterm>
<para><computeroutput>void vTaskGetInfo (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, <link linkend="_task_8h_1ae5c0c4b9b2c8af5836583b2984ef5b6e">TaskStatus_t</link> * pxTaskStatus, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xGetFreeStackSpace, <link linkend="_task_8h_1a1749369458e2282a22e862a619a3892c">eTaskState</link> eState)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03609">3609</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a91fbc7c4b65e32fae51b7d43ebdcb131"/><section>
    <title>vTaskInternalSetTimeOutState()</title>
<indexterm><primary>vTaskInternalSetTimeOutState</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskInternalSetTimeOutState</secondary></indexterm>
<para><computeroutput>void vTaskInternalSetTimeOutState (<link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link> *const pxTimeOut)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03207">3207</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a33c369f5f08ab96659f94093fdb985af"/><section>
    <title>vTaskMissedYield()</title>
<indexterm><primary>vTaskMissedYield</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskMissedYield</secondary></indexterm>
<para><computeroutput>void vTaskMissedYield (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03278">3278</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a0c31cb4be76285f05909de23ede05331"/><section>
    <title>vTaskNotifyGiveFromISR()</title>
<indexterm><primary>vTaskNotifyGiveFromISR</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskNotifyGiveFromISR</secondary></indexterm>
<para><computeroutput>void vTaskNotifyGiveFromISR (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToNotify, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> * pxHigherPriorityTaskWoken)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04957">4957</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1adc9eb47ceecf7dd7ee325bebff9eafc5"/><section>
    <title>vTaskPlaceOnEventList()</title>
<indexterm><primary>vTaskPlaceOnEventList</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskPlaceOnEventList</secondary></indexterm>
<para><computeroutput>void vTaskPlaceOnEventList (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *const pxEventList, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03019">3019</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ae8c3085adca5389867fd6267a44a2c7e"/><section>
    <title>vTaskPlaceOnEventListRestricted()</title>
<indexterm><primary>vTaskPlaceOnEventListRestricted</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskPlaceOnEventListRestricted</secondary></indexterm>
<para><computeroutput>void vTaskPlaceOnEventListRestricted (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *const pxEventList, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait, const <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xWaitIndefinitely)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03062">3062</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a0896d9cd10d789ef8dbb95c4959c3ce5"/><section>
    <title>vTaskPlaceOnUnorderedEventList()</title>
<indexterm><primary>vTaskPlaceOnUnorderedEventList</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskPlaceOnUnorderedEventList</secondary></indexterm>
<para><computeroutput>void vTaskPlaceOnUnorderedEventList (<link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> * pxEventList, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xItemValue, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03036">3036</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a8d317cbb8311a0f572dbee9fe35ab01d"/><section>
    <title>vTaskPriorityDisinheritAfterTimeout()</title>
<indexterm><primary>vTaskPriorityDisinheritAfterTimeout</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskPriorityDisinheritAfterTimeout</secondary></indexterm>
<para><computeroutput>void vTaskPriorityDisinheritAfterTimeout (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> const pxMutexHolder, <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxHighestPriorityWaitingTask)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04118">4118</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a364e424f7bf8efced5738f44803f6580"/><section>
    <title>vTaskPrioritySet()</title>
<indexterm><primary>vTaskPrioritySet</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskPrioritySet</secondary></indexterm>
<para><computeroutput>void vTaskPrioritySet (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxNewPriority)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01532">1532</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a82d239ddcdd2d68abe14789b1257b11f"/><section>
    <title>vTaskRemoveFromUnorderedEventList()</title>
<indexterm><primary>vTaskRemoveFromUnorderedEventList</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskRemoveFromUnorderedEventList</secondary></indexterm>
<para><computeroutput>void vTaskRemoveFromUnorderedEventList (<link linkend="_list_8h_1a1a62d469392f9bfe2443e7efab9c8398">ListItem_t</link> * pxEventListItem, const <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xItemValue)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03161">3161</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ad8abaa814e2cfc4830c276415d0935bb"/><section>
    <title>vTaskResume()</title>
<indexterm><primary>vTaskResume</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskResume</secondary></indexterm>
<para><computeroutput>void vTaskResume (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToResume)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01843">1843</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a19139609bc1895960fcd85613c819a20"/><section>
    <title>vTaskSetTaskNumber()</title>
<indexterm><primary>vTaskSetTaskNumber</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskSetTaskNumber</secondary></indexterm>
<para><computeroutput>void vTaskSetTaskNumber (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask, const <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxHandle)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03309">3309</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a8b1132bc3b01220a1b949c8006af0943"/><section>
    <title>vTaskSetThreadLocalStoragePointer()</title>
<indexterm><primary>vTaskSetThreadLocalStoragePointer</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskSetThreadLocalStoragePointer</secondary></indexterm>
<para><computeroutput>void vTaskSetThreadLocalStoragePointer (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToSet, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xIndex, void * pvValue)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03493">3493</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a5dfb2b9e41fb002318d9c55452a91c83"/><section>
    <title>vTaskSetTimeOutState()</title>
<indexterm><primary>vTaskSetTimeOutState</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskSetTimeOutState</secondary></indexterm>
<para><computeroutput>void vTaskSetTimeOutState (<link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link> *const pxTimeOut)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03195">3195</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a598661cdd2a6af95a077245d11e3d142"/><section>
    <title>vTaskStartScheduler()</title>
<indexterm><primary>vTaskStartScheduler</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskStartScheduler</secondary></indexterm>
<para><computeroutput>void vTaskStartScheduler (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01967">1967</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a7fa54417f854974ae4a2b38729b60f12"/><section>
    <title>vTaskSuspend()</title>
<indexterm><primary>vTaskSuspend</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskSuspend</secondary></indexterm>
<para><computeroutput>void vTaskSuspend (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToSuspend)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01696">1696</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a084d232640bd1d04bcac0b8784417015"/><section>
    <title>vTaskSuspendAll()</title>
<indexterm><primary>vTaskSuspendAll</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskSuspendAll</secondary></indexterm>
<para><computeroutput>void vTaskSuspendAll (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02100">2100</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a9c86137bc3c1cbffc39fff22627cb885"/><section>
    <title>vTaskSwitchContext()</title>
<indexterm><primary>vTaskSwitchContext</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>vTaskSwitchContext</secondary></indexterm>
<para><computeroutput>void vTaskSwitchContext (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02946">2946</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1acfc8de487c86355713d0e8546506d9e4"/><section>
    <title>xTaskCheckForTimeOut()</title>
<indexterm><primary>xTaskCheckForTimeOut</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskCheckForTimeOut</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskCheckForTimeOut (<link linkend="_task_8h_1a558b407b5433bee1696535e3c4816bdf">TimeOut_t</link> *const pxTimeOut, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> *const pxTicksToWait)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03215">3215</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1"/><section>
    <title>xTaskCreate()</title>
<indexterm><primary>xTaskCreate</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskCreate</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskCreate (<link linkend="_projdefs_8h_1a9b32502ff92c255c686dacde53c1cba0">TaskFunction_t</link> pxTaskCode, const char *const pcName, const uint16_t usStackDepth, void *const pvParameters, <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxPriority, <link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> *const pxCreatedTask)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00730">730</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ab7ac3722f088a5530f7ac58cd48a5e7a"/><section>
    <title>xTaskGenericNotify()</title>
<indexterm><primary>xTaskGenericNotify</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskGenericNotify</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskGenericNotify (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToNotify, uint32_t ulValue, <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233">eNotifyAction</link> eAction, uint32_t * pulPreviousNotificationValue)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04714">4714</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a23102158140aa66fb3b9fd132cd53695"/><section>
    <title>xTaskGenericNotifyFromISR()</title>
<indexterm><primary>xTaskGenericNotifyFromISR</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskGenericNotifyFromISR</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskGenericNotifyFromISR (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToNotify, uint32_t ulValue, <link linkend="_task_8h_1ae8abc4f7da5b6880467daafbf19cd233">eNotifyAction</link> eAction, uint32_t * pulPreviousNotificationValue, <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> * pxHigherPriorityTaskWoken)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04828">4828</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a28aaeed93d0de14da726f3a1a8c33251"/><section>
    <title>xTaskGetCurrentTaskHandle()</title>
<indexterm><primary>xTaskGetCurrentTaskHandle</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskGetCurrentTaskHandle</secondary></indexterm>
<para><computeroutput><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskGetCurrentTaskHandle (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03906">3906</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a86e945a322943dca5023dc49d1458b0c"/><section>
    <title>xTaskGetHandle()</title>
<indexterm><primary>xTaskGetHandle</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskGetHandle</secondary></indexterm>
<para><computeroutput><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskGetHandle (const char * pcNameToQuery)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02419">2419</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a95ee42e80f8afd6815d4b7080717cd7f"/><section>
    <title>xTaskGetSchedulerState()</title>
<indexterm><primary>xTaskGetSchedulerState</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskGetSchedulerState</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskGetSchedulerState (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03923">3923</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a5fa24e36d5e1eeb57f5b73b72ea048e7"/><section>
    <title>xTaskGetTickCount()</title>
<indexterm><primary>xTaskGetTickCount</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskGetTickCount</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTaskGetTickCount (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02283">2283</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ad58fd766b8f438b5703276f585738762"/><section>
    <title>xTaskGetTickCountFromISR()</title>
<indexterm><primary>xTaskGetTickCountFromISR</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskGetTickCountFromISR</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTaskGetTickCountFromISR (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02298">2298</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a54f31e9aef0eb7b87e48c7d68ecc84c1"/><section>
    <title>xTaskIncrementTick()</title>
<indexterm><primary>xTaskIncrementTick</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskIncrementTick</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskIncrementTick (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02664">2664</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a4cb6c908a9d2d733e9d519d7dc27bb34"/><section>
    <title>xTaskNotifyStateClear()</title>
<indexterm><primary>xTaskNotifyStateClear</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskNotifyStateClear</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskNotifyStateClear (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTask)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l05044">5044</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a7cab914767933dc732f2c36e3915f6b0"/><section>
    <title>xTaskNotifyWait()</title>
<indexterm><primary>xTaskNotifyWait</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskNotifyWait</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskNotifyWait (uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t * pulNotificationValue, <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTicksToWait)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04634">4634</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a5d3cae31dc49e7c8d552e7e16b226379"/><section>
    <title>xTaskPriorityDisinherit()</title>
<indexterm><primary>xTaskPriorityDisinherit</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskPriorityDisinherit</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskPriorityDisinherit (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> const pxMutexHolder)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l04038">4038</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ad84a9d66e311d48251c0334b3107165c"/><section>
    <title>xTaskPriorityInherit()</title>
<indexterm><primary>xTaskPriorityInherit</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskPriorityInherit</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskPriorityInherit (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> const pxMutexHolder)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03951">3951</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a6d21c9054b62d8bc1bfb2724e11578d9"/><section>
    <title>xTaskRemoveFromEventList()</title>
<indexterm><primary>xTaskRemoveFromEventList</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskRemoveFromEventList</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskRemoveFromEventList (const <link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> *const pxEventList)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l03093">3093</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1adf830ea0f150fcdfdaa944667137f080"/><section>
    <title>xTaskResumeAll()</title>
<indexterm><primary>xTaskResumeAll</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskResumeAll</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskResumeAll (void )</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l02173">2173</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a17fb13e7325d9dee9dec76f4a736138b"/><section>
    <title>xTaskResumeFromISR()</title>
<indexterm><primary>xTaskResumeFromISR</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTaskResumeFromISR</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xTaskResumeFromISR (<link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xTaskToResume)</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l01897">1897</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_tasks_8c_1a1f2284b749c9706d04510853bd8e8f91"/><section>
    <title>pxCurrentTCB</title>
<indexterm><primary>pxCurrentTCB</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>pxCurrentTCB</secondary></indexterm>
<para><computeroutput><link linkend="_tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453">TCB_t</link>* volatile pxCurrentTCB = NULL</computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00334">334</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a30b4b716a99940e93fc9d4a13c1f81db"/><section>
    <title>pxDelayedTaskList</title>
<indexterm><primary>pxDelayedTaskList</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>pxDelayedTaskList</secondary></indexterm>
<para><computeroutput><link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link>* volatile pxDelayedTaskList<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00343">343</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1aae5cac9860aec54036f49920561a9705"/><section>
    <title>pxOverflowDelayedTaskList</title>
<indexterm><primary>pxOverflowDelayedTaskList</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>pxOverflowDelayedTaskList</secondary></indexterm>
<para><computeroutput><link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link>* volatile pxOverflowDelayedTaskList<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00344">344</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ab4a8345f8c340d07086342c0dd92c972"/><section>
    <title>pxReadyTasksLists</title>
<indexterm><primary>pxReadyTasksLists</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>pxReadyTasksLists</secondary></indexterm>
<para><computeroutput><link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> pxReadyTasksLists[(10)]<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00340">340</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a54edd210c179ef9d185f5ebb020eaa5a"/><section>
    <title>uxCurrentNumberOfTasks</title>
<indexterm><primary>uxCurrentNumberOfTasks</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>uxCurrentNumberOfTasks</secondary></indexterm>
<para><computeroutput>volatile <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxCurrentNumberOfTasks = ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) 0U<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00367">367</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ad31bb9fd9a09cc9045861dd458f54615"/><section>
    <title>uxDeletedTasksWaitingCleanUp</title>
<indexterm><primary>uxDeletedTasksWaitingCleanUp</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>uxDeletedTasksWaitingCleanUp</secondary></indexterm>
<para><computeroutput>volatile <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxDeletedTasksWaitingCleanUp = ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) 0U<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00350">350</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a476a5b10aeb0bf39d29d6baccbc26f56"/><section>
    <title>uxPendedTicks</title>
<indexterm><primary>uxPendedTicks</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>uxPendedTicks</secondary></indexterm>
<para><computeroutput>volatile <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxPendedTicks = ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) 0U<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00371">371</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a7522707fcf80b216e3a5b25ba464ec85"/><section>
    <title>uxSchedulerSuspended</title>
<indexterm><primary>uxSchedulerSuspended</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>uxSchedulerSuspended</secondary></indexterm>
<para><computeroutput>volatile <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxSchedulerSuspended = ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) ( ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 0 )<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00386">386</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a47256f539ed98e54c6e5b025ccc68279"/><section>
    <title>uxTaskNumber</title>
<indexterm><primary>uxTaskNumber</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>uxTaskNumber</secondary></indexterm>
<para><computeroutput><link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxTaskNumber = ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) 0U<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00374">374</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a3fffd96ac9ae0d8b352ae10896ed4531"/><section>
    <title>uxTopReadyPriority</title>
<indexterm><primary>uxTopReadyPriority</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>uxTopReadyPriority</secondary></indexterm>
<para><computeroutput>volatile <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> uxTopReadyPriority = ( ( <link linkend="_portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6">UBaseType_t</link> ) 0U )<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00369">369</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a07888d97f0712ee0b671b295c03ad19d"/><section>
    <title>xDelayedTaskList1</title>
<indexterm><primary>xDelayedTaskList1</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xDelayedTaskList1</secondary></indexterm>
<para><computeroutput><link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> xDelayedTaskList1<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00341">341</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1aa53d90340a8a11b958e385cd170b8c6d"/><section>
    <title>xDelayedTaskList2</title>
<indexterm><primary>xDelayedTaskList2</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xDelayedTaskList2</secondary></indexterm>
<para><computeroutput><link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> xDelayedTaskList2<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00342">342</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ab1afeb7ccc3b00411775f107e31134ad"/><section>
    <title>xIdleTaskHandle</title>
<indexterm><primary>xIdleTaskHandle</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xIdleTaskHandle</secondary></indexterm>
<para><computeroutput><link linkend="_task_8h_1a25b35e6e19ecf894173e7ff95edb96ef">TaskHandle_t</link> xIdleTaskHandle = NULL<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00376">376</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ac27aa725d8922f33f880005e72edec68"/><section>
    <title>xNextTaskUnblockTime</title>
<indexterm><primary>xNextTaskUnblockTime</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xNextTaskUnblockTime</secondary></indexterm>
<para><computeroutput>volatile <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xNextTaskUnblockTime = ( <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> ) 0U<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00375">375</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1ab278ffe04bd2e0cdf4acdabdd7692306"/><section>
    <title>xNumOfOverflows</title>
<indexterm><primary>xNumOfOverflows</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xNumOfOverflows</secondary></indexterm>
<para><computeroutput>volatile <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xNumOfOverflows = ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 0<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00373">373</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a73880e71e7ed72242d1a078685107421"/><section>
    <title>xPendingReadyList</title>
<indexterm><primary>xPendingReadyList</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xPendingReadyList</secondary></indexterm>
<para><computeroutput><link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> xPendingReadyList<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00345">345</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a1799bfbb95c907794761d18bd75faff5"/><section>
    <title>xSchedulerRunning</title>
<indexterm><primary>xSchedulerRunning</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xSchedulerRunning</secondary></indexterm>
<para><computeroutput>volatile <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xSchedulerRunning = ( ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 0 )<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00370">370</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1aeeff59d101a1407ffc42f81fda83baca"/><section>
    <title>xSuspendedTaskList</title>
<indexterm><primary>xSuspendedTaskList</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xSuspendedTaskList</secondary></indexterm>
<para><computeroutput><link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> xSuspendedTaskList<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00356">356</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a9d5346b64d3da2ce013224df5f403005"/><section>
    <title>xTasksWaitingTermination</title>
<indexterm><primary>xTasksWaitingTermination</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTasksWaitingTermination</secondary></indexterm>
<para><computeroutput><link linkend="_list_8h_1ad14d7e3de1350e459c7c23c6f59c902a">List_t</link> xTasksWaitingTermination<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00349">349</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1aaa88969a9b48aea401dbb1ff2b0ef4de"/><section>
    <title>xTickCount</title>
<indexterm><primary>xTickCount</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xTickCount</secondary></indexterm>
<para><computeroutput>volatile <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> xTickCount = ( <link linkend="_portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9">TickType_t</link> ) 0<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00368">368</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
<anchor xml:id="_tasks_8c_1a25abc99b92e910c1602028081e13b1b0"/><section>
    <title>xYieldPending</title>
<indexterm><primary>xYieldPending</primary><secondary>tasks.c</secondary></indexterm>
<indexterm><primary>tasks.c</primary><secondary>xYieldPending</secondary></indexterm>
<para><computeroutput>volatile <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> xYieldPending = ( ( <link linkend="_portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796">BaseType_t</link> ) 0 )<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_tasks_8c_source_1l00372">372</link> of file <link linkend="_tasks_8c_source">tasks.c</link>.</para>
</section>
</section>
</section>
