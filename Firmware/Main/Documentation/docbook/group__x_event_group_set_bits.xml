<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_event_group_set_bits" xml:lang="en-US">
<title>xEventGroupSetBits</title>
<indexterm><primary>xEventGroupSetBits</primary></indexterm>

<para><link linkend="_event__groups_8h">event_groups.h</link> <literallayout>
   EventBits_t <link linkend="_event__groups_8h_1a02d7b3bb55f7e11d9c47116266c5fb2e">xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )</link>;
</literallayout></para>

<para>Set bits within an event group. This function cannot be called from an interrupt. <link linkend="_event__groups_8h_1a62b68278abac6358369ae8e390988a02">xEventGroupSetBitsFromISR()</link> is a version that can be called from an interrupt.</para>

<para>Setting bits in an event group will automatically unblock tasks that are blocked waiting for the bits.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xEventGroup</entry><entry>
<para>The event group in which the bits are to be set.</para>
</entry>
                            </row>
                            <row>
<entry>uxBitsToSet</entry><entry>
<para>A bitwise value that indicates the bit or bits to set. For example, to set bit 3 only, set uxBitsToSet to 0x08. To set bit 3 and bit 0 set uxBitsToSet to 0x09.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The value of the event group at the time the call to <link linkend="_event__groups_8h_1a02d7b3bb55f7e11d9c47116266c5fb2e">xEventGroupSetBits()</link> returns. There are two reasons why the returned value might have the bits specified by the uxBitsToSet parameter cleared. First, if setting a bit results in a task that was waiting for the bit leaving the blocked state then it is possible the bit will be cleared automatically (see the xClearBitOnExit parameter of <link linkend="_event__groups_8h_1aab9d5b405bc57b7624dcabe9a9a503db">xEventGroupWaitBits()</link>). Second, any unblocked (or otherwise Ready state) task that has a priority above that of the task that called <link linkend="_event__groups_8h_1a02d7b3bb55f7e11d9c47116266c5fb2e">xEventGroupSetBits()</link> will execute and may change the event group value before the call to <link linkend="_event__groups_8h_1a02d7b3bb55f7e11d9c47116266c5fb2e">xEventGroupSetBits()</link> returns.</para>
</formalpara>
Example usage: <literallayout>
  #define BIT_0 ( 1 &lt;&lt; 0 )
  #define BIT_4 ( 1 &lt;&lt; 4 )

  void aFunction( EventGroupHandle_t xEventGroup )
  {
  EventBits_t uxBits;

    // Set bit 0 and bit 4 in xEventGroup.
    uxBits = xEventGroupSetBits(
                        xEventGroup,    // The event group being updated.
                        BIT_0 | BIT_4 );// The bits being set.

    if( ( uxBits &amp; ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )
    {
        // Both bit 0 and bit 4 remained set when the function returned.
    }
    else if( ( uxBits &amp; BIT_0 ) != 0 )
    {
        // Bit 0 remained set when the function returned, but bit 4 was
        // cleared.  It might be that bit 4 was cleared automatically as a
        // task that was waiting for bit 4 was removed from the Blocked
        // state.
    }
    else if( ( uxBits &amp; BIT_4 ) != 0 )
    {
        // Bit 4 remained set when the function returned, but bit 0 was
        // cleared.  It might be that bit 0 was cleared automatically as a
        // task that was waiting for bit 0 was removed from the Blocked
        // state.
    }
    else
    {
        // Neither bit 0 nor bit 4 remained set.  It might be that a task
        // was waiting for both of the bits to be set, and the bits were
        // cleared as the task left the Blocked state.
    }
  }
  </literallayout> </para>
</section>
