<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_queue_create" xml:lang="en-US">
<title>xQueueCreate</title>
<indexterm><primary>xQueueCreate</primary></indexterm>

<para>queue. h <literallayout>
QueueHandle_t xQueueCreate(
                          UBaseType_t uxQueueLength,
                          UBaseType_t uxItemSize
                      );
  </literallayout></para>

<para>Creates a new queue instance, and returns a handle by which the new queue can be referenced.</para>

<para>Internally, within the FreeRTOS implementation, queues use two blocks of memory. The first block is used to hold the queue&apos;s data structures. The second block is used to hold items placed into the queue. If a queue is created using xQueueCreate() then both blocks of memory are automatically dynamically allocated inside the xQueueCreate() function. (see <link xlink:href="http://www.freertos.org/a00111.html">http://www.freertos.org/a00111.html</link>). If a queue is created using xQueueCreateStatic() then the application writer must provide the memory that will get used by the queue. xQueueCreateStatic() therefore allows a queue to be created without using any dynamic memory allocation.</para>

<para><link xlink:href="http://www.FreeRTOS.org/Embedded-RTOS-Queues.html">http://www.FreeRTOS.org/Embedded-RTOS-Queues.html</link></para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>uxQueueLength</entry><entry>
<para>The maximum number of items that the queue can contain.</para>
</entry>
                            </row>
                            <row>
<entry>uxItemSize</entry><entry>
<para>The number of bytes each item in the queue will require. Items are queued by copy, not by reference, so this is the number of bytes that will be copied for each posted item. Each item on the queue must be the same size.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>If the queue is successfully create then a handle to the newly created queue is returned. If the queue cannot be created then 0 is returned.</para>
</formalpara>
Example usage: <literallayout>
struct AMessage
{
   char ucMessageID;
   char ucData[ 20 ];
};

void vATask( void *pvParameters )
{
QueueHandle_t xQueue1, xQueue2;

   // Create a queue capable of containing 10 uint32_t values.
   xQueue1 = xQueueCreate( 10, sizeof( uint32_t ) );
   if( xQueue1 == 0 )
   {
    // Queue was not created and must not be used.
   }

   // Create a queue capable of containing 10 pointers to AMessage structures.
   // These should be passed by pointer as they contain a lot of data.
   xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );
   if( xQueue2 == 0 )
   {
    // Queue was not created and must not be used.
   }

   // ... Rest of task code.
}
</literallayout> </para>
</section>
