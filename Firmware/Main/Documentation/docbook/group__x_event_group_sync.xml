<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_event_group_sync" xml:lang="en-US">
<title>xEventGroupSync</title>
<indexterm><primary>xEventGroupSync</primary></indexterm>

<para><link linkend="_event__groups_8h">event_groups.h</link> <literallayout>
   EventBits_t <link linkend="_event__groups_8h_1a869511456b86426f52e2eec898bff341">xEventGroupSync( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet,
                                const EventBits_t uxBitsToWaitFor,
                                TickType_t xTicksToWait )</link>;
</literallayout></para>

<para>Atomically set bits within an event group, then wait for a combination of bits to be set within the same event group. This functionality is typically used to synchronise multiple tasks, where each task has to wait for the other tasks to reach a synchronisation point before proceeding.</para>

<para>This function cannot be used from an interrupt.</para>

<para>The function will return before its block time expires if the bits specified by the uxBitsToWait parameter are set, or become set within that time. In this case all the bits specified by uxBitsToWait will be automatically cleared before the function returns.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xEventGroup</entry><entry>
<para>The event group in which the bits are being tested. The event group must have previously been created using a call to <link linkend="_event__groups_8c_1a2e8622ce280fff2f60ad867dff0a4519">xEventGroupCreate()</link>.</para>
</entry>
                            </row>
                            <row>
<entry>uxBitsToSet</entry><entry>
<para>The bits to set in the event group before determining if, and possibly waiting for, all the bits specified by the uxBitsToWait parameter are set.</para>
</entry>
                            </row>
                            <row>
<entry>uxBitsToWaitFor</entry><entry>
<para>A bitwise value that indicates the bit or bits to test inside the event group. For example, to wait for bit 0 and bit 2 set uxBitsToWaitFor to 0x05. To wait for bits 0 and bit 1 and bit 2 set uxBitsToWaitFor to 0x07. Etc.</para>
</entry>
                            </row>
                            <row>
<entry>xTicksToWait</entry><entry>
<para>The maximum amount of time (specified in &apos;ticks&apos;) to wait for all of the bits specified by uxBitsToWaitFor to become set.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The value of the event group at the time either the bits being waited for became set, or the block time expired. Test the return value to know which bits were set. If <link linkend="_event__groups_8h_1a869511456b86426f52e2eec898bff341">xEventGroupSync()</link> returned because its timeout expired then not all the bits being waited for will be set. If <link linkend="_event__groups_8h_1a869511456b86426f52e2eec898bff341">xEventGroupSync()</link> returned because all the bits it was waiting for were set then the returned value is the event group value before any bits were automatically cleared.</para>
</formalpara>
Example usage: <literallayout>
// Bits used by the three tasks.
#define TASK_0_BIT      ( 1 &lt;&lt; 0 )
#define TASK_1_BIT      ( 1 &lt;&lt; 1 )
#define TASK_2_BIT      ( 1 &lt;&lt; 2 )

#define ALL_SYNC_BITS ( TASK_0_BIT | TASK_1_BIT | TASK_2_BIT )

// Use an event group to synchronise three tasks.  It is assumed this event
// group has already been created elsewhere.
EventGroupHandle_t xEventBits;

void vTask0( void *pvParameters )
{
EventBits_t uxReturn;
TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;

    for( ;; )
    {
    // Perform task functionality here.

    // Set bit 0 in the event flag to note this task has reached the
    // sync point.  The other two tasks will set the other two bits defined
    // by ALL_SYNC_BITS.  All three tasks have reached the synchronisation
    // point when all the ALL_SYNC_BITS are set.  Wait a maximum of 100ms
    // for this to happen.
    uxReturn = xEventGroupSync( xEventBits, TASK_0_BIT, ALL_SYNC_BITS, xTicksToWait );

    if( ( uxReturn &amp; ALL_SYNC_BITS ) == ALL_SYNC_BITS )
    {
        // All three tasks reached the synchronisation point before the call
        // to <link linkend="_event__groups_8h_1a869511456b86426f52e2eec898bff341">xEventGroupSync()</link> timed out.
    }
   }
}

void vTask1( void *pvParameters )
{
    for( ;; )
    {
    // Perform task functionality here.

    // Set bit 1 in the event flag to note this task has reached the
    // synchronisation point.  The other two tasks will set the other two
    // bits defined by ALL_SYNC_BITS.  All three tasks have reached the
    // synchronisation point when all the ALL_SYNC_BITS are set.  Wait
    // indefinitely for this to happen.
    xEventGroupSync( xEventBits, TASK_1_BIT, ALL_SYNC_BITS, portMAX_DELAY );

    // <link linkend="_event__groups_8h_1a869511456b86426f52e2eec898bff341">xEventGroupSync()</link> was called with an indefinite block time, so
    // this task will only reach here if the syncrhonisation was made by all
    // three tasks, so there is no need to test the return value.
    }
}

void vTask2( void *pvParameters )
{
    for( ;; )
    {
    // Perform task functionality here.

    // Set bit 2 in the event flag to note this task has reached the
    // synchronisation point.  The other two tasks will set the other two
    // bits defined by ALL_SYNC_BITS.  All three tasks have reached the
    // synchronisation point when all the ALL_SYNC_BITS are set.  Wait
    // indefinitely for this to happen.
    xEventGroupSync( xEventBits, TASK_2_BIT, ALL_SYNC_BITS, portMAX_DELAY );

    // <link linkend="_event__groups_8h_1a869511456b86426f52e2eec898bff341">xEventGroupSync()</link> was called with an indefinite block time, so
    // this task will only reach here if the syncrhonisation was made by all
    // three tasks, so there is no need to test the return value.
   }
}

</literallayout> </para>
</section>
