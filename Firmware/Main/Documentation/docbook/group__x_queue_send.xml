<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_queue_send" xml:lang="en-US">
<title>xQueueSend</title>
<indexterm><primary>xQueueSend</primary></indexterm>

<para>queue. h <literallayout>
BaseType_t xQueueSendToToFront(
                               QueueHandle_t    xQueue,
                               const void       *pvItemToQueue,
                               TickType_t       xTicksToWait
                           );
  </literallayout></para>

<para>Post an item to the front of a queue. The item is queued by copy, not by reference. This function must not be called from an interrupt service routine. See xQueueSendFromISR () for an alternative which may be used in an ISR.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xQueue</entry><entry>
<para>The handle to the queue on which the item is to be posted.</para>
</entry>
                            </row>
                            <row>
<entry>pvItemToQueue</entry><entry>
<para>A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.</para>
</entry>
                            </row>
                            <row>
<entry>xTicksToWait</entry><entry>
<para>The maximum amount of time the task should block waiting for space to become available on the queue, should it already be full. The call will return immediately if this is set to 0 and the queue is full. The time is defined in tick periods so the constant portTICK_PERIOD_MS should be used to convert to real time if this is required.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL.</para>
</formalpara>
Example usage: <literallayout>
struct AMessage
{
   char ucMessageID;
   char ucData[ 20 ];
} xMessage;

uint32_t ulVar = 10UL;

void vATask( void *pvParameters )
{
QueueHandle_t xQueue1, xQueue2;
struct AMessage *pxMessage;

   // Create a queue capable of containing 10 uint32_t values.
   xQueue1 = xQueueCreate( 10, sizeof( uint32_t ) );

   // Create a queue capable of containing 10 pointers to AMessage structures.
   // These should be passed by pointer as they contain a lot of data.
   xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );

   // ...

   if( xQueue1 != 0 )
   {
    // Send an uint32_t.  Wait for 10 ticks for space to become
    // available if necessary.
    if( xQueueSendToFront( xQueue1, ( void * ) &amp;ulVar, ( TickType_t ) 10 ) != pdPASS )
    {
        // Failed to post the message, even after 10 ticks.
    }
   }

   if( xQueue2 != 0 )
   {
    // Send a pointer to a struct AMessage object.  Don&apos;t block if the
    // queue is already full.
    pxMessage = &amp; xMessage;
    xQueueSendToFront( xQueue2, ( void * ) &amp;pxMessage, ( TickType_t ) 0 );
   }

   // ... Rest of task code.
}
</literallayout></para>

<para>queue. h <literallayout>
BaseType_t <link linkend="_queue_8h_1a81d24a2c1199d58efb76fbee15853112">xQueueSendToBack(
                               QueueHandle_t    xQueue,
                               const void       *pvItemToQueue,
                               TickType_t       xTicksToWait
                           )</link>;
  </literallayout></para>

<para>This is a macro that calls <link linkend="_queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3">xQueueGenericSend()</link>.</para>

<para>Post an item to the back of a queue. The item is queued by copy, not by reference. This function must not be called from an interrupt service routine. See xQueueSendFromISR () for an alternative which may be used in an ISR.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xQueue</entry><entry>
<para>The handle to the queue on which the item is to be posted.</para>
</entry>
                            </row>
                            <row>
<entry>pvItemToQueue</entry><entry>
<para>A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.</para>
</entry>
                            </row>
                            <row>
<entry>xTicksToWait</entry><entry>
<para>The maximum amount of time the task should block waiting for space to become available on the queue, should it already be full. The call will return immediately if this is set to 0 and the queue is full. The time is defined in tick periods so the constant portTICK_PERIOD_MS should be used to convert to real time if this is required.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL.</para>
</formalpara>
Example usage: <literallayout>
struct AMessage
{
   char ucMessageID;
   char ucData[ 20 ];
} xMessage;

uint32_t ulVar = 10UL;

void vATask( void *pvParameters )
{
QueueHandle_t xQueue1, xQueue2;
struct AMessage *pxMessage;

   // Create a queue capable of containing 10 uint32_t values.
   xQueue1 = xQueueCreate( 10, sizeof( uint32_t ) );

   // Create a queue capable of containing 10 pointers to AMessage structures.
   // These should be passed by pointer as they contain a lot of data.
   xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );

   // ...

   if( xQueue1 != 0 )
   {
    // Send an uint32_t.  Wait for 10 ticks for space to become
    // available if necessary.
    if( xQueueSendToBack( xQueue1, ( void * ) &amp;ulVar, ( TickType_t ) 10 ) != pdPASS )
    {
        // Failed to post the message, even after 10 ticks.
    }
   }

   if( xQueue2 != 0 )
   {
    // Send a pointer to a struct AMessage object.  Don&apos;t block if the
    // queue is already full.
    pxMessage = &amp; xMessage;
    xQueueSendToBack( xQueue2, ( void * ) &amp;pxMessage, ( TickType_t ) 0 );
   }

   // ... Rest of task code.
}
</literallayout></para>

<para>queue. h <literallayout>
BaseType_t <link linkend="_queue_8h_1af7eb49d3249351176992950d9185abe9">xQueueSend(
                          QueueHandle_t xQueue,
                          const void * pvItemToQueue,
                          TickType_t xTicksToWait
                     )</link>;
  </literallayout></para>

<para>This is a macro that calls <link linkend="_queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3">xQueueGenericSend()</link>. It is included for backward compatibility with versions of FreeRTOS.org that did not include the <link linkend="_queue_8h_1aa612fcc2b1ceee0200f34b942e300b41">xQueueSendToFront()</link> and <link linkend="_queue_8h_1a81d24a2c1199d58efb76fbee15853112">xQueueSendToBack()</link> macros. It is equivalent to <link linkend="_queue_8h_1a81d24a2c1199d58efb76fbee15853112">xQueueSendToBack()</link>.</para>

<para>Post an item on a queue. The item is queued by copy, not by reference. This function must not be called from an interrupt service routine. See xQueueSendFromISR () for an alternative which may be used in an ISR.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xQueue</entry><entry>
<para>The handle to the queue on which the item is to be posted.</para>
</entry>
                            </row>
                            <row>
<entry>pvItemToQueue</entry><entry>
<para>A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.</para>
</entry>
                            </row>
                            <row>
<entry>xTicksToWait</entry><entry>
<para>The maximum amount of time the task should block waiting for space to become available on the queue, should it already be full. The call will return immediately if this is set to 0 and the queue is full. The time is defined in tick periods so the constant portTICK_PERIOD_MS should be used to convert to real time if this is required.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL.</para>
</formalpara>
Example usage: <literallayout>
struct AMessage
{
   char ucMessageID;
   char ucData[ 20 ];
} xMessage;

uint32_t ulVar = 10UL;

void vATask( void *pvParameters )
{
QueueHandle_t xQueue1, xQueue2;
struct AMessage *pxMessage;

   // Create a queue capable of containing 10 uint32_t values.
   xQueue1 = xQueueCreate( 10, sizeof( uint32_t ) );

   // Create a queue capable of containing 10 pointers to AMessage structures.
   // These should be passed by pointer as they contain a lot of data.
   xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );

   // ...

   if( xQueue1 != 0 )
   {
    // Send an uint32_t.  Wait for 10 ticks for space to become
    // available if necessary.
    if( xQueueSend( xQueue1, ( void * ) &amp;ulVar, ( TickType_t ) 10 ) != pdPASS )
    {
        // Failed to post the message, even after 10 ticks.
    }
   }

   if( xQueue2 != 0 )
   {
    // Send a pointer to a struct AMessage object.  Don&apos;t block if the
    // queue is already full.
    pxMessage = &amp; xMessage;
    xQueueSend( xQueue2, ( void * ) &amp;pxMessage, ( TickType_t ) 0 );
   }

   // ... Rest of task code.
}
</literallayout></para>

<para>queue. h <literallayout>
BaseType_t xQueueGenericSend(
                                QueueHandle_t xQueue,
                                const void * pvItemToQueue,
                                TickType_t xTicksToWait
                                BaseType_t xCopyPosition
                            );
  </literallayout></para>

<para>It is preferred that the macros <link linkend="_queue_8h_1af7eb49d3249351176992950d9185abe9">xQueueSend()</link>, <link linkend="_queue_8h_1aa612fcc2b1ceee0200f34b942e300b41">xQueueSendToFront()</link> and <link linkend="_queue_8h_1a81d24a2c1199d58efb76fbee15853112">xQueueSendToBack()</link> are used in place of calling this function directly.</para>

<para>Post an item on a queue. The item is queued by copy, not by reference. This function must not be called from an interrupt service routine. See xQueueSendFromISR () for an alternative which may be used in an ISR.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xQueue</entry><entry>
<para>The handle to the queue on which the item is to be posted.</para>
</entry>
                            </row>
                            <row>
<entry>pvItemToQueue</entry><entry>
<para>A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.</para>
</entry>
                            </row>
                            <row>
<entry>xTicksToWait</entry><entry>
<para>The maximum amount of time the task should block waiting for space to become available on the queue, should it already be full. The call will return immediately if this is set to 0 and the queue is full. The time is defined in tick periods so the constant portTICK_PERIOD_MS should be used to convert to real time if this is required.</para>
</entry>
                            </row>
                            <row>
<entry>xCopyPosition</entry><entry>
<para>Can take the value queueSEND_TO_BACK to place the item at the back of the queue, or queueSEND_TO_FRONT to place the item at the front of the queue (for high priority messages).</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL.</para>
</formalpara>
Example usage: <literallayout>
struct AMessage
{
   char ucMessageID;
   char ucData[ 20 ];
} xMessage;

uint32_t ulVar = 10UL;

void vATask( void *pvParameters )
{
QueueHandle_t xQueue1, xQueue2;
struct AMessage *pxMessage;

   // Create a queue capable of containing 10 uint32_t values.
   xQueue1 = xQueueCreate( 10, sizeof( uint32_t ) );

   // Create a queue capable of containing 10 pointers to AMessage structures.
   // These should be passed by pointer as they contain a lot of data.
   xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );

   // ...

   if( xQueue1 != 0 )
   {
    // Send an uint32_t.  Wait for 10 ticks for space to become
    // available if necessary.
    if( xQueueGenericSend( xQueue1, ( void * ) &amp;ulVar, ( TickType_t ) 10, queueSEND_TO_BACK ) != pdPASS )
    {
        // Failed to post the message, even after 10 ticks.
    }
   }

   if( xQueue2 != 0 )
   {
    // Send a pointer to a struct AMessage object.  Don&apos;t block if the
    // queue is already full.
    pxMessage = &amp; xMessage;
    xQueueGenericSend( xQueue2, ( void * ) &amp;pxMessage, ( TickType_t ) 0, queueSEND_TO_BACK );
   }

   // ... Rest of task code.
}
</literallayout> </para>
</section>
