<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_task_create" xml:lang="en-US">
<title>xTaskCreate</title>
<indexterm><primary>xTaskCreate</primary></indexterm>

<para>task. h <literallayout>
BaseType_t xTaskCreate(
                          TaskFunction_t pvTaskCode,
                          const char * const pcName,
                          configSTACK_DEPTH_TYPE usStackDepth,
                          void *pvParameters,
                          UBaseType_t uxPriority,
                          TaskHandle_t *pvCreatedTask
                      );</literallayout></para>

<para>Create a new task and add it to the list of tasks that are ready to run.</para>

<para>Internally, within the FreeRTOS implementation, tasks use two blocks of memory. The first block is used to hold the task&apos;s data structures. The second block is used by the task as its stack. If a task is created using <link linkend="_tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1">xTaskCreate()</link> then both blocks of memory are automatically dynamically allocated inside the <link linkend="_tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1">xTaskCreate()</link> function. (see <link xlink:href="http://www.freertos.org/a00111.html">http://www.freertos.org/a00111.html</link>). If a task is created using xTaskCreateStatic() then the application writer must provide the required memory. xTaskCreateStatic() therefore allows a task to be created without using any dynamic memory allocation.</para>

<para>See xTaskCreateStatic() for a version that does not use any dynamic memory allocation.</para>

<para><link linkend="_tasks_8c_1ad138d9dda4709b10d711775fa40eb1a1">xTaskCreate()</link> can only be used to create a task that has unrestricted access to the entire microcontroller memory map. Systems that include MPU support can alternatively create an MPU constrained task using xTaskCreateRestricted().</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pvTaskCode</entry><entry>
<para>Pointer to the task entry function. Tasks must be implemented to never return (i.e. continuous loop).</para>
</entry>
                            </row>
                            <row>
<entry>pcName</entry><entry>
<para>A descriptive name for the task. This is mainly used to facilitate debugging. Max length defined by configMAX_TASK_NAME_LEN - default is 16.</para>
</entry>
                            </row>
                            <row>
<entry>usStackDepth</entry><entry>
<para>The size of the task stack specified as the number of variables the stack can hold - not the number of bytes. For example, if the stack is 16 bits wide and usStackDepth is defined as 100, 200 bytes will be allocated for stack storage.</para>
</entry>
                            </row>
                            <row>
<entry>pvParameters</entry><entry>
<para>Pointer that will be used as the parameter for the task being created.</para>
</entry>
                            </row>
                            <row>
<entry>uxPriority</entry><entry>
<para>The priority at which the task should run. Systems that include MPU support can optionally create tasks in a privileged (system) mode by setting bit portPRIVILEGE_BIT of the priority parameter. For example, to create a privileged task at priority 2 the uxPriority parameter should be set to ( 2 | portPRIVILEGE_BIT ).</para>
</entry>
                            </row>
                            <row>
<entry>pvCreatedTask</entry><entry>
<para>Used to pass back a handle by which the created task can be referenced.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdPASS if the task was successfully created and added to a ready list, otherwise an error code defined in the file <link linkend="_projdefs_8h">projdefs.h</link></para>
</formalpara>
Example usage: <literallayout>
// Task to be created.
void vTaskCode( void * pvParameters )
{
    for( ;; )
    {
     // Task code goes here.
    }
}

// Function that creates a task.
void vOtherFunction( void )
{
static uint8_t ucParameterToPass;
TaskHandle_t xHandle = NULL;

    // Create the task, storing the handle.  Note that the passed parameter ucParameterToPass
    // must exist for the lifetime of the task, so in this case is declared static.  If it was just an
    // an automatic stack variable it might no longer exist, or at least have been corrupted, by the time
    // the new task attempts to access it.
    xTaskCreate( vTaskCode, &quot;NAME&quot;, STACK_SIZE, &amp;ucParameterToPass, tskIDLE_PRIORITY, &amp;xHandle );
    <link linkend="__free_r_t_o_s_8h_1a228c70cd48927d6ab730ed1a6dfbe35f">configASSERT( xHandle )</link>;

    // Use the handle to delete the task.
    if( xHandle != NULL )
    {
        vTaskDelete( xHandle );
    }
}
  </literallayout> </para>
</section>
