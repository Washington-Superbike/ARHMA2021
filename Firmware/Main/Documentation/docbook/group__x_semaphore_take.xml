<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_semaphore_take" xml:lang="en-US">
<title>xSemaphoreTake</title>
<indexterm><primary>xSemaphoreTake</primary></indexterm>

<para>semphr. h <literallayout><link linkend="_semphr_8h_1af116e436d2a5ae5bd72dbade2b5ea930">xSemaphoreTake(
                    SemaphoreHandle_t xSemaphore,
                    TickType_t xBlockTime
                )</link></literallayout></para>

<para><emphasis>Macro</emphasis> to obtain a semaphore. The semaphore must have previously been created with a call to xSemaphoreCreateBinary(), xSemaphoreCreateMutex() or xSemaphoreCreateCounting().</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>xSemaphore</entry><entry>
<para>A handle to the semaphore being taken - obtained when the semaphore was created.</para>
</entry>
                            </row>
                            <row>
<entry>xBlockTime</entry><entry>
<para>The time in ticks to wait for the semaphore to become available. The macro portTICK_PERIOD_MS can be used to convert this to a real time. A block time of zero can be used to poll the semaphore. A block time of portMAX_DELAY can be used to block indefinitely (provided INCLUDE_vTaskSuspend is set to 1 in <link linkend="__free_r_t_o_s_config_8h">FreeRTOSConfig.h</link>).</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pdTRUE if the semaphore was obtained. pdFALSE if xBlockTime expired without the semaphore becoming available.</para>
</formalpara>
Example usage: <literallayout>
SemaphoreHandle_t xSemaphore = NULL;

// A task that creates a semaphore.
void vATask( void * pvParameters )
{
   // Create the semaphore to guard a shared resource.
   xSemaphore = xSemaphoreCreateBinary();
}

// A task that uses the semaphore.
void vAnotherTask( void * pvParameters )
{
   // ... Do other things.

   if( xSemaphore != NULL )
   {
       // See if we can obtain the semaphore.  If the semaphore is not available
       // wait 10 ticks to see if it becomes free.
       if( <link linkend="_semphr_8h_1af116e436d2a5ae5bd72dbade2b5ea930">xSemaphoreTake( xSemaphore, ( TickType_t ) 10 )</link> == pdTRUE )
       {
           // We were able to obtain the semaphore and can now access the
           // shared resource.

           // ...

           // We have finished accessing the shared resource.  Release the
           // semaphore.
           <link linkend="_semphr_8h_1aae55761cabfa9bf85c8f4430f78c0953">xSemaphoreGive( xSemaphore )</link>;
       }
       else
       {
           // We could not obtain the semaphore and can therefore not access
           // the shared resource safely.
       }
   }
}
</literallayout> </para>
</section>
