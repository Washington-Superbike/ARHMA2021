<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__v_task_list" xml:lang="en-US">
<title>vTaskList</title>
<indexterm><primary>vTaskList</primary></indexterm>

<para>task. h <literallayout>void <link linkend="_task_8h_1ab87abc717f34ddced76802d12588a93d">vTaskList( char *pcWriteBuffer )</link>;</literallayout></para>

<para>configUSE_TRACE_FACILITY and configUSE_STATS_FORMATTING_FUNCTIONS must both be defined as 1 for this function to be available. See the configuration section of the FreeRTOS.org website for more information.</para>

<para>NOTE 1: This function will disable interrupts for its duration. It is not intended for normal application runtime use but as a debug aid.</para>

<para>Lists all the current tasks, along with their current state and stack usage high water mark.</para>

<para>Tasks are reported as blocked (&apos;B&apos;), ready (&apos;R&apos;), deleted (&apos;D&apos;) or suspended (&apos;S&apos;).</para>

<para>PLEASE NOTE:</para>

<para>This function is provided for convenience only, and is used by many of the demo applications. Do not consider it to be part of the scheduler.</para>

<para><link linkend="_task_8h_1ab87abc717f34ddced76802d12588a93d">vTaskList()</link> calls <link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState()</link>, then formats part of the <link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState()</link> output into a human readable table that displays task names, states and stack usage.</para>

<para><link linkend="_task_8h_1ab87abc717f34ddced76802d12588a93d">vTaskList()</link> has a dependency on the sprintf() C library function that might bloat the code size, use a lot of stack, and provide different results on different platforms. An alternative, tiny, third party, and limited functionality implementation of sprintf() is provided in many of the FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note printf-stdarg.c does not provide a full snprintf() implementation!).</para>

<para>It is recommended that production systems call <link linkend="_task_8h_1aa4603f3de3d809e9beb18d10fbac005d">uxTaskGetSystemState()</link> directly to get access to raw stats data, rather than indirectly through a call to <link linkend="_task_8h_1ab87abc717f34ddced76802d12588a93d">vTaskList()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pcWriteBuffer</entry><entry>
<para>A buffer into which the above mentioned details will be written, in ASCII form. This buffer is assumed to be large enough to contain the generated report. Approximately 40 bytes per task should be sufficient. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
