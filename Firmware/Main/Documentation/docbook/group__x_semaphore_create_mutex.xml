<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__x_semaphore_create_mutex" xml:lang="en-US">
<title>xSemaphoreCreateMutex</title>
<indexterm><primary>xSemaphoreCreateMutex</primary></indexterm>

<para>semphr. h <literallayout>SemaphoreHandle_t xSemaphoreCreateMutex( void )</literallayout></para>

<para>Creates a new mutex type semaphore instance, and returns a handle by which the new mutex can be referenced.</para>

<para>Internally, within the FreeRTOS implementation, mutex semaphores use a block of memory, in which the mutex structure is stored. If a mutex is created using xSemaphoreCreateMutex() then the required memory is automatically dynamically allocated inside the xSemaphoreCreateMutex() function. (see <link xlink:href="http://www.freertos.org/a00111.html">http://www.freertos.org/a00111.html</link>). If a mutex is created using xSemaphoreCreateMutexStatic() then the application writer must provided the memory. xSemaphoreCreateMutexStatic() therefore allows a mutex to be created without using any dynamic memory allocation.</para>

<para>Mutexes created using this function can be accessed using the <link linkend="_semphr_8h_1af116e436d2a5ae5bd72dbade2b5ea930">xSemaphoreTake()</link> and <link linkend="_semphr_8h_1aae55761cabfa9bf85c8f4430f78c0953">xSemaphoreGive()</link> macros. The xSemaphoreTakeRecursive() and xSemaphoreGiveRecursive() macros must not be used.</para>

<para>This type of semaphore uses a priority inheritance mechanism so a task &apos;taking&apos; a semaphore MUST ALWAYS &apos;give&apos; the semaphore back once the semaphore it is no longer required.</para>

<para>Mutex type semaphores cannot be used from within interrupt service routines.</para>

<para>See xSemaphoreCreateBinary() for an alternative implementation that can be used for pure synchronisation (where one task or interrupt always &apos;gives&apos; the semaphore and another always &apos;takes&apos; the semaphore) and from within interrupt service routines.</para>

<para><formalpara><title>Returns</title>

<para>If the mutex was successfully created then a handle to the created semaphore is returned. If there was not enough heap to allocate the mutex data structures then NULL is returned.</para>
</formalpara>
Example usage: <literallayout>
SemaphoreHandle_t xSemaphore;

void vATask( void * pvParameters )
{
   // Semaphore cannot be used before a call to xSemaphoreCreateMutex().
   // This is a macro so pass the variable in directly.
   xSemaphore = xSemaphoreCreateMutex();

   if( xSemaphore != NULL )
   {
       // The semaphore was created successfully.
       // The semaphore can now be used.
   }
}
</literallayout> </para>
</section>
